
Emvedded_OS_FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002484  08009140  08009140  00019140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5c4  0800b5c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5c4  0800b5c4  0001b5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5cc  0800b5cc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5cc  0800b5cc  0001b5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5d0  0800b5d0  0001b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e84  20000078  0800b64c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012efc  0800b64c  00022efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e036  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000417a  00000000  00000000  0003e0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00042258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  00043678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b64  00000000  00000000  00044920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188dd  00000000  00000000  00069484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5dfd  00000000  00000000  00081d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00157b5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e20  00000000  00000000  00157bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009128 	.word	0x08009128

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009128 	.word	0x08009128

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b96e 	b.w	800095c <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468c      	mov	ip, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	f040 8083 	bne.w	80007ae <__udivmoddi4+0x116>
 80006a8:	428a      	cmp	r2, r1
 80006aa:	4617      	mov	r7, r2
 80006ac:	d947      	bls.n	800073e <__udivmoddi4+0xa6>
 80006ae:	fab2 f282 	clz	r2, r2
 80006b2:	b142      	cbz	r2, 80006c6 <__udivmoddi4+0x2e>
 80006b4:	f1c2 0020 	rsb	r0, r2, #32
 80006b8:	fa24 f000 	lsr.w	r0, r4, r0
 80006bc:	4091      	lsls	r1, r2
 80006be:	4097      	lsls	r7, r2
 80006c0:	ea40 0c01 	orr.w	ip, r0, r1
 80006c4:	4094      	lsls	r4, r2
 80006c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006ca:	0c23      	lsrs	r3, r4, #16
 80006cc:	fbbc f6f8 	udiv	r6, ip, r8
 80006d0:	fa1f fe87 	uxth.w	lr, r7
 80006d4:	fb08 c116 	mls	r1, r8, r6, ip
 80006d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006dc:	fb06 f10e 	mul.w	r1, r6, lr
 80006e0:	4299      	cmp	r1, r3
 80006e2:	d909      	bls.n	80006f8 <__udivmoddi4+0x60>
 80006e4:	18fb      	adds	r3, r7, r3
 80006e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ea:	f080 8119 	bcs.w	8000920 <__udivmoddi4+0x288>
 80006ee:	4299      	cmp	r1, r3
 80006f0:	f240 8116 	bls.w	8000920 <__udivmoddi4+0x288>
 80006f4:	3e02      	subs	r6, #2
 80006f6:	443b      	add	r3, r7
 80006f8:	1a5b      	subs	r3, r3, r1
 80006fa:	b2a4      	uxth	r4, r4
 80006fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000700:	fb08 3310 	mls	r3, r8, r0, r3
 8000704:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000708:	fb00 fe0e 	mul.w	lr, r0, lr
 800070c:	45a6      	cmp	lr, r4
 800070e:	d909      	bls.n	8000724 <__udivmoddi4+0x8c>
 8000710:	193c      	adds	r4, r7, r4
 8000712:	f100 33ff 	add.w	r3, r0, #4294967295
 8000716:	f080 8105 	bcs.w	8000924 <__udivmoddi4+0x28c>
 800071a:	45a6      	cmp	lr, r4
 800071c:	f240 8102 	bls.w	8000924 <__udivmoddi4+0x28c>
 8000720:	3802      	subs	r0, #2
 8000722:	443c      	add	r4, r7
 8000724:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000728:	eba4 040e 	sub.w	r4, r4, lr
 800072c:	2600      	movs	r6, #0
 800072e:	b11d      	cbz	r5, 8000738 <__udivmoddi4+0xa0>
 8000730:	40d4      	lsrs	r4, r2
 8000732:	2300      	movs	r3, #0
 8000734:	e9c5 4300 	strd	r4, r3, [r5]
 8000738:	4631      	mov	r1, r6
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	b902      	cbnz	r2, 8000742 <__udivmoddi4+0xaa>
 8000740:	deff      	udf	#255	; 0xff
 8000742:	fab2 f282 	clz	r2, r2
 8000746:	2a00      	cmp	r2, #0
 8000748:	d150      	bne.n	80007ec <__udivmoddi4+0x154>
 800074a:	1bcb      	subs	r3, r1, r7
 800074c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000750:	fa1f f887 	uxth.w	r8, r7
 8000754:	2601      	movs	r6, #1
 8000756:	fbb3 fcfe 	udiv	ip, r3, lr
 800075a:	0c21      	lsrs	r1, r4, #16
 800075c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000760:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000764:	fb08 f30c 	mul.w	r3, r8, ip
 8000768:	428b      	cmp	r3, r1
 800076a:	d907      	bls.n	800077c <__udivmoddi4+0xe4>
 800076c:	1879      	adds	r1, r7, r1
 800076e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000772:	d202      	bcs.n	800077a <__udivmoddi4+0xe2>
 8000774:	428b      	cmp	r3, r1
 8000776:	f200 80e9 	bhi.w	800094c <__udivmoddi4+0x2b4>
 800077a:	4684      	mov	ip, r0
 800077c:	1ac9      	subs	r1, r1, r3
 800077e:	b2a3      	uxth	r3, r4
 8000780:	fbb1 f0fe 	udiv	r0, r1, lr
 8000784:	fb0e 1110 	mls	r1, lr, r0, r1
 8000788:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800078c:	fb08 f800 	mul.w	r8, r8, r0
 8000790:	45a0      	cmp	r8, r4
 8000792:	d907      	bls.n	80007a4 <__udivmoddi4+0x10c>
 8000794:	193c      	adds	r4, r7, r4
 8000796:	f100 33ff 	add.w	r3, r0, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x10a>
 800079c:	45a0      	cmp	r8, r4
 800079e:	f200 80d9 	bhi.w	8000954 <__udivmoddi4+0x2bc>
 80007a2:	4618      	mov	r0, r3
 80007a4:	eba4 0408 	sub.w	r4, r4, r8
 80007a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007ac:	e7bf      	b.n	800072e <__udivmoddi4+0x96>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d909      	bls.n	80007c6 <__udivmoddi4+0x12e>
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	f000 80b1 	beq.w	800091a <__udivmoddi4+0x282>
 80007b8:	2600      	movs	r6, #0
 80007ba:	e9c5 0100 	strd	r0, r1, [r5]
 80007be:	4630      	mov	r0, r6
 80007c0:	4631      	mov	r1, r6
 80007c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c6:	fab3 f683 	clz	r6, r3
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d14a      	bne.n	8000864 <__udivmoddi4+0x1cc>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d302      	bcc.n	80007d8 <__udivmoddi4+0x140>
 80007d2:	4282      	cmp	r2, r0
 80007d4:	f200 80b8 	bhi.w	8000948 <__udivmoddi4+0x2b0>
 80007d8:	1a84      	subs	r4, r0, r2
 80007da:	eb61 0103 	sbc.w	r1, r1, r3
 80007de:	2001      	movs	r0, #1
 80007e0:	468c      	mov	ip, r1
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d0a8      	beq.n	8000738 <__udivmoddi4+0xa0>
 80007e6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ea:	e7a5      	b.n	8000738 <__udivmoddi4+0xa0>
 80007ec:	f1c2 0320 	rsb	r3, r2, #32
 80007f0:	fa20 f603 	lsr.w	r6, r0, r3
 80007f4:	4097      	lsls	r7, r2
 80007f6:	fa01 f002 	lsl.w	r0, r1, r2
 80007fa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fe:	40d9      	lsrs	r1, r3
 8000800:	4330      	orrs	r0, r6
 8000802:	0c03      	lsrs	r3, r0, #16
 8000804:	fbb1 f6fe 	udiv	r6, r1, lr
 8000808:	fa1f f887 	uxth.w	r8, r7
 800080c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000810:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000814:	fb06 f108 	mul.w	r1, r6, r8
 8000818:	4299      	cmp	r1, r3
 800081a:	fa04 f402 	lsl.w	r4, r4, r2
 800081e:	d909      	bls.n	8000834 <__udivmoddi4+0x19c>
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	f106 3cff 	add.w	ip, r6, #4294967295
 8000826:	f080 808d 	bcs.w	8000944 <__udivmoddi4+0x2ac>
 800082a:	4299      	cmp	r1, r3
 800082c:	f240 808a 	bls.w	8000944 <__udivmoddi4+0x2ac>
 8000830:	3e02      	subs	r6, #2
 8000832:	443b      	add	r3, r7
 8000834:	1a5b      	subs	r3, r3, r1
 8000836:	b281      	uxth	r1, r0
 8000838:	fbb3 f0fe 	udiv	r0, r3, lr
 800083c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000840:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000844:	fb00 f308 	mul.w	r3, r0, r8
 8000848:	428b      	cmp	r3, r1
 800084a:	d907      	bls.n	800085c <__udivmoddi4+0x1c4>
 800084c:	1879      	adds	r1, r7, r1
 800084e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000852:	d273      	bcs.n	800093c <__udivmoddi4+0x2a4>
 8000854:	428b      	cmp	r3, r1
 8000856:	d971      	bls.n	800093c <__udivmoddi4+0x2a4>
 8000858:	3802      	subs	r0, #2
 800085a:	4439      	add	r1, r7
 800085c:	1acb      	subs	r3, r1, r3
 800085e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000862:	e778      	b.n	8000756 <__udivmoddi4+0xbe>
 8000864:	f1c6 0c20 	rsb	ip, r6, #32
 8000868:	fa03 f406 	lsl.w	r4, r3, r6
 800086c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000870:	431c      	orrs	r4, r3
 8000872:	fa20 f70c 	lsr.w	r7, r0, ip
 8000876:	fa01 f306 	lsl.w	r3, r1, r6
 800087a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800087e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000882:	431f      	orrs	r7, r3
 8000884:	0c3b      	lsrs	r3, r7, #16
 8000886:	fbb1 f9fe 	udiv	r9, r1, lr
 800088a:	fa1f f884 	uxth.w	r8, r4
 800088e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000892:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000896:	fb09 fa08 	mul.w	sl, r9, r8
 800089a:	458a      	cmp	sl, r1
 800089c:	fa02 f206 	lsl.w	r2, r2, r6
 80008a0:	fa00 f306 	lsl.w	r3, r0, r6
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x220>
 80008a6:	1861      	adds	r1, r4, r1
 80008a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80008ac:	d248      	bcs.n	8000940 <__udivmoddi4+0x2a8>
 80008ae:	458a      	cmp	sl, r1
 80008b0:	d946      	bls.n	8000940 <__udivmoddi4+0x2a8>
 80008b2:	f1a9 0902 	sub.w	r9, r9, #2
 80008b6:	4421      	add	r1, r4
 80008b8:	eba1 010a 	sub.w	r1, r1, sl
 80008bc:	b2bf      	uxth	r7, r7
 80008be:	fbb1 f0fe 	udiv	r0, r1, lr
 80008c2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008c6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008ca:	fb00 f808 	mul.w	r8, r0, r8
 80008ce:	45b8      	cmp	r8, r7
 80008d0:	d907      	bls.n	80008e2 <__udivmoddi4+0x24a>
 80008d2:	19e7      	adds	r7, r4, r7
 80008d4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008d8:	d22e      	bcs.n	8000938 <__udivmoddi4+0x2a0>
 80008da:	45b8      	cmp	r8, r7
 80008dc:	d92c      	bls.n	8000938 <__udivmoddi4+0x2a0>
 80008de:	3802      	subs	r0, #2
 80008e0:	4427      	add	r7, r4
 80008e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008e6:	eba7 0708 	sub.w	r7, r7, r8
 80008ea:	fba0 8902 	umull	r8, r9, r0, r2
 80008ee:	454f      	cmp	r7, r9
 80008f0:	46c6      	mov	lr, r8
 80008f2:	4649      	mov	r1, r9
 80008f4:	d31a      	bcc.n	800092c <__udivmoddi4+0x294>
 80008f6:	d017      	beq.n	8000928 <__udivmoddi4+0x290>
 80008f8:	b15d      	cbz	r5, 8000912 <__udivmoddi4+0x27a>
 80008fa:	ebb3 020e 	subs.w	r2, r3, lr
 80008fe:	eb67 0701 	sbc.w	r7, r7, r1
 8000902:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000906:	40f2      	lsrs	r2, r6
 8000908:	ea4c 0202 	orr.w	r2, ip, r2
 800090c:	40f7      	lsrs	r7, r6
 800090e:	e9c5 2700 	strd	r2, r7, [r5]
 8000912:	2600      	movs	r6, #0
 8000914:	4631      	mov	r1, r6
 8000916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800091a:	462e      	mov	r6, r5
 800091c:	4628      	mov	r0, r5
 800091e:	e70b      	b.n	8000738 <__udivmoddi4+0xa0>
 8000920:	4606      	mov	r6, r0
 8000922:	e6e9      	b.n	80006f8 <__udivmoddi4+0x60>
 8000924:	4618      	mov	r0, r3
 8000926:	e6fd      	b.n	8000724 <__udivmoddi4+0x8c>
 8000928:	4543      	cmp	r3, r8
 800092a:	d2e5      	bcs.n	80008f8 <__udivmoddi4+0x260>
 800092c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000930:	eb69 0104 	sbc.w	r1, r9, r4
 8000934:	3801      	subs	r0, #1
 8000936:	e7df      	b.n	80008f8 <__udivmoddi4+0x260>
 8000938:	4608      	mov	r0, r1
 800093a:	e7d2      	b.n	80008e2 <__udivmoddi4+0x24a>
 800093c:	4660      	mov	r0, ip
 800093e:	e78d      	b.n	800085c <__udivmoddi4+0x1c4>
 8000940:	4681      	mov	r9, r0
 8000942:	e7b9      	b.n	80008b8 <__udivmoddi4+0x220>
 8000944:	4666      	mov	r6, ip
 8000946:	e775      	b.n	8000834 <__udivmoddi4+0x19c>
 8000948:	4630      	mov	r0, r6
 800094a:	e74a      	b.n	80007e2 <__udivmoddi4+0x14a>
 800094c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000950:	4439      	add	r1, r7
 8000952:	e713      	b.n	800077c <__udivmoddi4+0xe4>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	e724      	b.n	80007a4 <__udivmoddi4+0x10c>
 800095a:	bf00      	nop

0800095c <__aeabi_idiv0>:
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop

08000960 <__io_putchar>:
  * @param  None
  * @retval None
  */
UART_HandleTypeDef huart4;
PUTCHAR_PROTOTYPE
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000968:	1d39      	adds	r1, r7, #4
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	2201      	movs	r2, #1
 8000970:	4803      	ldr	r0, [pc, #12]	; (8000980 <__io_putchar+0x20>)
 8000972:	f002 f830 	bl	80029d6 <HAL_UART_Transmit>
	return ch;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20012e1c 	.word	0x20012e1c

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f000 fdef 	bl	800156c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f857 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 f8dd 	bl	8000b50 <MX_GPIO_Init>
  MX_UART4_Init();
 8000996:	f000 f8b1 	bl	8000afc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  xSemaphore = xSemaphoreCreateMutex();
 800099a:	2001      	movs	r0, #1
 800099c:	f004 fcd0 	bl	8005340 <xQueueCreateMutex>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a1e      	ldr	r2, [pc, #120]	; (8000a1c <main+0x98>)
 80009a4:	6013      	str	r3, [r2, #0]

//  xTaskCreate( darray_test, " darray_test", 500, NULL, 1, NULL);
//  xTaskCreate( gc_test, " gc_test", 500, NULL, 1, NULL);
//  xTaskCreate( gc_flip_test, "gc_flip_test", 500, NULL, 1, NULL);

  state = State_new();
 80009a6:	f003 ff7b 	bl	80048a0 <State_new>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <main+0x9c>)
 80009ae:	6013      	str	r3, [r2, #0]
  heap = new_heap(state, 3, 4);
 80009b0:	4b1b      	ldr	r3, [pc, #108]	; (8000a20 <main+0x9c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2204      	movs	r2, #4
 80009b6:	2103      	movs	r1, #3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 ff8b 	bl	80048d4 <new_heap>
 80009be:	4603      	mov	r3, r0
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <main+0xa0>)
 80009c2:	6013      	str	r3, [r2, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80009c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009c8:	f383 8811 	msr	BASEPRI, r3
 80009cc:	f3bf 8f6f 	isb	sy
 80009d0:	f3bf 8f4f 	dsb	sy
 80009d4:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80009d6:	bf00      	nop
  debug("[TmHeap] New a TmHeap with size 4 and growth rate 4");
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <main+0xa4>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	68d8      	ldr	r0, [r3, #12]
 80009de:	2385      	movs	r3, #133	; 0x85
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <main+0xa8>)
 80009e2:	4913      	ldr	r1, [pc, #76]	; (8000a30 <main+0xac>)
 80009e4:	f007 f8ca 	bl	8007b7c <fiprintf>
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80009f2:	bf00      	nop
  TmHeap_print(heap);
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <main+0xa0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 feb3 	bl	8003764 <TmHeap_print>
//  xTaskCreate( vector_test, " vector_test", 500, NULL, 1, &vector_task_handle);
//  xTaskCreate( vector_test, " vector_test_2", 500, NULL, 1,NULL);
  xTaskCreate( hashmap_test, " hashmap_test", 500, NULL, 1, &map_task_handle);
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <main+0xb0>)
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	2301      	movs	r3, #1
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a0c:	490a      	ldr	r1, [pc, #40]	; (8000a38 <main+0xb4>)
 8000a0e:	480b      	ldr	r0, [pc, #44]	; (8000a3c <main+0xb8>)
 8000a10:	f005 f9c8 	bl	8005da4 <xTaskCreate>

  vTaskStartScheduler();
 8000a14:	f005 fb0c 	bl	8006030 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <main+0x94>
 8000a1a:	bf00      	nop
 8000a1c:	20012e10 	.word	0x20012e10
 8000a20:	20012e14 	.word	0x20012e14
 8000a24:	20012e18 	.word	0x20012e18
 8000a28:	20000014 	.word	0x20000014
 8000a2c:	08009234 	.word	0x08009234
 8000a30:	08009248 	.word	0x08009248
 8000a34:	20000094 	.word	0x20000094
 8000a38:	0800928c 	.word	0x0800928c
 8000a3c:	08000b85 	.word	0x08000b85

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 f95a 	bl	8007d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <SystemClock_Config+0xb4>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <SystemClock_Config+0xb4>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <SystemClock_Config+0xb4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <SystemClock_Config+0xb8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1b      	ldr	r2, [pc, #108]	; (8000af8 <SystemClock_Config+0xb8>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <SystemClock_Config+0xb8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f81b 	bl	8001aec <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000abc:	f000 fb6e 	bl	800119c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fa7e 	bl	8001fdc <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ae6:	f000 fb59 	bl	800119c <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3750      	adds	r7, #80	; 0x50
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <MX_UART4_Init+0x50>)
 8000b04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b20:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b22:	220c      	movs	r2, #12
 8000b24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_UART4_Init+0x4c>)
 8000b34:	f001 ff02 	bl	800293c <HAL_UART_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000b3e:	f000 fb2d 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20012e1c 	.word	0x20012e1c
 8000b4c:	40004c00 	.word	0x40004c00

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_GPIO_Init+0x30>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <MX_GPIO_Init+0x30>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_GPIO_Init+0x30>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <hashmap_test>:

	}
}


void  hashmap_test(void *pvParameters) {
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b0a7      	sub	sp, #156	; 0x9c
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	6078      	str	r0, [r7, #4]
//	debug("[TmHeap] New a TmHeap with size 4 and growth rate 4");
//    TmHeap_print(heap);

	while (1) {

		printf("\r\n");
 8000b8c:	4848      	ldr	r0, [pc, #288]	; (8000cb0 <hashmap_test+0x12c>)
 8000b8e:	f007 fcd9 	bl	8008544 <puts>
        __asm volatile
 8000b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b96:	f383 8811 	msr	BASEPRI, r3
 8000b9a:	f3bf 8f6f 	isb	sy
 8000b9e:	f3bf 8f4f 	dsb	sy
 8000ba2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    }
 8000ba6:	bf00      	nop
		debug("[hashmap] map task");
 8000ba8:	4b42      	ldr	r3, [pc, #264]	; (8000cb4 <hashmap_test+0x130>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68d8      	ldr	r0, [r3, #12]
 8000bae:	f240 2369 	movw	r3, #617	; 0x269
 8000bb2:	4a41      	ldr	r2, [pc, #260]	; (8000cb8 <hashmap_test+0x134>)
 8000bb4:	4941      	ldr	r1, [pc, #260]	; (8000cbc <hashmap_test+0x138>)
 8000bb6:	f006 ffe1 	bl	8007b7c <fiprintf>
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __asm volatile
 8000bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000bc4:	f383 8811 	msr	BASEPRI, r3
    }
 8000bc8:	bf00      	nop
		TmHeap_print(heap);
 8000bca:	4b3d      	ldr	r3, [pc, #244]	; (8000cc0 <hashmap_test+0x13c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fdc8 	bl	8003764 <TmHeap_print>

		// map new
		Object* map = Map_new(heap);
 8000bd4:	4b3a      	ldr	r3, [pc, #232]	; (8000cc0 <hashmap_test+0x13c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 f95d 	bl	8004e98 <Map_new>
 8000bde:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		if (!map) continue;
 8000be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 82ac 	beq.w	8001144 <hashmap_test+0x5c0>
		mu_assert(map->type == MapType, "failed creating map");
 8000bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bf0:	791b      	ldrb	r3, [r3, #4]
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d02b      	beq.n	8000c4e <hashmap_test+0xca>
        __asm volatile
 8000bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfa:	f383 8811 	msr	BASEPRI, r3
 8000bfe:	f3bf 8f6f 	isb	sy
 8000c02:	f3bf 8f4f 	dsb	sy
 8000c06:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
 8000c08:	bf00      	nop
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <hashmap_test+0x130>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	68dc      	ldr	r4, [r3, #12]
 8000c10:	f006 ff9a 	bl	8007b48 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d008      	beq.n	8000c2e <hashmap_test+0xaa>
 8000c1c:	f006 ff94 	bl	8007b48 <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f007 feb1 	bl	800898c <strerror>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	e000      	b.n	8000c30 <hashmap_test+0xac>
 8000c2e:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <hashmap_test+0x140>)
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	f240 236f 	movw	r3, #623	; 0x26f
 8000c36:	4a20      	ldr	r2, [pc, #128]	; (8000cb8 <hashmap_test+0x134>)
 8000c38:	4923      	ldr	r1, [pc, #140]	; (8000cc8 <hashmap_test+0x144>)
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f006 ff9e 	bl	8007b7c <fiprintf>
 8000c40:	2300      	movs	r3, #0
 8000c42:	67bb      	str	r3, [r7, #120]	; 0x78
        __asm volatile
 8000c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c46:	f383 8811 	msr	BASEPRI, r3
    }
 8000c4a:	bf00      	nop
 8000c4c:	e27c      	b.n	8001148 <hashmap_test+0x5c4>
		mu_assert(OBJ2HASH(map), "failed assigning hash to map");
 8000c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d13b      	bne.n	8000cd0 <hashmap_test+0x14c>
        __asm volatile
 8000c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c5c:	f383 8811 	msr	BASEPRI, r3
 8000c60:	f3bf 8f6f 	isb	sy
 8000c64:	f3bf 8f4f 	dsb	sy
 8000c68:	677b      	str	r3, [r7, #116]	; 0x74
    }
 8000c6a:	bf00      	nop
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <hashmap_test+0x130>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68dc      	ldr	r4, [r3, #12]
 8000c72:	f006 ff69 	bl	8007b48 <__errno>
 8000c76:	4603      	mov	r3, r0
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d008      	beq.n	8000c90 <hashmap_test+0x10c>
 8000c7e:	f006 ff63 	bl	8007b48 <__errno>
 8000c82:	4603      	mov	r3, r0
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4618      	mov	r0, r3
 8000c88:	f007 fe80 	bl	800898c <strerror>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	e000      	b.n	8000c92 <hashmap_test+0x10e>
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <hashmap_test+0x140>)
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	f44f 731c 	mov.w	r3, #624	; 0x270
 8000c98:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <hashmap_test+0x134>)
 8000c9a:	490c      	ldr	r1, [pc, #48]	; (8000ccc <hashmap_test+0x148>)
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f006 ff6d 	bl	8007b7c <fiprintf>
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	673b      	str	r3, [r7, #112]	; 0x70
        __asm volatile
 8000ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ca8:	f383 8811 	msr	BASEPRI, r3
    }
 8000cac:	bf00      	nop
 8000cae:	e24b      	b.n	8001148 <hashmap_test+0x5c4>
 8000cb0:	0800a120 	.word	0x0800a120
 8000cb4:	20000014 	.word	0x20000014
 8000cb8:	08009234 	.word	0x08009234
 8000cbc:	0800a36c 	.word	0x0800a36c
 8000cc0:	20012e18 	.word	0x20012e18
 8000cc4:	08009140 	.word	0x08009140
 8000cc8:	0800a390 	.word	0x0800a390
 8000ccc:	0800a3c4 	.word	0x0800a3c4
        __asm volatile
 8000cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cd4:	f383 8811 	msr	BASEPRI, r3
 8000cd8:	f3bf 8f6f 	isb	sy
 8000cdc:	f3bf 8f4f 	dsb	sy
 8000ce0:	663b      	str	r3, [r7, #96]	; 0x60
    }
 8000ce2:	bf00      	nop
		debug("[hashmap] create a hashmap Object");
 8000ce4:	4bb9      	ldr	r3, [pc, #740]	; (8000fcc <hashmap_test+0x448>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	68d8      	ldr	r0, [r3, #12]
 8000cea:	f240 2371 	movw	r3, #625	; 0x271
 8000cee:	4ab8      	ldr	r2, [pc, #736]	; (8000fd0 <hashmap_test+0x44c>)
 8000cf0:	49b8      	ldr	r1, [pc, #736]	; (8000fd4 <hashmap_test+0x450>)
 8000cf2:	f006 ff43 	bl	8007b7c <fiprintf>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	667b      	str	r3, [r7, #100]	; 0x64
        __asm volatile
 8000cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000cfc:	f383 8811 	msr	BASEPRI, r3
    }
 8000d00:	bf00      	nop
		Object_make_root(map, state);
 8000d02:	4bb5      	ldr	r3, [pc, #724]	; (8000fd8 <hashmap_test+0x454>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d0c:	f004 f8f6 	bl	8004efc <Object_make_root>
        __asm volatile
 8000d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d14:	f383 8811 	msr	BASEPRI, r3
 8000d18:	f3bf 8f6f 	isb	sy
 8000d1c:	f3bf 8f4f 	dsb	sy
 8000d20:	66bb      	str	r3, [r7, #104]	; 0x68
    }
 8000d22:	bf00      	nop
		debug("[hashmap]  Make the hashmap be a root");
 8000d24:	4ba9      	ldr	r3, [pc, #676]	; (8000fcc <hashmap_test+0x448>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68d8      	ldr	r0, [r3, #12]
 8000d2a:	f240 2373 	movw	r3, #627	; 0x273
 8000d2e:	4aa8      	ldr	r2, [pc, #672]	; (8000fd0 <hashmap_test+0x44c>)
 8000d30:	49aa      	ldr	r1, [pc, #680]	; (8000fdc <hashmap_test+0x458>)
 8000d32:	f006 ff23 	bl	8007b7c <fiprintf>
 8000d36:	2300      	movs	r3, #0
 8000d38:	66fb      	str	r3, [r7, #108]	; 0x6c
        __asm volatile
 8000d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d3c:	f383 8811 	msr	BASEPRI, r3
    }
 8000d40:	bf00      	nop
		TmHeap_print(heap);
 8000d42:	4ba7      	ldr	r3, [pc, #668]	; (8000fe0 <hashmap_test+0x45c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f002 fd0c 	bl	8003764 <TmHeap_print>
		// set and get
		char* result;
		if( gc_Hashmap_set(heap, map, "test data 1", "THE OBJECT 1") == 0) {
 8000d4c:	4ba4      	ldr	r3, [pc, #656]	; (8000fe0 <hashmap_test+0x45c>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	4ba4      	ldr	r3, [pc, #656]	; (8000fe4 <hashmap_test+0x460>)
 8000d52:	4aa5      	ldr	r2, [pc, #660]	; (8000fe8 <hashmap_test+0x464>)
 8000d54:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000d58:	f003 fb46 	bl	80043e8 <gc_Hashmap_set>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d124      	bne.n	8000dac <hashmap_test+0x228>
        __asm volatile
 8000d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d66:	f383 8811 	msr	BASEPRI, r3
 8000d6a:	f3bf 8f6f 	isb	sy
 8000d6e:	f3bf 8f4f 	dsb	sy
 8000d72:	65bb      	str	r3, [r7, #88]	; 0x58
    }
 8000d74:	bf00      	nop
			debug("[hashmap] map set 1");
 8000d76:	4b95      	ldr	r3, [pc, #596]	; (8000fcc <hashmap_test+0x448>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	68d8      	ldr	r0, [r3, #12]
 8000d7c:	f44f 731e 	mov.w	r3, #632	; 0x278
 8000d80:	4a93      	ldr	r2, [pc, #588]	; (8000fd0 <hashmap_test+0x44c>)
 8000d82:	499a      	ldr	r1, [pc, #616]	; (8000fec <hashmap_test+0x468>)
 8000d84:	f006 fefa 	bl	8007b7c <fiprintf>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
        __asm volatile
 8000d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8e:	f383 8811 	msr	BASEPRI, r3
    }
 8000d92:	bf00      	nop
			result = gc_Hashmap_get(map, "test data 1");
 8000d94:	4994      	ldr	r1, [pc, #592]	; (8000fe8 <hashmap_test+0x464>)
 8000d96:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000d9a:	f003 fc6d 	bl	8004678 <gc_Hashmap_get>
 8000d9e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
//			printf("The data of key 'test data 1' is '%s'\r\n", result);
			TmHeap_print(heap);
 8000da2:	4b8f      	ldr	r3, [pc, #572]	; (8000fe0 <hashmap_test+0x45c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fcdc 	bl	8003764 <TmHeap_print>
		}
		if( gc_Hashmap_set(heap, map, "test data 2", "THE OBJECT 2") == 0) { // flip
 8000dac:	4b8c      	ldr	r3, [pc, #560]	; (8000fe0 <hashmap_test+0x45c>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	4b8f      	ldr	r3, [pc, #572]	; (8000ff0 <hashmap_test+0x46c>)
 8000db2:	4a90      	ldr	r2, [pc, #576]	; (8000ff4 <hashmap_test+0x470>)
 8000db4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000db8:	f003 fb16 	bl	80043e8 <gc_Hashmap_set>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d124      	bne.n	8000e0c <hashmap_test+0x288>
        __asm volatile
 8000dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc6:	f383 8811 	msr	BASEPRI, r3
 8000dca:	f3bf 8f6f 	isb	sy
 8000dce:	f3bf 8f4f 	dsb	sy
 8000dd2:	653b      	str	r3, [r7, #80]	; 0x50
    }
 8000dd4:	bf00      	nop
			debug("[hashmap] map set 2");//stop
 8000dd6:	4b7d      	ldr	r3, [pc, #500]	; (8000fcc <hashmap_test+0x448>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	68d8      	ldr	r0, [r3, #12]
 8000ddc:	f240 237e 	movw	r3, #638	; 0x27e
 8000de0:	4a7b      	ldr	r2, [pc, #492]	; (8000fd0 <hashmap_test+0x44c>)
 8000de2:	4985      	ldr	r1, [pc, #532]	; (8000ff8 <hashmap_test+0x474>)
 8000de4:	f006 feca 	bl	8007b7c <fiprintf>
 8000de8:	2300      	movs	r3, #0
 8000dea:	657b      	str	r3, [r7, #84]	; 0x54
        __asm volatile
 8000dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dee:	f383 8811 	msr	BASEPRI, r3
    }
 8000df2:	bf00      	nop
			result = gc_Hashmap_get(map, "test data 2");
 8000df4:	497f      	ldr	r1, [pc, #508]	; (8000ff4 <hashmap_test+0x470>)
 8000df6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000dfa:	f003 fc3d 	bl	8004678 <gc_Hashmap_get>
 8000dfe:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
//			printf("The data of key 'test data 2' is '%s'\r\n", result);
			TmHeap_print(heap);
 8000e02:	4b77      	ldr	r3, [pc, #476]	; (8000fe0 <hashmap_test+0x45c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fcac 	bl	8003764 <TmHeap_print>
		}
		if( gc_Hashmap_set(heap, map, "test data 3", "THE OBJECT 3") == 0) {
 8000e0c:	4b74      	ldr	r3, [pc, #464]	; (8000fe0 <hashmap_test+0x45c>)
 8000e0e:	6818      	ldr	r0, [r3, #0]
 8000e10:	4b7a      	ldr	r3, [pc, #488]	; (8000ffc <hashmap_test+0x478>)
 8000e12:	4a7b      	ldr	r2, [pc, #492]	; (8001000 <hashmap_test+0x47c>)
 8000e14:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000e18:	f003 fae6 	bl	80043e8 <gc_Hashmap_set>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d124      	bne.n	8000e6c <hashmap_test+0x2e8>
        __asm volatile
 8000e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e26:	f383 8811 	msr	BASEPRI, r3
 8000e2a:	f3bf 8f6f 	isb	sy
 8000e2e:	f3bf 8f4f 	dsb	sy
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
    }
 8000e34:	bf00      	nop
			debug("[hashmap] map set 3");
 8000e36:	4b65      	ldr	r3, [pc, #404]	; (8000fcc <hashmap_test+0x448>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68d8      	ldr	r0, [r3, #12]
 8000e3c:	f44f 7321 	mov.w	r3, #644	; 0x284
 8000e40:	4a63      	ldr	r2, [pc, #396]	; (8000fd0 <hashmap_test+0x44c>)
 8000e42:	4970      	ldr	r1, [pc, #448]	; (8001004 <hashmap_test+0x480>)
 8000e44:	f006 fe9a 	bl	8007b7c <fiprintf>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
        __asm volatile
 8000e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e4e:	f383 8811 	msr	BASEPRI, r3
    }
 8000e52:	bf00      	nop
			result = gc_Hashmap_get(map, "test data 3");
 8000e54:	496a      	ldr	r1, [pc, #424]	; (8001000 <hashmap_test+0x47c>)
 8000e56:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000e5a:	f003 fc0d 	bl	8004678 <gc_Hashmap_get>
 8000e5e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
//			printf("The data of key 'test data 3' is '%s'\r\n", result);
			TmHeap_print(heap);
 8000e62:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <hashmap_test+0x45c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f002 fc7c 	bl	8003764 <TmHeap_print>
		}
		if( gc_Hashmap_set(heap, map, "test data 4", "THE OBJECT 4") == 0) {
 8000e6c:	4b5c      	ldr	r3, [pc, #368]	; (8000fe0 <hashmap_test+0x45c>)
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	4b65      	ldr	r3, [pc, #404]	; (8001008 <hashmap_test+0x484>)
 8000e72:	4a66      	ldr	r2, [pc, #408]	; (800100c <hashmap_test+0x488>)
 8000e74:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8000e78:	f003 fab6 	bl	80043e8 <gc_Hashmap_set>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d124      	bne.n	8000ecc <hashmap_test+0x348>
        __asm volatile
 8000e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e86:	f383 8811 	msr	BASEPRI, r3
 8000e8a:	f3bf 8f6f 	isb	sy
 8000e8e:	f3bf 8f4f 	dsb	sy
 8000e92:	643b      	str	r3, [r7, #64]	; 0x40
    }
 8000e94:	bf00      	nop
			debug("[hashmap] map set 4");
 8000e96:	4b4d      	ldr	r3, [pc, #308]	; (8000fcc <hashmap_test+0x448>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	68d8      	ldr	r0, [r3, #12]
 8000e9c:	f240 238a 	movw	r3, #650	; 0x28a
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	; (8000fd0 <hashmap_test+0x44c>)
 8000ea2:	495b      	ldr	r1, [pc, #364]	; (8001010 <hashmap_test+0x48c>)
 8000ea4:	f006 fe6a 	bl	8007b7c <fiprintf>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
        __asm volatile
 8000eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eae:	f383 8811 	msr	BASEPRI, r3
    }
 8000eb2:	bf00      	nop
			result = gc_Hashmap_get(map, "test data 4");
 8000eb4:	4955      	ldr	r1, [pc, #340]	; (800100c <hashmap_test+0x488>)
 8000eb6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000eba:	f003 fbdd 	bl	8004678 <gc_Hashmap_get>
 8000ebe:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
//			printf("The data of key 'test data 4' is '%s'\r\n", result);
			TmHeap_print(heap);
 8000ec2:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <hashmap_test+0x45c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fc4c 	bl	8003764 <TmHeap_print>
		}
		// delete
		gc_Hashmap_delete(map, "test data 1");
 8000ecc:	4946      	ldr	r1, [pc, #280]	; (8000fe8 <hashmap_test+0x464>)
 8000ece:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000ed2:	f003 fc3f 	bl	8004754 <gc_Hashmap_delete>
		result = gc_Hashmap_get(map, "test data 1");
 8000ed6:	4944      	ldr	r1, [pc, #272]	; (8000fe8 <hashmap_test+0x464>)
 8000ed8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000edc:	f003 fbcc 	bl	8004678 <gc_Hashmap_get>
 8000ee0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        __asm volatile
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	60bb      	str	r3, [r7, #8]
    }
 8000ef6:	bf00      	nop
		debug("[hashmap] map delete 1");
 8000ef8:	4b34      	ldr	r3, [pc, #208]	; (8000fcc <hashmap_test+0x448>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68d8      	ldr	r0, [r3, #12]
 8000efe:	f240 2392 	movw	r3, #658	; 0x292
 8000f02:	4a33      	ldr	r2, [pc, #204]	; (8000fd0 <hashmap_test+0x44c>)
 8000f04:	4943      	ldr	r1, [pc, #268]	; (8001014 <hashmap_test+0x490>)
 8000f06:	f006 fe39 	bl	8007b7c <fiprintf>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f383 8811 	msr	BASEPRI, r3
    }
 8000f14:	bf00      	nop
		TmHeap_print(heap);
 8000f16:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <hashmap_test+0x45c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fc22 	bl	8003764 <TmHeap_print>

		gc_Hashmap_delete(map, "test data 2");
 8000f20:	4934      	ldr	r1, [pc, #208]	; (8000ff4 <hashmap_test+0x470>)
 8000f22:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f26:	f003 fc15 	bl	8004754 <gc_Hashmap_delete>
		result = gc_Hashmap_get(map, "test data 2");
 8000f2a:	4932      	ldr	r1, [pc, #200]	; (8000ff4 <hashmap_test+0x470>)
 8000f2c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f30:	f003 fba2 	bl	8004678 <gc_Hashmap_get>
 8000f34:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        __asm volatile
 8000f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3c:	f383 8811 	msr	BASEPRI, r3
 8000f40:	f3bf 8f6f 	isb	sy
 8000f44:	f3bf 8f4f 	dsb	sy
 8000f48:	613b      	str	r3, [r7, #16]
    }
 8000f4a:	bf00      	nop
		debug("[hashmap] map delete 2");
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <hashmap_test+0x448>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68d8      	ldr	r0, [r3, #12]
 8000f52:	f240 2397 	movw	r3, #663	; 0x297
 8000f56:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <hashmap_test+0x44c>)
 8000f58:	492f      	ldr	r1, [pc, #188]	; (8001018 <hashmap_test+0x494>)
 8000f5a:	f006 fe0f 	bl	8007b7c <fiprintf>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
        __asm volatile
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f383 8811 	msr	BASEPRI, r3
    }
 8000f68:	bf00      	nop
		TmHeap_print(heap);
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <hashmap_test+0x45c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 fbf8 	bl	8003764 <TmHeap_print>

		gc_Hashmap_delete(map, "test data 3");
 8000f74:	4922      	ldr	r1, [pc, #136]	; (8001000 <hashmap_test+0x47c>)
 8000f76:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f7a:	f003 fbeb 	bl	8004754 <gc_Hashmap_delete>
		result = gc_Hashmap_get(map, "test data 3");
 8000f7e:	4920      	ldr	r1, [pc, #128]	; (8001000 <hashmap_test+0x47c>)
 8000f80:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000f84:	f003 fb78 	bl	8004678 <gc_Hashmap_get>
 8000f88:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        __asm volatile
 8000f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f90:	f383 8811 	msr	BASEPRI, r3
 8000f94:	f3bf 8f6f 	isb	sy
 8000f98:	f3bf 8f4f 	dsb	sy
 8000f9c:	61bb      	str	r3, [r7, #24]
    }
 8000f9e:	bf00      	nop
		debug("[hashmap] map delete 3");
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <hashmap_test+0x448>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	68d8      	ldr	r0, [r3, #12]
 8000fa6:	f44f 7327 	mov.w	r3, #668	; 0x29c
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <hashmap_test+0x44c>)
 8000fac:	491b      	ldr	r1, [pc, #108]	; (800101c <hashmap_test+0x498>)
 8000fae:	f006 fde5 	bl	8007b7c <fiprintf>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
        __asm volatile
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	f383 8811 	msr	BASEPRI, r3
    }
 8000fbc:	bf00      	nop
		TmHeap_print(heap);
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <hashmap_test+0x45c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fbce 	bl	8003764 <TmHeap_print>
 8000fc8:	e02a      	b.n	8001020 <hashmap_test+0x49c>
 8000fca:	bf00      	nop
 8000fcc:	20000014 	.word	0x20000014
 8000fd0:	08009234 	.word	0x08009234
 8000fd4:	0800a400 	.word	0x0800a400
 8000fd8:	20012e14 	.word	0x20012e14
 8000fdc:	0800a434 	.word	0x0800a434
 8000fe0:	20012e18 	.word	0x20012e18
 8000fe4:	0800a46c 	.word	0x0800a46c
 8000fe8:	0800a47c 	.word	0x0800a47c
 8000fec:	0800a488 	.word	0x0800a488
 8000ff0:	0800a4ac 	.word	0x0800a4ac
 8000ff4:	0800a4bc 	.word	0x0800a4bc
 8000ff8:	0800a4c8 	.word	0x0800a4c8
 8000ffc:	0800a4ec 	.word	0x0800a4ec
 8001000:	0800a4fc 	.word	0x0800a4fc
 8001004:	0800a508 	.word	0x0800a508
 8001008:	0800a52c 	.word	0x0800a52c
 800100c:	0800a53c 	.word	0x0800a53c
 8001010:	0800a548 	.word	0x0800a548
 8001014:	0800a56c 	.word	0x0800a56c
 8001018:	0800a594 	.word	0x0800a594
 800101c:	0800a5bc 	.word	0x0800a5bc

		gc_Hashmap_delete(map, "test data 4");
 8001020:	494b      	ldr	r1, [pc, #300]	; (8001150 <hashmap_test+0x5cc>)
 8001022:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001026:	f003 fb95 	bl	8004754 <gc_Hashmap_delete>
		result = gc_Hashmap_get(map, "test data 4");
 800102a:	4949      	ldr	r1, [pc, #292]	; (8001150 <hashmap_test+0x5cc>)
 800102c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001030:	f003 fb22 	bl	8004678 <gc_Hashmap_get>
 8001034:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
        __asm volatile
 8001038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103c:	f383 8811 	msr	BASEPRI, r3
 8001040:	f3bf 8f6f 	isb	sy
 8001044:	f3bf 8f4f 	dsb	sy
 8001048:	623b      	str	r3, [r7, #32]
    }
 800104a:	bf00      	nop
		debug("[hashmap] map delete 4");
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <hashmap_test+0x5d0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68d8      	ldr	r0, [r3, #12]
 8001052:	f240 23a1 	movw	r3, #673	; 0x2a1
 8001056:	4a40      	ldr	r2, [pc, #256]	; (8001158 <hashmap_test+0x5d4>)
 8001058:	4940      	ldr	r1, [pc, #256]	; (800115c <hashmap_test+0x5d8>)
 800105a:	f006 fd8f 	bl	8007b7c <fiprintf>
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	f383 8811 	msr	BASEPRI, r3
    }
 8001068:	bf00      	nop
		TmHeap_print(heap);
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <hashmap_test+0x5dc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f002 fb78 	bl	8003764 <TmHeap_print>

		String_new(heap, "String A");
 8001074:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <hashmap_test+0x5dc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	493a      	ldr	r1, [pc, #232]	; (8001164 <hashmap_test+0x5e0>)
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fef6 	bl	8004e6c <String_new>
        __asm volatile
 8001080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001084:	f383 8811 	msr	BASEPRI, r3
 8001088:	f3bf 8f6f 	isb	sy
 800108c:	f3bf 8f4f 	dsb	sy
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001092:	bf00      	nop
		debug("[TmHeap] Allocate a String Object in TmHeap");
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <hashmap_test+0x5d0>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68d8      	ldr	r0, [r3, #12]
 800109a:	f240 23a5 	movw	r3, #677	; 0x2a5
 800109e:	4a2e      	ldr	r2, [pc, #184]	; (8001158 <hashmap_test+0x5d4>)
 80010a0:	4931      	ldr	r1, [pc, #196]	; (8001168 <hashmap_test+0x5e4>)
 80010a2:	f006 fd6b 	bl	8007b7c <fiprintf>
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        __asm volatile
 80010aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ac:	f383 8811 	msr	BASEPRI, r3
    }
 80010b0:	bf00      	nop
		TmHeap_print(heap);
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <hashmap_test+0x5dc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f002 fb54 	bl	8003764 <TmHeap_print>

		String_new(heap, "String B");
 80010bc:	4b28      	ldr	r3, [pc, #160]	; (8001160 <hashmap_test+0x5dc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	492a      	ldr	r1, [pc, #168]	; (800116c <hashmap_test+0x5e8>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 fed2 	bl	8004e6c <String_new>
        __asm volatile
 80010c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010cc:	f383 8811 	msr	BASEPRI, r3
 80010d0:	f3bf 8f6f 	isb	sy
 80010d4:	f3bf 8f4f 	dsb	sy
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
    }
 80010da:	bf00      	nop
		debug("[TmHeap] Allocate a String Object in TmHeap");
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <hashmap_test+0x5d0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68d8      	ldr	r0, [r3, #12]
 80010e2:	f240 23a9 	movw	r3, #681	; 0x2a9
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <hashmap_test+0x5d4>)
 80010e8:	491f      	ldr	r1, [pc, #124]	; (8001168 <hashmap_test+0x5e4>)
 80010ea:	f006 fd47 	bl	8007b7c <fiprintf>
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
        __asm volatile
 80010f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f4:	f383 8811 	msr	BASEPRI, r3
    }
 80010f8:	bf00      	nop
		TmHeap_print(heap);
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <hashmap_test+0x5dc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fb30 	bl	8003764 <TmHeap_print>

		Object_delete_root(map, state);
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <hashmap_test+0x5ec>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800110e:	f003 ffbb 	bl	8005088 <Object_delete_root>
        __asm volatile
 8001112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001116:	f383 8811 	msr	BASEPRI, r3
 800111a:	f3bf 8f6f 	isb	sy
 800111e:	f3bf 8f4f 	dsb	sy
 8001122:	63bb      	str	r3, [r7, #56]	; 0x38
    }
 8001124:	bf00      	nop
		debug("[hashmap] delete map from rootset");
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <hashmap_test+0x5d0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68d8      	ldr	r0, [r3, #12]
 800112c:	f240 23ad 	movw	r3, #685	; 0x2ad
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <hashmap_test+0x5d4>)
 8001132:	4910      	ldr	r1, [pc, #64]	; (8001174 <hashmap_test+0x5f0>)
 8001134:	f006 fd22 	bl	8007b7c <fiprintf>
 8001138:	2300      	movs	r3, #0
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
        __asm volatile
 800113c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800113e:	f383 8811 	msr	BASEPRI, r3
    }
 8001142:	e000      	b.n	8001146 <hashmap_test+0x5c2>
		if (!map) continue;
 8001144:	bf00      	nop
	while (1) {
 8001146:	e521      	b.n	8000b8c <hashmap_test+0x8>

	}
}
 8001148:	3794      	adds	r7, #148	; 0x94
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	bf00      	nop
 8001150:	0800a53c 	.word	0x0800a53c
 8001154:	20000014 	.word	0x20000014
 8001158:	08009234 	.word	0x08009234
 800115c:	0800a5e4 	.word	0x0800a5e4
 8001160:	20012e18 	.word	0x20012e18
 8001164:	0800a60c 	.word	0x0800a60c
 8001168:	0800a618 	.word	0x0800a618
 800116c:	0800a654 	.word	0x0800a654
 8001170:	20012e14 	.word	0x20012e14
 8001174:	0800a660 	.word	0x0800a660

08001178 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800118a:	f000 fa11 	bl	80015b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40001400 	.word	0x40001400

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a19      	ldr	r2, [pc, #100]	; (800127c <HAL_UART_MspInit+0x84>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d12b      	bne.n	8001272 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_UART_MspInit+0x88>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_UART_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a10      	ldr	r2, [pc, #64]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_UART_MspInit+0x88>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001252:	2303      	movs	r3, #3
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800125a:	2301      	movs	r3, #1
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001262:	2308      	movs	r3, #8
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_UART_MspInit+0x8c>)
 800126e:	f000 faa1 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001272:	bf00      	nop
 8001274:	3728      	adds	r7, #40	; 0x28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004c00 	.word	0x40004c00
 8001280:	40023800 	.word	0x40023800
 8001284:	40020000 	.word	0x40020000

08001288 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	2037      	movs	r0, #55	; 0x37
 800129e:	f000 fa5f 	bl	8001760 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012a2:	2037      	movs	r0, #55	; 0x37
 80012a4:	f000 fa78 	bl	8001798 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_InitTick+0xa0>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <HAL_InitTick+0xa0>)
 80012b2:	f043 0320 	orr.w	r3, r3, #32
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_InitTick+0xa0>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 0320 	and.w	r3, r3, #32
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012c4:	f107 0210 	add.w	r2, r7, #16
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 f854 	bl	800237c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012d4:	f001 f82a 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 80012d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_InitTick+0xa4>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9b      	lsrs	r3, r3, #18
 80012e4:	3b01      	subs	r3, #1
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_InitTick+0xa8>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <HAL_InitTick+0xac>)
 80012ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_InitTick+0xa8>)
 80012f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_InitTick+0xa8>)
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_InitTick+0xa8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_InitTick+0xa8>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <HAL_InitTick+0xa8>)
 800130a:	f001 f869 	bl	80023e0 <HAL_TIM_Base_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d104      	bne.n	800131e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <HAL_InitTick+0xa8>)
 8001316:	f001 f8bd 	bl	8002494 <HAL_TIM_Base_Start_IT>
 800131a:	4603      	mov	r3, r0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3730      	adds	r7, #48	; 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40023800 	.word	0x40023800
 800132c:	431bde83 	.word	0x431bde83
 8001330:	20012e60 	.word	0x20012e60
 8001334:	40001400 	.word	0x40001400

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <TIM7_IRQHandler+0x10>)
 800136a:	f001 f903 	bl	8002574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20012e60 	.word	0x20012e60

08001378 <_kill>:
{
	return 1;
}

int _kill(int pid, int sig)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001382:	f006 fbe1 	bl	8007b48 <__errno>
 8001386:	4603      	mov	r3, r0
 8001388:	2216      	movs	r2, #22
 800138a:	601a      	str	r2, [r3, #0]
	return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_exit>:

void _exit (int status)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffe7 	bl	8001378 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013aa:	e7fe      	b.n	80013aa <_exit+0x12>

080013ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e00a      	b.n	80013d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013be:	f3af 8000 	nop.w
 80013c2:	4601      	mov	r1, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbf0      	blt.n	80013be <_read+0x12>
	}

return len;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e009      	b.n	800140c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60ba      	str	r2, [r7, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff faad 	bl	8000960 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf1      	blt.n	80013f8 <_write+0x12>
	}
	return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_close>:

int _close(int file)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	return -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001446:	605a      	str	r2, [r3, #4]
	return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_isatty>:

int _isatty(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f006 fb46 	bl	8007b48 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20020000 	.word	0x20020000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	20000098 	.word	0x20000098
 80014f0:	20012f00 	.word	0x20012f00

080014f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <SystemInit+0x20>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <SystemInit+0x20>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001550 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800151e:	490e      	ldr	r1, [pc, #56]	; (8001558 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001534:	4c0b      	ldr	r4, [pc, #44]	; (8001564 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001542:	f7ff ffd7 	bl	80014f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001546:	f006 fb99 	bl	8007c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154a:	f7ff fa1b 	bl	8000984 <main>
  bx  lr    
 800154e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001558:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800155c:	0800b5d4 	.word	0x0800b5d4
  ldr r2, =_sbss
 8001560:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001564:	20012efc 	.word	0x20012efc

08001568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001568:	e7fe      	b.n	8001568 <ADC_IRQHandler>
	...

0800156c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <HAL_Init+0x40>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_Init+0x40>)
 8001582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_Init+0x40>)
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001594:	2003      	movs	r0, #3
 8001596:	f000 f8d8 	bl	800174a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fe74 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a0:	f7ff fe02 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023c00 	.word	0x40023c00

080015b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x20>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x24>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_IncTick+0x24>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	20000008 	.word	0x20000008
 80015d4:	20012ea8 	.word	0x20012ea8

080015d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return uwTick;
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <HAL_GetTick+0x14>)
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20012ea8 	.word	0x20012ea8

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff4c 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001772:	f7ff ff61 	bl	8001638 <__NVIC_GetPriorityGrouping>
 8001776:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	6978      	ldr	r0, [r7, #20]
 800177e:	f7ff ffb1 	bl	80016e4 <NVIC_EncodePriority>
 8001782:	4602      	mov	r2, r0
 8001784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff80 	bl	8001690 <__NVIC_SetPriority>
}
 8001790:	bf00      	nop
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff54 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	e16b      	b.n	8001aa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	f040 815a 	bne.w	8001aa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d005      	beq.n	8001806 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001802:	2b02      	cmp	r3, #2
 8001804:	d130      	bne.n	8001868 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	2203      	movs	r2, #3
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	68da      	ldr	r2, [r3, #12]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b03      	cmp	r3, #3
 8001872:	d017      	beq.n	80018a4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d123      	bne.n	80018f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	08da      	lsrs	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3208      	adds	r2, #8
 80018b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	69b9      	ldr	r1, [r7, #24]
 80018f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0203 	and.w	r2, r3, #3
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80b4 	beq.w	8001aa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <HAL_GPIO_Init+0x30c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_GPIO_Init+0x30c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001956:	4a5b      	ldr	r2, [pc, #364]	; (8001ac4 <HAL_GPIO_Init+0x310>)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_GPIO_Init+0x314>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02b      	beq.n	80019da <HAL_GPIO_Init+0x226>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a51      	ldr	r2, [pc, #324]	; (8001acc <HAL_GPIO_Init+0x318>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d025      	beq.n	80019d6 <HAL_GPIO_Init+0x222>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a50      	ldr	r2, [pc, #320]	; (8001ad0 <HAL_GPIO_Init+0x31c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01f      	beq.n	80019d2 <HAL_GPIO_Init+0x21e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4f      	ldr	r2, [pc, #316]	; (8001ad4 <HAL_GPIO_Init+0x320>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d019      	beq.n	80019ce <HAL_GPIO_Init+0x21a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4e      	ldr	r2, [pc, #312]	; (8001ad8 <HAL_GPIO_Init+0x324>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d013      	beq.n	80019ca <HAL_GPIO_Init+0x216>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <HAL_GPIO_Init+0x328>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00d      	beq.n	80019c6 <HAL_GPIO_Init+0x212>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4c      	ldr	r2, [pc, #304]	; (8001ae0 <HAL_GPIO_Init+0x32c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <HAL_GPIO_Init+0x20e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <HAL_GPIO_Init+0x330>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <HAL_GPIO_Init+0x20a>
 80019ba:	2307      	movs	r3, #7
 80019bc:	e00e      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019be:	2308      	movs	r3, #8
 80019c0:	e00c      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c2:	2306      	movs	r3, #6
 80019c4:	e00a      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019c6:	2305      	movs	r3, #5
 80019c8:	e008      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019ce:	2303      	movs	r3, #3
 80019d0:	e004      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d2:	2302      	movs	r3, #2
 80019d4:	e002      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_GPIO_Init+0x228>
 80019da:	2300      	movs	r3, #0
 80019dc:	69fa      	ldr	r2, [r7, #28]
 80019de:	f002 0203 	and.w	r2, r2, #3
 80019e2:	0092      	lsls	r2, r2, #2
 80019e4:	4093      	lsls	r3, r2
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019ec:	4935      	ldr	r1, [pc, #212]	; (8001ac4 <HAL_GPIO_Init+0x310>)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fa:	4b3b      	ldr	r3, [pc, #236]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a1e:	4a32      	ldr	r2, [pc, #200]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a24:	4b30      	ldr	r3, [pc, #192]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a48:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a4e:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <HAL_GPIO_Init+0x334>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b0f      	cmp	r3, #15
 8001aac:	f67f ae90 	bls.w	80017d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40020400 	.word	0x40020400
 8001ad0:	40020800 	.word	0x40020800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40021400 	.word	0x40021400
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40021c00 	.word	0x40021c00
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e264      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d075      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0a:	4ba3      	ldr	r3, [pc, #652]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4ba0      	ldr	r3, [pc, #640]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	4b9d      	ldr	r3, [pc, #628]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b99      	ldr	r3, [pc, #612]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d157      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e23f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x74>
 8001b52:	4b91      	ldr	r3, [pc, #580]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a90      	ldr	r2, [pc, #576]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a8a      	ldr	r2, [pc, #552]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a87      	ldr	r2, [pc, #540]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b84:	4b84      	ldr	r3, [pc, #528]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a83      	ldr	r2, [pc, #524]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b81      	ldr	r3, [pc, #516]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a80      	ldr	r2, [pc, #512]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fd18 	bl	80015d8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fd14 	bl	80015d8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e204      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b76      	ldr	r3, [pc, #472]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fd04 	bl	80015d8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fd00 	bl	80015d8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1f0      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b6c      	ldr	r3, [pc, #432]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xe8>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c02:	4b65      	ldr	r3, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b62      	ldr	r3, [pc, #392]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b5f      	ldr	r3, [pc, #380]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c4      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4952      	ldr	r1, [pc, #328]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_RCC_OscConfig+0x2b0>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fcb9 	bl	80015d8 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fcb5 	bl	80015d8 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a5      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4940      	ldr	r1, [pc, #256]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_OscConfig+0x2b0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fc98 	bl	80015d8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fc94 	bl	80015d8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e184      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d030      	beq.n	8001d38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fc78 	bl	80015d8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fc74 	bl	80015d8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e164      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x200>
 8001d0a:	e015      	b.n	8001d38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fc61 	bl	80015d8 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fc5d 	bl	80015d8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e14d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a0 	beq.w	8001e86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_OscConfig+0x2b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d121      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_RCC_OscConfig+0x2b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_RCC_OscConfig+0x2b8>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fc23 	bl	80015d8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e011      	b.n	8001dba <HAL_RCC_OscConfig+0x2ce>
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	42470000 	.word	0x42470000
 8001da0:	42470e80 	.word	0x42470e80
 8001da4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7ff fc16 	bl	80015d8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e106      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b85      	ldr	r3, [pc, #532]	; (8001fd0 <HAL_RCC_OscConfig+0x4e4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
 8001dce:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	4a80      	ldr	r2, [pc, #512]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dda:	e01c      	b.n	8001e16 <HAL_RCC_OscConfig+0x32a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d10c      	bne.n	8001dfe <HAL_RCC_OscConfig+0x312>
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4a77      	ldr	r2, [pc, #476]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfc:	e00b      	b.n	8001e16 <HAL_RCC_OscConfig+0x32a>
 8001dfe:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a74      	ldr	r2, [pc, #464]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	4a71      	ldr	r2, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d015      	beq.n	8001e4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fbdb 	bl	80015d8 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff fbd7 	bl	80015d8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e0c5      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	4b65      	ldr	r3, [pc, #404]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ee      	beq.n	8001e26 <HAL_RCC_OscConfig+0x33a>
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fbc5 	bl	80015d8 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff fbc1 	bl	80015d8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0af      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ee      	bne.n	8001e52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a55      	ldr	r2, [pc, #340]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 809b 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d05c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d141      	bne.n	8001f28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fb95 	bl	80015d8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff fb91 	bl	80015d8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e081      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec4:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	019b      	lsls	r3, r3, #6
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	061b      	lsls	r3, r3, #24
 8001ef4:	4937      	ldr	r1, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb6a 	bl	80015d8 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff fb66 	bl	80015d8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e056      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x41c>
 8001f26:	e04e      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb53 	bl	80015d8 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fb4f 	bl	80015d8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e03f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x44a>
 8001f54:	e037      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e032      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d028      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d121      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d11a      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f92:	4013      	ands	r3, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d111      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	3b01      	subs	r3, #1
 8001fac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	42470060 	.word	0x42470060

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff fa84 	bl	80015d8 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff fa80 	bl	80015d8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f880 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	0800ae7c 	.word	0x0800ae7c
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b5b0      	push	{r4, r5, r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021ae:	2100      	movs	r1, #0
 80021b0:	6079      	str	r1, [r7, #4]
 80021b2:	2100      	movs	r1, #0
 80021b4:	60f9      	str	r1, [r7, #12]
 80021b6:	2100      	movs	r1, #0
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ba:	2100      	movs	r1, #0
 80021bc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021be:	4952      	ldr	r1, [pc, #328]	; (8002308 <HAL_RCC_GetSysClockFreq+0x160>)
 80021c0:	6889      	ldr	r1, [r1, #8]
 80021c2:	f001 010c 	and.w	r1, r1, #12
 80021c6:	2908      	cmp	r1, #8
 80021c8:	d00d      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x3e>
 80021ca:	2908      	cmp	r1, #8
 80021cc:	f200 8094 	bhi.w	80022f8 <HAL_RCC_GetSysClockFreq+0x150>
 80021d0:	2900      	cmp	r1, #0
 80021d2:	d002      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x32>
 80021d4:	2904      	cmp	r1, #4
 80021d6:	d003      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x38>
 80021d8:	e08e      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021da:	4b4c      	ldr	r3, [pc, #304]	; (800230c <HAL_RCC_GetSysClockFreq+0x164>)
 80021dc:	60bb      	str	r3, [r7, #8]
       break;
 80021de:	e08e      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_RCC_GetSysClockFreq+0x168>)
 80021e2:	60bb      	str	r3, [r7, #8]
      break;
 80021e4:	e08b      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e6:	4948      	ldr	r1, [pc, #288]	; (8002308 <HAL_RCC_GetSysClockFreq+0x160>)
 80021e8:	6849      	ldr	r1, [r1, #4]
 80021ea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80021ee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f0:	4945      	ldr	r1, [pc, #276]	; (8002308 <HAL_RCC_GetSysClockFreq+0x160>)
 80021f2:	6849      	ldr	r1, [r1, #4]
 80021f4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80021f8:	2900      	cmp	r1, #0
 80021fa:	d024      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fc:	4942      	ldr	r1, [pc, #264]	; (8002308 <HAL_RCC_GetSysClockFreq+0x160>)
 80021fe:	6849      	ldr	r1, [r1, #4]
 8002200:	0989      	lsrs	r1, r1, #6
 8002202:	4608      	mov	r0, r1
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	f240 14ff 	movw	r4, #511	; 0x1ff
 800220c:	f04f 0500 	mov.w	r5, #0
 8002210:	ea00 0204 	and.w	r2, r0, r4
 8002214:	ea01 0305 	and.w	r3, r1, r5
 8002218:	493d      	ldr	r1, [pc, #244]	; (8002310 <HAL_RCC_GetSysClockFreq+0x168>)
 800221a:	fb01 f003 	mul.w	r0, r1, r3
 800221e:	2100      	movs	r1, #0
 8002220:	fb01 f102 	mul.w	r1, r1, r2
 8002224:	1844      	adds	r4, r0, r1
 8002226:	493a      	ldr	r1, [pc, #232]	; (8002310 <HAL_RCC_GetSysClockFreq+0x168>)
 8002228:	fba2 0101 	umull	r0, r1, r2, r1
 800222c:	1863      	adds	r3, r4, r1
 800222e:	4619      	mov	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	f04f 0300 	mov.w	r3, #0
 8002238:	f7fe fa16 	bl	8000668 <__aeabi_uldivmod>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4613      	mov	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e04a      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002246:	4b30      	ldr	r3, [pc, #192]	; (8002308 <HAL_RCC_GetSysClockFreq+0x160>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	099b      	lsrs	r3, r3, #6
 800224c:	461a      	mov	r2, r3
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002256:	f04f 0100 	mov.w	r1, #0
 800225a:	ea02 0400 	and.w	r4, r2, r0
 800225e:	ea03 0501 	and.w	r5, r3, r1
 8002262:	4620      	mov	r0, r4
 8002264:	4629      	mov	r1, r5
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	014b      	lsls	r3, r1, #5
 8002270:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002274:	0142      	lsls	r2, r0, #5
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	1b00      	subs	r0, r0, r4
 800227c:	eb61 0105 	sbc.w	r1, r1, r5
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	018b      	lsls	r3, r1, #6
 800228a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800228e:	0182      	lsls	r2, r0, #6
 8002290:	1a12      	subs	r2, r2, r0
 8002292:	eb63 0301 	sbc.w	r3, r3, r1
 8002296:	f04f 0000 	mov.w	r0, #0
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	00d9      	lsls	r1, r3, #3
 80022a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022a4:	00d0      	lsls	r0, r2, #3
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	1912      	adds	r2, r2, r4
 80022ac:	eb45 0303 	adc.w	r3, r5, r3
 80022b0:	f04f 0000 	mov.w	r0, #0
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	0299      	lsls	r1, r3, #10
 80022ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022be:	0290      	lsls	r0, r2, #10
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	f7fe f9ca 	bl	8000668 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4613      	mov	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_GetSysClockFreq+0x160>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	60bb      	str	r3, [r7, #8]
      break;
 80022f6:	e002      	b.n	80022fe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022f8:	4b04      	ldr	r3, [pc, #16]	; (800230c <HAL_RCC_GetSysClockFreq+0x164>)
 80022fa:	60bb      	str	r3, [r7, #8]
      break;
 80022fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fe:	68bb      	ldr	r3, [r7, #8]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bdb0      	pop	{r4, r5, r7, pc}
 8002308:	40023800 	.word	0x40023800
 800230c:	00f42400 	.word	0x00f42400
 8002310:	017d7840 	.word	0x017d7840

08002314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <HAL_RCC_GetHCLKFreq+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000000 	.word	0x20000000

0800232c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002330:	f7ff fff0 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	0a9b      	lsrs	r3, r3, #10
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4903      	ldr	r1, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	0800ae8c 	.word	0x0800ae8c

08002354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002358:	f7ff ffdc 	bl	8002314 <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0b5b      	lsrs	r3, r3, #13
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4903      	ldr	r1, [pc, #12]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40023800 	.word	0x40023800
 8002378:	0800ae8c 	.word	0x0800ae8c

0800237c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	220f      	movs	r2, #15
 800238a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_RCC_GetClockConfig+0x60>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0207 	and.w	r2, r3, #7
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40023c00 	.word	0x40023c00

080023e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e041      	b.n	8002476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d106      	bne.n	800240c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f839 	bl	800247e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3304      	adds	r3, #4
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f000 f9d8 	bl	80027d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d001      	beq.n	80024ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e04e      	b.n	800254a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a23      	ldr	r2, [pc, #140]	; (8002558 <HAL_TIM_Base_Start_IT+0xc4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d022      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x80>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d6:	d01d      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x80>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_TIM_Base_Start_IT+0xc8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d018      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x80>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <HAL_TIM_Base_Start_IT+0xcc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d013      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x80>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a1c      	ldr	r2, [pc, #112]	; (8002564 <HAL_TIM_Base_Start_IT+0xd0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00e      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x80>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <HAL_TIM_Base_Start_IT+0xd4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d009      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x80>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <HAL_TIM_Base_Start_IT+0xd8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d004      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x80>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a18      	ldr	r2, [pc, #96]	; (8002570 <HAL_TIM_Base_Start_IT+0xdc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d111      	bne.n	8002538 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2b06      	cmp	r3, #6
 8002524:	d010      	beq.n	8002548 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002536:	e007      	b.n	8002548 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000
 800255c:	40000400 	.word	0x40000400
 8002560:	40000800 	.word	0x40000800
 8002564:	40000c00 	.word	0x40000c00
 8002568:	40010400 	.word	0x40010400
 800256c:	40014000 	.word	0x40014000
 8002570:	40001800 	.word	0x40001800

08002574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b02      	cmp	r3, #2
 8002588:	d122      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d11b      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0202 	mvn.w	r2, #2
 80025a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8ee 	bl	8002798 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8e0 	bl	8002784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f8f1 	bl	80027ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0204 	mvn.w	r2, #4
 80025f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8c4 	bl	8002798 <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f8b6 	bl	8002784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f8c7 	bl	80027ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b08      	cmp	r3, #8
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b08      	cmp	r3, #8
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0208 	mvn.w	r2, #8
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2204      	movs	r2, #4
 800264e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f89a 	bl	8002798 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f88c 	bl	8002784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f89d 	bl	80027ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b10      	cmp	r3, #16
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b10      	cmp	r3, #16
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0210 	mvn.w	r2, #16
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2208      	movs	r2, #8
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f870 	bl	8002798 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f862 	bl	8002784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f873 	bl	80027ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10e      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0201 	mvn.w	r2, #1
 80026f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fd40 	bl	8001178 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d10e      	bne.n	8002724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b80      	cmp	r3, #128	; 0x80
 8002712:	d107      	bne.n	8002724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800271c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f902 	bl	8002928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b40      	cmp	r3, #64	; 0x40
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f838 	bl	80027c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b20      	cmp	r3, #32
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b20      	cmp	r3, #32
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0220 	mvn.w	r2, #32
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8cc 	bl	8002914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <TIM_Base_SetConfig+0x114>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d013      	beq.n	8002814 <TIM_Base_SetConfig+0x40>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d00f      	beq.n	8002814 <TIM_Base_SetConfig+0x40>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a3d      	ldr	r2, [pc, #244]	; (80028ec <TIM_Base_SetConfig+0x118>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d00b      	beq.n	8002814 <TIM_Base_SetConfig+0x40>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a3c      	ldr	r2, [pc, #240]	; (80028f0 <TIM_Base_SetConfig+0x11c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d007      	beq.n	8002814 <TIM_Base_SetConfig+0x40>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3b      	ldr	r2, [pc, #236]	; (80028f4 <TIM_Base_SetConfig+0x120>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d003      	beq.n	8002814 <TIM_Base_SetConfig+0x40>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <TIM_Base_SetConfig+0x124>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d108      	bne.n	8002826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a2f      	ldr	r2, [pc, #188]	; (80028e8 <TIM_Base_SetConfig+0x114>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d02b      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d027      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a2c      	ldr	r2, [pc, #176]	; (80028ec <TIM_Base_SetConfig+0x118>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d023      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <TIM_Base_SetConfig+0x11c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01f      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <TIM_Base_SetConfig+0x120>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01b      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <TIM_Base_SetConfig+0x124>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d017      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a28      	ldr	r2, [pc, #160]	; (80028fc <TIM_Base_SetConfig+0x128>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a27      	ldr	r2, [pc, #156]	; (8002900 <TIM_Base_SetConfig+0x12c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00f      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a26      	ldr	r2, [pc, #152]	; (8002904 <TIM_Base_SetConfig+0x130>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00b      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a25      	ldr	r2, [pc, #148]	; (8002908 <TIM_Base_SetConfig+0x134>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <TIM_Base_SetConfig+0x138>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d003      	beq.n	8002886 <TIM_Base_SetConfig+0xb2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a23      	ldr	r2, [pc, #140]	; (8002910 <TIM_Base_SetConfig+0x13c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d108      	bne.n	8002898 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4313      	orrs	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <TIM_Base_SetConfig+0x114>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d003      	beq.n	80028cc <TIM_Base_SetConfig+0xf8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <TIM_Base_SetConfig+0x124>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d103      	bne.n	80028d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	691a      	ldr	r2, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	615a      	str	r2, [r3, #20]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40000c00 	.word	0x40000c00
 80028f8:	40010400 	.word	0x40010400
 80028fc:	40014000 	.word	0x40014000
 8002900:	40014400 	.word	0x40014400
 8002904:	40014800 	.word	0x40014800
 8002908:	40001800 	.word	0x40001800
 800290c:	40001c00 	.word	0x40001c00
 8002910:	40002000 	.word	0x40002000

08002914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e03f      	b.n	80029ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe fc48 	bl	80011f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f905 	bl	8002b90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08a      	sub	sp, #40	; 0x28
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d17c      	bne.n	8002af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_UART_Transmit+0x2c>
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e075      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x3e>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e06e      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2221      	movs	r2, #33	; 0x21
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe fdd5 	bl	80015d8 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d108      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e003      	b.n	8002a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002a68:	e02a      	b.n	8002ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f840 	bl	8002afa <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e036      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e007      	b.n	8002ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1cf      	bne.n	8002a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f810 	bl	8002afa <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e006      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60f8      	str	r0, [r7, #12]
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0a:	e02c      	b.n	8002b66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d028      	beq.n	8002b66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d007      	beq.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x30>
 8002b1a:	f7fe fd5d 	bl	80015d8 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d21d      	bcs.n	8002b66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e00f      	b.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	bf0c      	ite	eq
 8002b76:	2301      	moveq	r3, #1
 8002b78:	2300      	movne	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d0c3      	beq.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b94:	b09f      	sub	sp, #124	; 0x7c
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba6:	68d9      	ldr	r1, [r3, #12]
 8002ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	ea40 0301 	orr.w	r3, r0, r1
 8002bb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bd4:	f021 010c 	bic.w	r1, r1, #12
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bde:	430b      	orrs	r3, r1
 8002be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bee:	6999      	ldr	r1, [r3, #24]
 8002bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	ea40 0301 	orr.w	r3, r0, r1
 8002bf8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4bc5      	ldr	r3, [pc, #788]	; (8002f14 <UART_SetConfig+0x384>)
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d004      	beq.n	8002c0e <UART_SetConfig+0x7e>
 8002c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4bc3      	ldr	r3, [pc, #780]	; (8002f18 <UART_SetConfig+0x388>)
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d103      	bne.n	8002c16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c0e:	f7ff fba1 	bl	8002354 <HAL_RCC_GetPCLK2Freq>
 8002c12:	6778      	str	r0, [r7, #116]	; 0x74
 8002c14:	e002      	b.n	8002c1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c16:	f7ff fb89 	bl	800232c <HAL_RCC_GetPCLK1Freq>
 8002c1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c24:	f040 80b6 	bne.w	8002d94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c2a:	461c      	mov	r4, r3
 8002c2c:	f04f 0500 	mov.w	r5, #0
 8002c30:	4622      	mov	r2, r4
 8002c32:	462b      	mov	r3, r5
 8002c34:	1891      	adds	r1, r2, r2
 8002c36:	6439      	str	r1, [r7, #64]	; 0x40
 8002c38:	415b      	adcs	r3, r3
 8002c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c40:	1912      	adds	r2, r2, r4
 8002c42:	eb45 0303 	adc.w	r3, r5, r3
 8002c46:	f04f 0000 	mov.w	r0, #0
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	00d9      	lsls	r1, r3, #3
 8002c50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c54:	00d0      	lsls	r0, r2, #3
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	1911      	adds	r1, r2, r4
 8002c5c:	6639      	str	r1, [r7, #96]	; 0x60
 8002c5e:	416b      	adcs	r3, r5
 8002c60:	667b      	str	r3, [r7, #100]	; 0x64
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	1891      	adds	r1, r2, r2
 8002c6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c70:	415b      	adcs	r3, r3
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c7c:	f7fd fcf4 	bl	8000668 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4ba5      	ldr	r3, [pc, #660]	; (8002f1c <UART_SetConfig+0x38c>)
 8002c86:	fba3 2302 	umull	r2, r3, r3, r2
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	011e      	lsls	r6, r3, #4
 8002c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c90:	461c      	mov	r4, r3
 8002c92:	f04f 0500 	mov.w	r5, #0
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	6339      	str	r1, [r7, #48]	; 0x30
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ca6:	1912      	adds	r2, r2, r4
 8002ca8:	eb45 0303 	adc.w	r3, r5, r3
 8002cac:	f04f 0000 	mov.w	r0, #0
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	00d9      	lsls	r1, r3, #3
 8002cb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cba:	00d0      	lsls	r0, r2, #3
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	1911      	adds	r1, r2, r4
 8002cc2:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cc4:	416b      	adcs	r3, r5
 8002cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	1891      	adds	r1, r2, r2
 8002cd4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cd6:	415b      	adcs	r3, r3
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cde:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002ce2:	f7fd fcc1 	bl	8000668 <__aeabi_uldivmod>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <UART_SetConfig+0x38c>)
 8002cec:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf0:	095b      	lsrs	r3, r3, #5
 8002cf2:	2164      	movs	r1, #100	; 0x64
 8002cf4:	fb01 f303 	mul.w	r3, r1, r3
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	3332      	adds	r3, #50	; 0x32
 8002cfe:	4a87      	ldr	r2, [pc, #540]	; (8002f1c <UART_SetConfig+0x38c>)
 8002d00:	fba2 2303 	umull	r2, r3, r2, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d0c:	441e      	add	r6, r3
 8002d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d10:	4618      	mov	r0, r3
 8002d12:	f04f 0100 	mov.w	r1, #0
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	1894      	adds	r4, r2, r2
 8002d1c:	623c      	str	r4, [r7, #32]
 8002d1e:	415b      	adcs	r3, r3
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
 8002d22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d26:	1812      	adds	r2, r2, r0
 8002d28:	eb41 0303 	adc.w	r3, r1, r3
 8002d2c:	f04f 0400 	mov.w	r4, #0
 8002d30:	f04f 0500 	mov.w	r5, #0
 8002d34:	00dd      	lsls	r5, r3, #3
 8002d36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d3a:	00d4      	lsls	r4, r2, #3
 8002d3c:	4622      	mov	r2, r4
 8002d3e:	462b      	mov	r3, r5
 8002d40:	1814      	adds	r4, r2, r0
 8002d42:	653c      	str	r4, [r7, #80]	; 0x50
 8002d44:	414b      	adcs	r3, r1
 8002d46:	657b      	str	r3, [r7, #84]	; 0x54
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	1891      	adds	r1, r2, r2
 8002d54:	61b9      	str	r1, [r7, #24]
 8002d56:	415b      	adcs	r3, r3
 8002d58:	61fb      	str	r3, [r7, #28]
 8002d5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d62:	f7fd fc81 	bl	8000668 <__aeabi_uldivmod>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <UART_SetConfig+0x38c>)
 8002d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	2164      	movs	r1, #100	; 0x64
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	3332      	adds	r3, #50	; 0x32
 8002d7e:	4a67      	ldr	r2, [pc, #412]	; (8002f1c <UART_SetConfig+0x38c>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	f003 0207 	and.w	r2, r3, #7
 8002d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4432      	add	r2, r6
 8002d90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d92:	e0b9      	b.n	8002f08 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d96:	461c      	mov	r4, r3
 8002d98:	f04f 0500 	mov.w	r5, #0
 8002d9c:	4622      	mov	r2, r4
 8002d9e:	462b      	mov	r3, r5
 8002da0:	1891      	adds	r1, r2, r2
 8002da2:	6139      	str	r1, [r7, #16]
 8002da4:	415b      	adcs	r3, r3
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dac:	1912      	adds	r2, r2, r4
 8002dae:	eb45 0303 	adc.w	r3, r5, r3
 8002db2:	f04f 0000 	mov.w	r0, #0
 8002db6:	f04f 0100 	mov.w	r1, #0
 8002dba:	00d9      	lsls	r1, r3, #3
 8002dbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dc0:	00d0      	lsls	r0, r2, #3
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	eb12 0804 	adds.w	r8, r2, r4
 8002dca:	eb43 0905 	adc.w	r9, r3, r5
 8002dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	008b      	lsls	r3, r1, #2
 8002de2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002de6:	0082      	lsls	r2, r0, #2
 8002de8:	4640      	mov	r0, r8
 8002dea:	4649      	mov	r1, r9
 8002dec:	f7fd fc3c 	bl	8000668 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <UART_SetConfig+0x38c>)
 8002df6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	011e      	lsls	r6, r3, #4
 8002dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e00:	4618      	mov	r0, r3
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	1894      	adds	r4, r2, r2
 8002e0c:	60bc      	str	r4, [r7, #8]
 8002e0e:	415b      	adcs	r3, r3
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e16:	1812      	adds	r2, r2, r0
 8002e18:	eb41 0303 	adc.w	r3, r1, r3
 8002e1c:	f04f 0400 	mov.w	r4, #0
 8002e20:	f04f 0500 	mov.w	r5, #0
 8002e24:	00dd      	lsls	r5, r3, #3
 8002e26:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e2a:	00d4      	lsls	r4, r2, #3
 8002e2c:	4622      	mov	r2, r4
 8002e2e:	462b      	mov	r3, r5
 8002e30:	1814      	adds	r4, r2, r0
 8002e32:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e34:	414b      	adcs	r3, r1
 8002e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f04f 0100 	mov.w	r1, #0
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	008b      	lsls	r3, r1, #2
 8002e4c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e50:	0082      	lsls	r2, r0, #2
 8002e52:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e56:	f7fd fc07 	bl	8000668 <__aeabi_uldivmod>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4b2f      	ldr	r3, [pc, #188]	; (8002f1c <UART_SetConfig+0x38c>)
 8002e60:	fba3 1302 	umull	r1, r3, r3, r2
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	2164      	movs	r1, #100	; 0x64
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	3332      	adds	r3, #50	; 0x32
 8002e72:	4a2a      	ldr	r2, [pc, #168]	; (8002f1c <UART_SetConfig+0x38c>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7e:	441e      	add	r6, r3
 8002e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e82:	4618      	mov	r0, r3
 8002e84:	f04f 0100 	mov.w	r1, #0
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	1894      	adds	r4, r2, r2
 8002e8e:	603c      	str	r4, [r7, #0]
 8002e90:	415b      	adcs	r3, r3
 8002e92:	607b      	str	r3, [r7, #4]
 8002e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e98:	1812      	adds	r2, r2, r0
 8002e9a:	eb41 0303 	adc.w	r3, r1, r3
 8002e9e:	f04f 0400 	mov.w	r4, #0
 8002ea2:	f04f 0500 	mov.w	r5, #0
 8002ea6:	00dd      	lsls	r5, r3, #3
 8002ea8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002eac:	00d4      	lsls	r4, r2, #3
 8002eae:	4622      	mov	r2, r4
 8002eb0:	462b      	mov	r3, r5
 8002eb2:	eb12 0a00 	adds.w	sl, r2, r0
 8002eb6:	eb43 0b01 	adc.w	fp, r3, r1
 8002eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f04f 0100 	mov.w	r1, #0
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	008b      	lsls	r3, r1, #2
 8002ece:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ed2:	0082      	lsls	r2, r0, #2
 8002ed4:	4650      	mov	r0, sl
 8002ed6:	4659      	mov	r1, fp
 8002ed8:	f7fd fbc6 	bl	8000668 <__aeabi_uldivmod>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <UART_SetConfig+0x38c>)
 8002ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2164      	movs	r1, #100	; 0x64
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	3332      	adds	r3, #50	; 0x32
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <UART_SetConfig+0x38c>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4432      	add	r2, r6
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	377c      	adds	r7, #124	; 0x7c
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f12:	bf00      	nop
 8002f14:	40011000 	.word	0x40011000
 8002f18:	40011400 	.word	0x40011400
 8002f1c:	51eb851f 	.word	0x51eb851f

08002f20 <Tm_DArray_remove>:
error:
  return NULL;
}

static inline void *Tm_DArray_remove(Tm_DArray *array, int i)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  void *el = array->contents[i];
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60fb      	str	r3, [r7, #12]

  array->contents[i] = NULL;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

  return el;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <Tm_DArray_create>:
#include <treadmill/darray.h>
#include <assert.h>

Tm_DArray *Tm_DArray_create(size_t element_size, size_t initial_max)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b08d      	sub	sp, #52	; 0x34
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  Tm_DArray *array = malloc(sizeof(Tm_DArray));
 8002f5e:	2014      	movs	r0, #20
 8002f60:	f004 feb4 	bl	8007ccc <malloc>
 8002f64:	4603      	mov	r3, r0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  check_mem(array);
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d12f      	bne.n	8002fce <Tm_DArray_create+0x7a>
        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	623b      	str	r3, [r7, #32]
    }
 8002f80:	bf00      	nop
 8002f82:	4b57      	ldr	r3, [pc, #348]	; (80030e0 <Tm_DArray_create+0x18c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68dc      	ldr	r4, [r3, #12]
 8002f88:	f004 fdde 	bl	8007b48 <__errno>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <Tm_DArray_create+0x52>
 8002f94:	f004 fdd8 	bl	8007b48 <__errno>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f005 fcf5 	bl	800898c <strerror>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	e000      	b.n	8002fa8 <Tm_DArray_create+0x54>
 8002fa6:	4b4f      	ldr	r3, [pc, #316]	; (80030e4 <Tm_DArray_create+0x190>)
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2307      	movs	r3, #7
 8002fac:	4a4e      	ldr	r2, [pc, #312]	; (80030e8 <Tm_DArray_create+0x194>)
 8002fae:	494f      	ldr	r1, [pc, #316]	; (80030ec <Tm_DArray_create+0x198>)
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f004 fde3 	bl	8007b7c <fiprintf>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
        __asm volatile
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f383 8811 	msr	BASEPRI, r3
    }
 8002fc0:	bf00      	nop
 8002fc2:	f004 fdc1 	bl	8007b48 <__errno>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	e07d      	b.n	80030ca <Tm_DArray_create+0x176>
  array->max = initial_max;
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	605a      	str	r2, [r3, #4]
  check(array->max > 0, "You must set an initial_max > 0.");
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	dc2f      	bgt.n	800303c <Tm_DArray_create+0xe8>
        __asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	61bb      	str	r3, [r7, #24]
    }
 8002fee:	bf00      	nop
 8002ff0:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <Tm_DArray_create+0x18c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68dc      	ldr	r4, [r3, #12]
 8002ff6:	f004 fda7 	bl	8007b48 <__errno>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <Tm_DArray_create+0xc0>
 8003002:	f004 fda1 	bl	8007b48 <__errno>
 8003006:	4603      	mov	r3, r0
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f005 fcbe 	bl	800898c <strerror>
 8003010:	4603      	mov	r3, r0
 8003012:	e000      	b.n	8003016 <Tm_DArray_create+0xc2>
 8003014:	4b33      	ldr	r3, [pc, #204]	; (80030e4 <Tm_DArray_create+0x190>)
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2309      	movs	r3, #9
 800301a:	4a33      	ldr	r2, [pc, #204]	; (80030e8 <Tm_DArray_create+0x194>)
 800301c:	4934      	ldr	r1, [pc, #208]	; (80030f0 <Tm_DArray_create+0x19c>)
 800301e:	4620      	mov	r0, r4
 8003020:	f004 fdac 	bl	8007b7c <fiprintf>
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f383 8811 	msr	BASEPRI, r3
    }
 800302e:	bf00      	nop
 8003030:	f004 fd8a 	bl	8007b48 <__errno>
 8003034:	4603      	mov	r3, r0
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e046      	b.n	80030ca <Tm_DArray_create+0x176>

  array->contents = calloc(initial_max, sizeof(void *));
 800303c:	2104      	movs	r1, #4
 800303e:	6838      	ldr	r0, [r7, #0]
 8003040:	f004 fd7a 	bl	8007b38 <calloc>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	611a      	str	r2, [r3, #16]
  check_mem(array->contents);
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d12f      	bne.n	80030b4 <Tm_DArray_create+0x160>
        __asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	613b      	str	r3, [r7, #16]
    }
 8003066:	bf00      	nop
 8003068:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <Tm_DArray_create+0x18c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68dc      	ldr	r4, [r3, #12]
 800306e:	f004 fd6b 	bl	8007b48 <__errno>
 8003072:	4603      	mov	r3, r0
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <Tm_DArray_create+0x138>
 800307a:	f004 fd65 	bl	8007b48 <__errno>
 800307e:	4603      	mov	r3, r0
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f005 fc82 	bl	800898c <strerror>
 8003088:	4603      	mov	r3, r0
 800308a:	e000      	b.n	800308e <Tm_DArray_create+0x13a>
 800308c:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <Tm_DArray_create+0x190>)
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	230c      	movs	r3, #12
 8003092:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <Tm_DArray_create+0x194>)
 8003094:	4915      	ldr	r1, [pc, #84]	; (80030ec <Tm_DArray_create+0x198>)
 8003096:	4620      	mov	r0, r4
 8003098:	f004 fd70 	bl	8007b7c <fiprintf>
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f383 8811 	msr	BASEPRI, r3
    }
 80030a6:	bf00      	nop
 80030a8:	f004 fd4e 	bl	8007b48 <__errno>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e00a      	b.n	80030ca <Tm_DArray_create+0x176>

  array->end = 0;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
  array->element_size = element_size;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]
  array->expand_rate = DEFAULT_EXPAND_RATE;
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	220a      	movs	r2, #10
 80030c4:	60da      	str	r2, [r3, #12]

  return array;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	e006      	b.n	80030d8 <Tm_DArray_create+0x184>

error:
  if(array) free(array);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <Tm_DArray_create+0x182>
 80030d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030d2:	f004 fe03 	bl	8007cdc <free>
  return NULL;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	372c      	adds	r7, #44	; 0x2c
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	20000014 	.word	0x20000014
 80030e4:	0800a694 	.word	0x0800a694
 80030e8:	0800a69c 	.word	0x0800a69c
 80030ec:	0800a6b4 	.word	0x0800a6b4
 80030f0:	0800a6e4 	.word	0x0800a6e4

080030f4 <Tm_DArray_resize>:
    }
  }
}

static inline int Tm_DArray_resize(Tm_DArray *array, size_t newsize)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b08b      	sub	sp, #44	; 0x2c
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  array->max = newsize;
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	605a      	str	r2, [r3, #4]
  check(array->max > 0, "The newsize must be > 0.");
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	dc2f      	bgt.n	800316c <Tm_DArray_resize+0x78>
        __asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	61bb      	str	r3, [r7, #24]
    }
 800311e:	bf00      	nop
 8003120:	4b36      	ldr	r3, [pc, #216]	; (80031fc <Tm_DArray_resize+0x108>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68dc      	ldr	r4, [r3, #12]
 8003126:	f004 fd0f 	bl	8007b48 <__errno>
 800312a:	4603      	mov	r3, r0
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <Tm_DArray_resize+0x50>
 8003132:	f004 fd09 	bl	8007b48 <__errno>
 8003136:	4603      	mov	r3, r0
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f005 fc26 	bl	800898c <strerror>
 8003140:	4603      	mov	r3, r0
 8003142:	e000      	b.n	8003146 <Tm_DArray_resize+0x52>
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <Tm_DArray_resize+0x10c>)
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2328      	movs	r3, #40	; 0x28
 800314a:	4a2e      	ldr	r2, [pc, #184]	; (8003204 <Tm_DArray_resize+0x110>)
 800314c:	492e      	ldr	r1, [pc, #184]	; (8003208 <Tm_DArray_resize+0x114>)
 800314e:	4620      	mov	r0, r4
 8003150:	f004 fd14 	bl	8007b7c <fiprintf>
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f383 8811 	msr	BASEPRI, r3
    }
 800315e:	bf00      	nop
 8003160:	f004 fcf2 	bl	8007b48 <__errno>
 8003164:	4603      	mov	r3, r0
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	e041      	b.n	80031f0 <Tm_DArray_resize+0xfc>

  void *contents = realloc(array->contents, array->max * sizeof(void *));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f005 f9eb 	bl	8008554 <realloc>
 800317e:	61f8      	str	r0, [r7, #28]
  // check contents and assume realloc doesn't harm the original on error

  check_mem(contents);
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d12f      	bne.n	80031e6 <Tm_DArray_resize+0xf2>
        __asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	613b      	str	r3, [r7, #16]
    }
 8003198:	bf00      	nop
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <Tm_DArray_resize+0x108>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68dc      	ldr	r4, [r3, #12]
 80031a0:	f004 fcd2 	bl	8007b48 <__errno>
 80031a4:	4603      	mov	r3, r0
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d008      	beq.n	80031be <Tm_DArray_resize+0xca>
 80031ac:	f004 fccc 	bl	8007b48 <__errno>
 80031b0:	4603      	mov	r3, r0
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f005 fbe9 	bl	800898c <strerror>
 80031ba:	4603      	mov	r3, r0
 80031bc:	e000      	b.n	80031c0 <Tm_DArray_resize+0xcc>
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <Tm_DArray_resize+0x10c>)
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	232d      	movs	r3, #45	; 0x2d
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <Tm_DArray_resize+0x110>)
 80031c6:	4911      	ldr	r1, [pc, #68]	; (800320c <Tm_DArray_resize+0x118>)
 80031c8:	4620      	mov	r0, r4
 80031ca:	f004 fcd7 	bl	8007b7c <fiprintf>
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f383 8811 	msr	BASEPRI, r3
    }
 80031d8:	bf00      	nop
 80031da:	f004 fcb5 	bl	8007b48 <__errno>
 80031de:	4603      	mov	r3, r0
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e004      	b.n	80031f0 <Tm_DArray_resize+0xfc>

  array->contents = contents;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	611a      	str	r2, [r3, #16]

  return 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e001      	b.n	80031f4 <Tm_DArray_resize+0x100>
error:
  return -1;
 80031f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3724      	adds	r7, #36	; 0x24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd90      	pop	{r4, r7, pc}
 80031fc:	20000014 	.word	0x20000014
 8003200:	0800a694 	.word	0x0800a694
 8003204:	0800a69c 	.word	0x0800a69c
 8003208:	0800a724 	.word	0x0800a724
 800320c:	0800a6b4 	.word	0x0800a6b4

08003210 <Tm_DArray_expand>:

int Tm_DArray_expand(Tm_DArray *array)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af02      	add	r7, sp, #8
 8003216:	6078      	str	r0, [r7, #4]
  size_t old_max = array->max;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	617b      	str	r3, [r7, #20]
  check(Tm_DArray_resize(array, array->max + array->expand_rate) == 0,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	461a      	mov	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4413      	add	r3, r2
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ff61 	bl	80030f4 <Tm_DArray_resize>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d038      	beq.n	80032aa <Tm_DArray_expand+0x9a>
        __asm volatile
 8003238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	613b      	str	r3, [r7, #16]
    }
 800324a:	bf00      	nop
 800324c:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <Tm_DArray_expand+0xbc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68dc      	ldr	r4, [r3, #12]
 8003252:	f004 fc79 	bl	8007b48 <__errno>
 8003256:	4603      	mov	r3, r0
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <Tm_DArray_expand+0x60>
 800325e:	f004 fc73 	bl	8007b48 <__errno>
 8003262:	4603      	mov	r3, r0
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f005 fb90 	bl	800898c <strerror>
 800326c:	4603      	mov	r3, r0
 800326e:	e000      	b.n	8003272 <Tm_DArray_expand+0x62>
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <Tm_DArray_expand+0xc0>)
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6852      	ldr	r2, [r2, #4]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	68c9      	ldr	r1, [r1, #12]
 800327a:	440a      	add	r2, r1
 800327c:	9201      	str	r2, [sp, #4]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2339      	movs	r3, #57	; 0x39
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <Tm_DArray_expand+0xc4>)
 8003284:	4914      	ldr	r1, [pc, #80]	; (80032d8 <Tm_DArray_expand+0xc8>)
 8003286:	4620      	mov	r0, r4
 8003288:	f004 fc78 	bl	8007b7c <fiprintf>
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f383 8811 	msr	BASEPRI, r3
    }
 8003296:	bf00      	nop
 8003298:	f004 fc56 	bl	8007b48 <__errno>
 800329c:	4603      	mov	r3, r0
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	bf00      	nop

  memset(array->contents + old_max, 0, array->expand_rate + 1);
  return 0;

error:
  return -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295
 80032a8:	e00c      	b.n	80032c4 <Tm_DArray_expand+0xb4>
  memset(array->contents + old_max, 0, array->expand_rate + 1);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	18d0      	adds	r0, r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	3301      	adds	r3, #1
 80032ba:	461a      	mov	r2, r3
 80032bc:	2100      	movs	r1, #0
 80032be:	f004 fd23 	bl	8007d08 <memset>
  return 0;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}
 80032cc:	20000014 	.word	0x20000014
 80032d0:	0800a694 	.word	0x0800a694
 80032d4:	0800a69c 	.word	0x0800a69c
 80032d8:	0800a75c 	.word	0x0800a75c

080032dc <Tm_DArray_contract>:

int Tm_DArray_contract(Tm_DArray *array)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  int new_size = array->end < (int)array->expand_rate ? (int)array->expand_rate : array->end;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68d2      	ldr	r2, [r2, #12]
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bfb8      	it	lt
 80032f0:	4613      	movlt	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  return Tm_DArray_resize(array, new_size + 1);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3301      	adds	r3, #1
 80032f8:	4619      	mov	r1, r3
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff fefa 	bl	80030f4 <Tm_DArray_resize>
 8003300:	4603      	mov	r3, r0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <Tm_DArray_destroy>:

void Tm_DArray_destroy(Tm_DArray *array)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  if(array) {
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <Tm_DArray_destroy+0x26>
    if(array->contents) free(array->contents);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <Tm_DArray_destroy+0x20>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	4618      	mov	r0, r3
 8003326:	f004 fcd9 	bl	8007cdc <free>
    free(array);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f004 fcd6 	bl	8007cdc <free>
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <Tm_DArray_push>:
  Tm_DArray_clear(array);
  Tm_DArray_destroy(array);
}

int Tm_DArray_push(Tm_DArray *array, void *el)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  array->contents[array->end] = el;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	601a      	str	r2, [r3, #0]
  array->end++;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]

  if(Tm_DArray_end(array) >= Tm_DArray_max(array)) {
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <Tm_DArray_push+0x30>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	e000      	b.n	800336a <Tm_DArray_push+0x32>
 8003368:	2200      	movs	r2, #0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <Tm_DArray_push+0x3e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	e000      	b.n	8003378 <Tm_DArray_push+0x40>
 8003376:	2300      	movs	r3, #0
 8003378:	429a      	cmp	r2, r3
 800337a:	db04      	blt.n	8003386 <Tm_DArray_push+0x4e>
    return Tm_DArray_expand(array);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff ff47 	bl	8003210 <Tm_DArray_expand>
 8003382:	4603      	mov	r3, r0
 8003384:	e000      	b.n	8003388 <Tm_DArray_push+0x50>
  } else {
    return 0;
 8003386:	2300      	movs	r3, #0
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <Tm_DArray_pop>:

void *Tm_DArray_pop(Tm_DArray *array)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af02      	add	r7, sp, #8
 8003396:	6078      	str	r0, [r7, #4]
  check(array->end - 1 >= 0, "Attempt to pop from empty array.");
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	dc31      	bgt.n	8003404 <Tm_DArray_pop+0x74>
        __asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	613b      	str	r3, [r7, #16]
    }
 80033b2:	bf00      	nop
 80033b4:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <Tm_DArray_pop+0xd4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68dc      	ldr	r4, [r3, #12]
 80033ba:	f004 fbc5 	bl	8007b48 <__errno>
 80033be:	4603      	mov	r3, r0
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <Tm_DArray_pop+0x48>
 80033c6:	f004 fbbf 	bl	8007b48 <__errno>
 80033ca:	4603      	mov	r3, r0
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f005 fadc 	bl	800898c <strerror>
 80033d4:	4603      	mov	r3, r0
 80033d6:	e000      	b.n	80033da <Tm_DArray_pop+0x4a>
 80033d8:	4b23      	ldr	r3, [pc, #140]	; (8003468 <Tm_DArray_pop+0xd8>)
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2367      	movs	r3, #103	; 0x67
 80033de:	4a23      	ldr	r2, [pc, #140]	; (800346c <Tm_DArray_pop+0xdc>)
 80033e0:	4923      	ldr	r1, [pc, #140]	; (8003470 <Tm_DArray_pop+0xe0>)
 80033e2:	4620      	mov	r0, r4
 80033e4:	f004 fbca 	bl	8007b7c <fiprintf>
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f383 8811 	msr	BASEPRI, r3
    }
 80033f2:	bf00      	nop
 80033f4:	f004 fba8 	bl	8007b48 <__errno>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	bf00      	nop
    Tm_DArray_contract(array);
  }

  return el;
error:
  return NULL;
 8003400:	2300      	movs	r3, #0
 8003402:	e02b      	b.n	800345c <Tm_DArray_pop+0xcc>
  void *el = Tm_DArray_remove(array, array->end - 1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3b01      	subs	r3, #1
 800340a:	4619      	mov	r1, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fd87 	bl	8002f20 <Tm_DArray_remove>
 8003412:	6178      	str	r0, [r7, #20]
  array->end--;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	1e5a      	subs	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
  if (Tm_DArray_end(array) > (int)array->expand_rate && Tm_DArray_end(array) % array->expand_rate) {
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <Tm_DArray_pop+0x9a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	e000      	b.n	800342c <Tm_DArray_pop+0x9c>
 800342a:	2300      	movs	r3, #0
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	4293      	cmp	r3, r2
 8003432:	dd12      	ble.n	800345a <Tm_DArray_pop+0xca>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <Tm_DArray_pop+0xb0>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	e000      	b.n	8003442 <Tm_DArray_pop+0xb2>
 8003440:	2300      	movs	r3, #0
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	fbb3 f1f2 	udiv	r1, r3, r2
 800344a:	fb02 f201 	mul.w	r2, r2, r1
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <Tm_DArray_pop+0xca>
    Tm_DArray_contract(array);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff41 	bl	80032dc <Tm_DArray_contract>
  return el;
 800345a:	697b      	ldr	r3, [r7, #20]
}
 800345c:	4618      	mov	r0, r3
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}
 8003464:	20000014 	.word	0x20000014
 8003468:	0800a694 	.word	0x0800a694
 800346c:	0800a69c 	.word	0x0800a69c
 8003470:	0800a7a0 	.word	0x0800a7a0

08003474 <Tm_DArray_set>:

void Tm_DArray_set(Tm_DArray *array, int i, void *el)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b089      	sub	sp, #36	; 0x24
 8003478:	af02      	add	r7, sp, #8
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  check(i < array->max, "darray attempt to set past max");
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	db2f      	blt.n	80034ea <Tm_DArray_set+0x76>
        __asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	617b      	str	r3, [r7, #20]
    }
 800349c:	bf00      	nop
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <Tm_DArray_set+0x8c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68dc      	ldr	r4, [r3, #12]
 80034a4:	f004 fb50 	bl	8007b48 <__errno>
 80034a8:	4603      	mov	r3, r0
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <Tm_DArray_set+0x4e>
 80034b0:	f004 fb4a 	bl	8007b48 <__errno>
 80034b4:	4603      	mov	r3, r0
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f005 fa67 	bl	800898c <strerror>
 80034be:	4603      	mov	r3, r0
 80034c0:	e000      	b.n	80034c4 <Tm_DArray_set+0x50>
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <Tm_DArray_set+0x90>)
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	2377      	movs	r3, #119	; 0x77
 80034c8:	4a0f      	ldr	r2, [pc, #60]	; (8003508 <Tm_DArray_set+0x94>)
 80034ca:	4910      	ldr	r1, [pc, #64]	; (800350c <Tm_DArray_set+0x98>)
 80034cc:	4620      	mov	r0, r4
 80034ce:	f004 fb55 	bl	8007b7c <fiprintf>
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
        __asm volatile
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f383 8811 	msr	BASEPRI, r3
    }
 80034dc:	bf00      	nop
 80034de:	f004 fb33 	bl	8007b48 <__errno>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	e006      	b.n	80034f8 <Tm_DArray_set+0x84>
  array->contents[i] = el;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	601a      	str	r2, [r3, #0]
error:
  return;
 80034f8:	bf00      	nop
}
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd90      	pop	{r4, r7, pc}
 8003500:	20000014 	.word	0x20000014
 8003504:	0800a694 	.word	0x0800a694
 8003508:	0800a69c 	.word	0x0800a69c
 800350c:	0800a7e0 	.word	0x0800a7e0

08003510 <unsnap>:
#include <stdlib.h>
#include <treadmill/gc.h>
#include <treadmill/_dbg.h>

static inline void
unsnap(TmHeap *heap, TmCell* self) {
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  TmCell *my_prev = self->prev;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]
  TmCell *my_next = self->next;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60bb      	str	r3, [r7, #8]
  self->next = NULL;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
  self->prev = NULL;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	605a      	str	r2, [r3, #4]

  if(BOTTOM == self) BOTTOM = my_next;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d102      	bne.n	8003542 <unsnap+0x32>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	601a      	str	r2, [r3, #0]
  if(TOP    == self) TOP    = my_next;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d102      	bne.n	8003552 <unsnap+0x42>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	605a      	str	r2, [r3, #4]
  if(SCAN   == self) SCAN   = my_next;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d102      	bne.n	8003562 <unsnap+0x52>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	60da      	str	r2, [r3, #12]
  if(FREE   == self) FREE   = my_next;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d102      	bne.n	8003572 <unsnap+0x62>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	609a      	str	r2, [r3, #8]

  my_prev->next = my_next;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	601a      	str	r2, [r3, #0]
  my_next->prev = my_prev;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]
}
 800357e:	bf00      	nop
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <insert_in>:

static inline void
insert_in(TmHeap *heap, TmCell* self, TmCell* him) {
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  if(self == him) return; // we do nothing
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	429a      	cmp	r2, r3
 800359c:	d033      	beq.n	8003606 <insert_in+0x7c>

  unsnap(heap, self);
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff ffb5 	bl	8003510 <unsnap>

  TmCell *his_prev = him->prev;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	617b      	str	r3, [r7, #20]

  his_prev->next = self;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	601a      	str	r2, [r3, #0]
  him->prev      = self;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	605a      	str	r2, [r3, #4]

  self->prev  = his_prev;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	605a      	str	r2, [r3, #4]
  self->next  = him;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	601a      	str	r2, [r3, #0]

  if(him == TOP)    TOP = self;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d102      	bne.n	80035d4 <insert_in+0x4a>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	605a      	str	r2, [r3, #4]
  if(him == BOTTOM) BOTTOM = self;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d102      	bne.n	80035e4 <insert_in+0x5a>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	601a      	str	r2, [r3, #0]
  if(him == SCAN)   SCAN = self;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d102      	bne.n	80035f4 <insert_in+0x6a>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	60da      	str	r2, [r3, #12]
  if(him == FREE)   FREE = self;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d104      	bne.n	8003608 <insert_in+0x7e>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	e000      	b.n	8003608 <insert_in+0x7e>
  if(self == him) return; // we do nothing
 8003606:	bf00      	nop
}
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <make_ecru>:

//static inline void
void
make_ecru(TmHeap *heap, TmCell *self)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  if(self == BOTTOM) {
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d11b      	bne.n	800365a <make_ecru+0x4c>
    if (self == TOP)  TOP  = self->next;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d103      	bne.n	8003634 <make_ecru+0x26>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]
    if (self == SCAN) SCAN = self->next;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d103      	bne.n	8003646 <make_ecru+0x38>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60da      	str	r2, [r3, #12]
    if (self == FREE) FREE = self->next;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d10b      	bne.n	8003668 <make_ecru+0x5a>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e006      	b.n	8003668 <make_ecru+0x5a>
  } else {
    insert_in(heap, self, BOTTOM);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ff91 	bl	800358a <insert_in>
  }
  self->ecru = 1;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2201      	movs	r2, #1
 800366c:	731a      	strb	r2, [r3, #12]
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <make_grey>:

//static inline void
void
make_grey(TmHeap *heap, TmCell *self)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b082      	sub	sp, #8
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
 800367e:	6039      	str	r1, [r7, #0]
  insert_in(heap, self, TOP);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	461a      	mov	r2, r3
 8003686:	6839      	ldr	r1, [r7, #0]
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff ff7e 	bl	800358a <insert_in>
  self->ecru = 0;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2200      	movs	r2, #0
 8003692:	731a      	strb	r2, [r3, #12]

  if (self == SCAN) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d103      	bne.n	80036a6 <make_grey+0x30>
    SCAN = self->next;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60da      	str	r2, [r3, #12]
  }
  if (self == FREE) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d103      	bne.n	80036b8 <make_grey+0x42>
    FREE = self->next;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	609a      	str	r2, [r3, #8]
  }
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <TmHeap_new>:
  int growth_rate,
  int scan_every,
  size_t object_size,
  TmReleaseFn release_fn,
  TmScanPointersFn scan_pointers_fn)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  TmHeap *heap = calloc(1, sizeof(TmHeap));
 80036ce:	2130      	movs	r1, #48	; 0x30
 80036d0:	2001      	movs	r0, #1
 80036d2:	f004 fa31 	bl	8007b38 <calloc>
 80036d6:	4603      	mov	r3, r0
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24

  heap->state  = state;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	629a      	str	r2, [r3, #40]	; 0x28
  heap->chunks = Tm_DArray_create(sizeof(TmCell*), 100);
 80036e0:	2164      	movs	r1, #100	; 0x64
 80036e2:	2004      	movs	r0, #4
 80036e4:	f7ff fc36 	bl	8002f54 <Tm_DArray_create>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c

  TmChunk chunk = TmChunk_new(size + 1);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fa41 	bl	8003b80 <TmChunk_new>
  TmCell *head = chunk.head;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	623b      	str	r3, [r7, #32]
  TmCell *tail = chunk.tail;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	61fb      	str	r3, [r7, #28]

  // Save a reference to the chunk to deallocate it later
  Tm_DArray_push(heap->chunks, head);
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	6a39      	ldr	r1, [r7, #32]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fe13 	bl	8003338 <Tm_DArray_push>

  heap->growth_rate   = growth_rate;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	611a      	str	r2, [r3, #16]
  heap->release       = release_fn;
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	621a      	str	r2, [r3, #32]
  heap->scan_pointers = scan_pointers_fn;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003722:	625a      	str	r2, [r3, #36]	; 0x24
  heap->object_size   = object_size;
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003728:	61da      	str	r2, [r3, #28]
  heap->allocs        = 0;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	2200      	movs	r2, #0
 800372e:	615a      	str	r2, [r3, #20]
  heap->scan_every    = scan_every;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	619a      	str	r2, [r3, #24]

  FREE   = head;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	6a3a      	ldr	r2, [r7, #32]
 800373a:	609a      	str	r2, [r3, #8]
  BOTTOM = head;
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	601a      	str	r2, [r3, #0]
  TOP    = head;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	6a3a      	ldr	r2, [r7, #32]
 8003746:	605a      	str	r2, [r3, #4]
  SCAN   = head;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	6a3a      	ldr	r2, [r7, #32]
 800374c:	60da      	str	r2, [r3, #12]

  // Close the circle.
  tail->next = head;
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	6a3a      	ldr	r2, [r7, #32]
 8003752:	601a      	str	r2, [r3, #0]
  head->prev = tail;
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	605a      	str	r2, [r3, #4]

  return heap;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800375c:	4618      	mov	r0, r3
 800375e:	3728      	adds	r7, #40	; 0x28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <TmHeap_print>:

void
TmHeap_print(TmHeap *heap)
{
 8003764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003768:	b089      	sub	sp, #36	; 0x24
 800376a:	af04      	add	r7, sp, #16
 800376c:	6078      	str	r0, [r7, #4]
        __asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	60bb      	str	r3, [r7, #8]
    }
 8003780:	bf00      	nop
  portDISABLE_INTERRUPTS();
  fprintf(stderr,
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <TmHeap_print+0xb0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68dc      	ldr	r4, [r3, #12]
    "[HEAP] (%i) (WHITE %i | ECRU %i | GREY %i | BLACK %i)\n\r",
    (int)TmHeap_size(heap),
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f938 	bl	80039fe <TmHeap_size>
 800378e:	ec53 2b10 	vmov	r2, r3, d0
  fprintf(stderr,
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f7fc ff3f 	bl	8000618 <__aeabi_d2iz>
 800379a:	4680      	mov	r8, r0
    (int)TmHeap_white_size(heap),
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f949 	bl	8003a34 <TmHeap_white_size>
 80037a2:	ec53 2b10 	vmov	r2, r3, d0
  fprintf(stderr,
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f7fc ff35 	bl	8000618 <__aeabi_d2iz>
 80037ae:	4681      	mov	r9, r0
    (int)TmHeap_ecru_size(heap),
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f972 	bl	8003a9a <TmHeap_ecru_size>
 80037b6:	ec53 2b10 	vmov	r2, r3, d0
  fprintf(stderr,
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f7fc ff2b 	bl	8000618 <__aeabi_d2iz>
 80037c2:	4605      	mov	r5, r0
    (int)TmHeap_grey_size(heap),
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f98e 	bl	8003ae6 <TmHeap_grey_size>
 80037ca:	ec53 2b10 	vmov	r2, r3, d0
  fprintf(stderr,
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	f7fc ff21 	bl	8000618 <__aeabi_d2iz>
 80037d6:	4606      	mov	r6, r0
    (int)TmHeap_black_size(heap)
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f9aa 	bl	8003b32 <TmHeap_black_size>
 80037de:	ec53 2b10 	vmov	r2, r3, d0
  fprintf(stderr,
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	f7fc ff17 	bl	8000618 <__aeabi_d2iz>
 80037ea:	4603      	mov	r3, r0
 80037ec:	9302      	str	r3, [sp, #8]
 80037ee:	9601      	str	r6, [sp, #4]
 80037f0:	9500      	str	r5, [sp, #0]
 80037f2:	464b      	mov	r3, r9
 80037f4:	4642      	mov	r2, r8
 80037f6:	4908      	ldr	r1, [pc, #32]	; (8003818 <TmHeap_print+0xb4>)
 80037f8:	4620      	mov	r0, r4
 80037fa:	f004 f9bf 	bl	8007b7c <fiprintf>
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f383 8811 	msr	BASEPRI, r3
    }
 8003808:	bf00      	nop
    );
  portENABLE_INTERRUPTS();
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003814:	20000014 	.word	0x20000014
 8003818:	0800a81c 	.word	0x0800a81c

0800381c <TmHeap_print_all>:

void
TmHeap_print_all(TmHeap *heap)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
        __asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	613b      	str	r3, [r7, #16]
    }
 8003836:	bf00      	nop
  portDISABLE_INTERRUPTS();

  TmHeap_print(heap);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff93 	bl	8003764 <TmHeap_print>

  TmCell *ptr = TOP;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	617b      	str	r3, [r7, #20]
  do {
    fprintf(stderr,"* %p", ptr);
 8003844:	4b30      	ldr	r3, [pc, #192]	; (8003908 <TmHeap_print_all+0xec>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	492f      	ldr	r1, [pc, #188]	; (800390c <TmHeap_print_all+0xf0>)
 800384e:	4618      	mov	r0, r3
 8003850:	f004 f994 	bl	8007b7c <fiprintf>
    if(ptr == TOP) fprintf(stderr, " (TOP)");
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	429a      	cmp	r2, r3
 800385c:	d107      	bne.n	800386e <TmHeap_print_all+0x52>
 800385e:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <TmHeap_print_all+0xec>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2206      	movs	r2, #6
 8003866:	2101      	movs	r1, #1
 8003868:	4829      	ldr	r0, [pc, #164]	; (8003910 <TmHeap_print_all+0xf4>)
 800386a:	f004 f9f9 	bl	8007c60 <fwrite>
    if(ptr == BOTTOM) fprintf(stderr," (BOTTOM)");
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <TmHeap_print_all+0x6c>
 8003878:	4b23      	ldr	r3, [pc, #140]	; (8003908 <TmHeap_print_all+0xec>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2209      	movs	r2, #9
 8003880:	2101      	movs	r1, #1
 8003882:	4824      	ldr	r0, [pc, #144]	; (8003914 <TmHeap_print_all+0xf8>)
 8003884:	f004 f9ec 	bl	8007c60 <fwrite>
    if(ptr == FREE) fprintf(stderr, " (FREE)");
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	429a      	cmp	r2, r3
 8003890:	d107      	bne.n	80038a2 <TmHeap_print_all+0x86>
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <TmHeap_print_all+0xec>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	2207      	movs	r2, #7
 800389a:	2101      	movs	r1, #1
 800389c:	481e      	ldr	r0, [pc, #120]	; (8003918 <TmHeap_print_all+0xfc>)
 800389e:	f004 f9df 	bl	8007c60 <fwrite>
    if(ptr == SCAN) fprintf(stderr, " (SCAN)");
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d107      	bne.n	80038bc <TmHeap_print_all+0xa0>
 80038ac:	4b16      	ldr	r3, [pc, #88]	; (8003908 <TmHeap_print_all+0xec>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2207      	movs	r2, #7
 80038b4:	2101      	movs	r1, #1
 80038b6:	4819      	ldr	r0, [pc, #100]	; (800391c <TmHeap_print_all+0x100>)
 80038b8:	f004 f9d2 	bl	8007c60 <fwrite>
    fprintf(stderr, "\n\r");
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <TmHeap_print_all+0xec>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2202      	movs	r2, #2
 80038c4:	2101      	movs	r1, #1
 80038c6:	4816      	ldr	r0, [pc, #88]	; (8003920 <TmHeap_print_all+0x104>)
 80038c8:	f004 f9ca 	bl	8007c60 <fwrite>
  } while((ptr = ptr->next) && ptr != TOP);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d004      	beq.n	80038e2 <TmHeap_print_all+0xc6>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d1b0      	bne.n	8003844 <TmHeap_print_all+0x28>
  fprintf(stderr, "[END HEAP]\n\r");
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <TmHeap_print_all+0xec>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	220c      	movs	r2, #12
 80038ea:	2101      	movs	r1, #1
 80038ec:	480d      	ldr	r0, [pc, #52]	; (8003924 <TmHeap_print_all+0x108>)
 80038ee:	f004 f9b7 	bl	8007c60 <fwrite>
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
        __asm volatile
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f383 8811 	msr	BASEPRI, r3
    }
 80038fc:	bf00      	nop
  portENABLE_INTERRUPTS();
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000014 	.word	0x20000014
 800390c:	0800a854 	.word	0x0800a854
 8003910:	0800a85c 	.word	0x0800a85c
 8003914:	0800a864 	.word	0x0800a864
 8003918:	0800a870 	.word	0x0800a870
 800391c:	0800a878 	.word	0x0800a878
 8003920:	0800a880 	.word	0x0800a880
 8003924:	0800a884 	.word	0x0800a884

08003928 <TmHeap_grow>:

void
TmHeap_grow(TmHeap *heap, int size)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  if(size < 1) return;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	dd40      	ble.n	80039ba <TmHeap_grow+0x92>

  TmChunk chunk = TmChunk_new(size);
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	6839      	ldr	r1, [r7, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f91e 	bl	8003b80 <TmChunk_new>
  TmCell *head = chunk.head;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	61fb      	str	r3, [r7, #28]
  TmCell *tail = chunk.tail;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	61bb      	str	r3, [r7, #24]

  // Save a reference to the chunk to deallocate it later
  Tm_DArray_push(heap->chunks, head);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	69f9      	ldr	r1, [r7, #28]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fcf0 	bl	8003338 <Tm_DArray_push>

  // Put the new chunk before the current free.
  TmCell *oldfree  = FREE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	617b      	str	r3, [r7, #20]
  TmCell *previous = oldfree->prev;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	613b      	str	r3, [r7, #16]

  // Attach tail
  oldfree->prev = tail;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	605a      	str	r2, [r3, #4]
  tail->next    = oldfree;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	601a      	str	r2, [r3, #0]

  // Attach head
  previous->next = head;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	601a      	str	r2, [r3, #0]
  head->prev     = previous;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	605a      	str	r2, [r3, #4]

  if(BOTTOM == FREE) BOTTOM = head;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	429a      	cmp	r2, r3
 8003986:	d102      	bne.n	800398e <TmHeap_grow+0x66>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	601a      	str	r2, [r3, #0]
  if(TOP    == FREE) TOP = head;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	429a      	cmp	r2, r3
 8003998:	d102      	bne.n	80039a0 <TmHeap_grow+0x78>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	605a      	str	r2, [r3, #4]
  if(SCAN   == FREE) SCAN = head;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d102      	bne.n	80039b2 <TmHeap_grow+0x8a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	60da      	str	r2, [r3, #12]
  FREE = head;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e000      	b.n	80039bc <TmHeap_grow+0x94>
  if(size < 1) return;
 80039ba:	bf00      	nop
}
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <TmHeap_distance_between>:

static inline int
TmHeap_distance_between(TmCell *a, TmCell *b)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  int count = 1;
 80039cc:	2301      	movs	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
  TmCell *ptr = a;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60bb      	str	r3, [r7, #8]
  while((ptr = ptr->next) && ptr != b) count++;
 80039d4:	e002      	b.n	80039dc <TmHeap_distance_between+0x1a>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3301      	adds	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60bb      	str	r3, [r7, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <TmHeap_distance_between+0x2e>
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1f2      	bne.n	80039d6 <TmHeap_distance_between+0x14>

  return count;
 80039f0:	68fb      	ldr	r3, [r7, #12]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <TmHeap_size>:


double
TmHeap_size(TmHeap *heap)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  return TmHeap_distance_between(TOP, TOP);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4610      	mov	r0, r2
 8003a12:	f7ff ffd6 	bl	80039c2 <TmHeap_distance_between>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fd93 	bl	8000544 <__aeabi_i2d>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a26:	eeb0 0a47 	vmov.f32	s0, s14
 8003a2a:	eef0 0a67 	vmov.f32	s1, s15
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <TmHeap_white_size>:

double
TmHeap_white_size(TmHeap *heap)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  if(FREE == BOTTOM &&
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d111      	bne.n	8003a6c <TmHeap_white_size+0x38>
     FREE == TOP &&
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
  if(FREE == BOTTOM &&
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d10b      	bne.n	8003a6c <TmHeap_white_size+0x38>
     FREE == SCAN) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
     FREE == TOP &&
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d105      	bne.n	8003a6c <TmHeap_white_size+0x38>
    return TmHeap_size(heap);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ffcc 	bl	80039fe <TmHeap_size>
 8003a66:	ec53 2b10 	vmov	r2, r3, d0
 8003a6a:	e00d      	b.n	8003a88 <TmHeap_white_size+0x54>
  }

  return TmHeap_distance_between(FREE, BOTTOM);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f7ff ffa3 	bl	80039c2 <TmHeap_distance_between>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fc fd60 	bl	8000544 <__aeabi_i2d>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	ec43 2b17 	vmov	d7, r2, r3
}
 8003a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a90:	eef0 0a67 	vmov.f32	s1, s15
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <TmHeap_ecru_size>:

double
TmHeap_ecru_size(TmHeap *heap)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  if(BOTTOM == TOP) return 0;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d104      	bne.n	8003ab8 <TmHeap_ecru_size+0x1e>
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e00d      	b.n	8003ad4 <TmHeap_ecru_size+0x3a>
  return TmHeap_distance_between(BOTTOM, TOP);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7ff ff7d 	bl	80039c2 <TmHeap_distance_between>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc fd3a 	bl	8000544 <__aeabi_i2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	ec43 2b17 	vmov	d7, r2, r3
}
 8003ad8:	eeb0 0a47 	vmov.f32	s0, s14
 8003adc:	eef0 0a67 	vmov.f32	s1, s15
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <TmHeap_grey_size>:

double
TmHeap_grey_size(TmHeap *heap)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  if(TOP == SCAN) return 0;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d104      	bne.n	8003b04 <TmHeap_grey_size+0x1e>
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	e00d      	b.n	8003b20 <TmHeap_grey_size+0x3a>
  return TmHeap_distance_between(TOP, SCAN);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f7ff ff57 	bl	80039c2 <TmHeap_distance_between>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fc fd14 	bl	8000544 <__aeabi_i2d>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b24:	eeb0 0a47 	vmov.f32	s0, s14
 8003b28:	eef0 0a67 	vmov.f32	s1, s15
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <TmHeap_black_size>:

double
TmHeap_black_size(TmHeap *heap)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  if(SCAN == FREE) return 0;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d104      	bne.n	8003b50 <TmHeap_black_size+0x1e>
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e00d      	b.n	8003b6c <TmHeap_black_size+0x3a>
  return TmHeap_distance_between(SCAN, FREE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f7ff ff31 	bl	80039c2 <TmHeap_distance_between>
 8003b60:	4603      	mov	r3, r0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fcee 	bl	8000544 <__aeabi_i2d>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b70:	eeb0 0a47 	vmov.f32	s0, s14
 8003b74:	eef0 0a67 	vmov.f32	s1, s15
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <TmChunk_new>:
  free(heap);
}

TmChunk
TmChunk_new(int size)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b08f      	sub	sp, #60	; 0x3c
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  TmCell *memory = calloc(size, sizeof(TmCell));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2110      	movs	r1, #16
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 ffd2 	bl	8007b38 <calloc>
 8003b94:	4603      	mov	r3, r0
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
  check_mem(memory);
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d133      	bne.n	8003c06 <TmChunk_new+0x86>
        __asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	617b      	str	r3, [r7, #20]
    }
 8003bb0:	bf00      	nop
 8003bb2:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <TmChunk_new+0x108>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68dc      	ldr	r4, [r3, #12]
 8003bb8:	f003 ffc6 	bl	8007b48 <__errno>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <TmChunk_new+0x56>
 8003bc4:	f003 ffc0 	bl	8007b48 <__errno>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f004 fedd 	bl	800898c <strerror>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	e000      	b.n	8003bd8 <TmChunk_new+0x58>
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <TmChunk_new+0x10c>)
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8003bde:	4a2c      	ldr	r2, [pc, #176]	; (8003c90 <TmChunk_new+0x110>)
 8003be0:	492c      	ldr	r1, [pc, #176]	; (8003c94 <TmChunk_new+0x114>)
 8003be2:	4620      	mov	r0, r4
 8003be4:	f003 ffca 	bl	8007b7c <fiprintf>
 8003be8:	2300      	movs	r3, #0
 8003bea:	613b      	str	r3, [r7, #16]
        __asm volatile
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f383 8811 	msr	BASEPRI, r3
    }
 8003bf2:	bf00      	nop
 8003bf4:	f003 ffa8 	bl	8007b48 <__errno>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	bf00      	nop

  TmChunk chunk = { .head = memory, .tail = tail };
  return chunk;

error:
  exit(EXIT_FAILURE);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f003 ffa7 	bl	8007b54 <exit>
  TmCell *ptr    = memory;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(int i=0; i < size; i++) {
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0e:	e01c      	b.n	8003c4a <TmChunk_new+0xca>
    if(i>0) {
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	dd07      	ble.n	8003c26 <TmChunk_new+0xa6>
      TmCell *prev = ptr; prev--;
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	61fb      	str	r3, [r7, #28]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	3b10      	subs	r3, #16
 8003c1e:	61fb      	str	r3, [r7, #28]
      ptr->prev = prev;
 8003c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	605a      	str	r2, [r3, #4]
    if(i<size) {
 8003c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	da07      	bge.n	8003c3e <TmChunk_new+0xbe>
      TmCell *next = ptr; next++;
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	3310      	adds	r3, #16
 8003c36:	61bb      	str	r3, [r7, #24]
      ptr->next = next;
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	601a      	str	r2, [r3, #0]
    ptr++;
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	3310      	adds	r3, #16
 8003c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  for(int i=0; i < size; i++) {
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	3301      	adds	r3, #1
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	dbde      	blt.n	8003c10 <TmChunk_new+0x90>
  TmCell *tail = --ptr;
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	3b10      	subs	r3, #16
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5a:	623b      	str	r3, [r7, #32]
  memory->prev = NULL;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	2200      	movs	r2, #0
 8003c60:	605a      	str	r2, [r3, #4]
  tail->next   = NULL;
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
  TmChunk chunk = { .head = memory, .tail = tail };
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	60fb      	str	r3, [r7, #12]
  return chunk;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	461a      	mov	r2, r3
 8003c74:	f107 0308 	add.w	r3, r7, #8
 8003c78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c7c:	e882 0003 	stmia.w	r2, {r0, r1}

}
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	3734      	adds	r7, #52	; 0x34
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd90      	pop	{r4, r7, pc}
 8003c88:	20000014 	.word	0x20000014
 8003c8c:	0800a8d0 	.word	0x0800a8d0
 8003c90:	0800a894 	.word	0x0800a894
 8003c94:	0800a8d8 	.word	0x0800a8d8

08003c98 <make_grey_if_ecru>:

static inline void
make_grey_if_ecru(TmHeap *heap, TmObjectHeader *o)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  TmCell *cell = o->cell;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]
  if(cell->ecru) {
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	7b1b      	ldrb	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <make_grey_if_ecru+0x20>
    // Unsnap the cell from the ecru area,
    // and put it in the gray area.
    make_grey(heap, cell);
 8003cb0:	68f9      	ldr	r1, [r7, #12]
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff fcdf 	bl	8003676 <make_grey>
  }
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <Tm_scan>:

void
Tm_scan(TmHeap *heap)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
        __asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	60bb      	str	r3, [r7, #8]
    }
 8003cda:	bf00      	nop
  debug("[GC] Scan");
 8003cdc:	4b14      	ldr	r3, [pc, #80]	; (8003d30 <Tm_scan+0x70>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68d8      	ldr	r0, [r3, #12]
 8003ce2:	f44f 739a 	mov.w	r3, #308	; 0x134
 8003ce6:	4a13      	ldr	r2, [pc, #76]	; (8003d34 <Tm_scan+0x74>)
 8003ce8:	4913      	ldr	r1, [pc, #76]	; (8003d38 <Tm_scan+0x78>)
 8003cea:	f003 ff47 	bl	8007b7c <fiprintf>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f383 8811 	msr	BASEPRI, r3
    }
 8003cf8:	bf00      	nop
  // If scan == top, the collection has finished
  if(SCAN == TOP) return;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d010      	beq.n	8003d28 <Tm_scan+0x68>

  // Move the scan pointer backwards, converting the scanned grey cell into a
  // black cell.
  SCAN = SCAN->prev;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	60da      	str	r2, [r3, #12]
  heap->scan_pointers(heap, SCAN->value, make_grey_if_ecru);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	68d2      	ldr	r2, [r2, #12]
 8003d18:	6891      	ldr	r1, [r2, #8]
 8003d1a:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <Tm_scan+0x7c>)
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	4798      	blx	r3
  TmHeap_print(heap);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff fd1f 	bl	8003764 <TmHeap_print>
 8003d26:	e000      	b.n	8003d2a <Tm_scan+0x6a>
  if(SCAN == TOP) return;
 8003d28:	bf00      	nop
}
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20000014 	.word	0x20000014
 8003d34:	0800a894 	.word	0x0800a894
 8003d38:	0800a908 	.word	0x0800a908
 8003d3c:	08003c99 	.word	0x08003c99

08003d40 <Tm_flip>:

void
Tm_flip(TmHeap *heap)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b09a      	sub	sp, #104	; 0x68
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	6078      	str	r0, [r7, #4]
        __asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
    }
 8003d5a:	bf00      	nop
  debug("[GC] Flip");
 8003d5c:	4b95      	ldr	r3, [pc, #596]	; (8003fb4 <Tm_flip+0x274>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68d8      	ldr	r0, [r3, #12]
 8003d62:	f44f 73a1 	mov.w	r3, #322	; 0x142
 8003d66:	4a94      	ldr	r2, [pc, #592]	; (8003fb8 <Tm_flip+0x278>)
 8003d68:	4994      	ldr	r1, [pc, #592]	; (8003fbc <Tm_flip+0x27c>)
 8003d6a:	f003 ff07 	bl	8007b7c <fiprintf>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	f383 8811 	msr	BASEPRI, r3
    }
 8003d78:	bf00      	nop
  TmHeap_print_all(heap);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fd4e 	bl	800381c <TmHeap_print_all>
        __asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
 8003d92:	bf00      	nop

  // Scan all the grey cells before flipping.
  debug("[GC] Flip - 1. Scan all grey");
 8003d94:	4b87      	ldr	r3, [pc, #540]	; (8003fb4 <Tm_flip+0x274>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68d8      	ldr	r0, [r3, #12]
 8003d9a:	f44f 73a3 	mov.w	r3, #326	; 0x146
 8003d9e:	4a86      	ldr	r2, [pc, #536]	; (8003fb8 <Tm_flip+0x278>)
 8003da0:	4987      	ldr	r1, [pc, #540]	; (8003fc0 <Tm_flip+0x280>)
 8003da2:	f003 feeb 	bl	8007b7c <fiprintf>
 8003da6:	2300      	movs	r3, #0
 8003da8:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	f383 8811 	msr	BASEPRI, r3
    }
 8003db0:	bf00      	nop
  while(SCAN != TOP) {
 8003db2:	e002      	b.n	8003dba <Tm_flip+0x7a>
	  Tm_scan(heap);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ff83 	bl	8003cc0 <Tm_scan>
  while(SCAN != TOP) {
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d1f6      	bne.n	8003db4 <Tm_flip+0x74>
  }
  TmHeap_print_all(heap);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fd28 	bl	800381c <TmHeap_print_all>
        __asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8003dde:	bf00      	nop

  // Make all the ecru into white and release them
  debug("[GC] Flip - 2. Make all ecru into white");
 8003de0:	4b74      	ldr	r3, [pc, #464]	; (8003fb4 <Tm_flip+0x274>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68d8      	ldr	r0, [r3, #12]
 8003de6:	f240 134d 	movw	r3, #333	; 0x14d
 8003dea:	4a73      	ldr	r2, [pc, #460]	; (8003fb8 <Tm_flip+0x278>)
 8003dec:	4975      	ldr	r1, [pc, #468]	; (8003fc4 <Tm_flip+0x284>)
 8003dee:	f003 fec5 	bl	8007b7c <fiprintf>
 8003df2:	2300      	movs	r3, #0
 8003df4:	633b      	str	r3, [r7, #48]	; 0x30
        __asm volatile
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	f383 8811 	msr	BASEPRI, r3
    }
 8003dfc:	bf00      	nop
  TmCell *ptr = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	65fb      	str	r3, [r7, #92]	; 0x5c
  ITERATE(BOTTOM, TOP, ptr) {
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e08:	e00b      	b.n	8003e22 <Tm_flip+0xe2>
    ptr->ecru = 0;
 8003e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	731a      	strb	r2, [r3, #12]
    RELEASE(ptr->value);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e16:	6892      	ldr	r2, [r2, #8]
 8003e18:	4610      	mov	r0, r2
 8003e1a:	4798      	blx	r3
    ptr = ptr->next;
 8003e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	65fb      	str	r3, [r7, #92]	; 0x5c
  ITERATE(BOTTOM, TOP, ptr) {
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1ee      	bne.n	8003e0a <Tm_flip+0xca>
  }
  BOTTOM = TOP;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	601a      	str	r2, [r3, #0]
  TmHeap_print_all(heap);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fcf1 	bl	800381c <TmHeap_print_all>

  /*
   * If there are still no slots in the white list,
   * grow the heap.
   */
  if(FREE->next == BOTTOM) {
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d121      	bne.n	8003e8c <Tm_flip+0x14c>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003e5a:	bf00      	nop
	  debug("[GC] Flip - 3. Grow the heap");
 8003e5c:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <Tm_flip+0x274>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68d8      	ldr	r0, [r3, #12]
 8003e62:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8003e66:	4a54      	ldr	r2, [pc, #336]	; (8003fb8 <Tm_flip+0x278>)
 8003e68:	4957      	ldr	r1, [pc, #348]	; (8003fc8 <Tm_flip+0x288>)
 8003e6a:	f003 fe87 	bl	8007b7c <fiprintf>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
        __asm volatile
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	f383 8811 	msr	BASEPRI, r3
    }
 8003e78:	bf00      	nop
	  TmHeap_grow(heap, heap->growth_rate);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fd51 	bl	8003928 <TmHeap_grow>
	  TmHeap_print_all(heap);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff fcc8 	bl	800381c <TmHeap_print_all>
        __asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	61fb      	str	r3, [r7, #28]
    }
 8003e9e:	bf00      	nop
  }

  // Make all black into ecru.
  debug("[GC] Flip - 4. Make all black into ecru");
 8003ea0:	4b44      	ldr	r3, [pc, #272]	; (8003fb4 <Tm_flip+0x274>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68d8      	ldr	r0, [r3, #12]
 8003ea6:	f44f 73b1 	mov.w	r3, #354	; 0x162
 8003eaa:	4a43      	ldr	r2, [pc, #268]	; (8003fb8 <Tm_flip+0x278>)
 8003eac:	4947      	ldr	r1, [pc, #284]	; (8003fcc <Tm_flip+0x28c>)
 8003eae:	f003 fe65 	bl	8007b7c <fiprintf>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
        __asm volatile
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f383 8811 	msr	BASEPRI, r3
    }
 8003ebc:	bf00      	nop
  ITERATE(SCAN, FREE, ptr) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec4:	e008      	b.n	8003ed8 <Tm_flip+0x198>
    TmCell *next = ptr->next;
 8003ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	647b      	str	r3, [r7, #68]	; 0x44
    make_ecru(heap, ptr);
 8003ecc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fb9d 	bl	800360e <make_ecru>
    ptr = next;
 8003ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
  ITERATE(SCAN, FREE, ptr) {
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d1f1      	bne.n	8003ec6 <Tm_flip+0x186>
  }
  TmHeap_print_all(heap);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fc9a 	bl	800381c <TmHeap_print_all>
        __asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	617b      	str	r3, [r7, #20]
    }
 8003efa:	bf00      	nop

  // Add all the rootset into the grey set.
  debug("[GC] Flip - 5. Make all roots into grey");
 8003efc:	4b2d      	ldr	r3, [pc, #180]	; (8003fb4 <Tm_flip+0x274>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68d8      	ldr	r0, [r3, #12]
 8003f02:	f240 136b 	movw	r3, #363	; 0x16b
 8003f06:	4a2c      	ldr	r2, [pc, #176]	; (8003fb8 <Tm_flip+0x278>)
 8003f08:	4931      	ldr	r1, [pc, #196]	; (8003fd0 <Tm_flip+0x290>)
 8003f0a:	f003 fe37 	bl	8007b7c <fiprintf>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
        __asm volatile
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f383 8811 	msr	BASEPRI, r3
    }
 8003f18:	bf00      	nop
  Tm_DArray *rootset = heap->state->rootset_fn(heap->state);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f24:	4610      	mov	r0, r2
 8003f26:	4798      	blx	r3
 8003f28:	6578      	str	r0, [r7, #84]	; 0x54

  int count = Tm_DArray_count(rootset);
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d002      	beq.n	8003f36 <Tm_flip+0x1f6>
 8003f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	e000      	b.n	8003f38 <Tm_flip+0x1f8>
 8003f36:	2300      	movs	r3, #0
 8003f38:	653b      	str	r3, [r7, #80]	; 0x50
        __asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	60fb      	str	r3, [r7, #12]
    }
 8003f4c:	bf00      	nop
  debug("[GC] Adding rootset (%i)", count);
 8003f4e:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <Tm_flip+0x274>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68d8      	ldr	r0, [r3, #12]
 8003f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	f240 136f 	movw	r3, #367	; 0x16f
 8003f5c:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <Tm_flip+0x278>)
 8003f5e:	491d      	ldr	r1, [pc, #116]	; (8003fd4 <Tm_flip+0x294>)
 8003f60:	f003 fe0c 	bl	8007b7c <fiprintf>
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
        __asm volatile
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f383 8811 	msr	BASEPRI, r3
    }
 8003f6e:	bf00      	nop
  for(int i=0; i < count; i++) {
 8003f70:	2300      	movs	r3, #0
 8003f72:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f74:	e010      	b.n	8003f98 <Tm_flip+0x258>
    TmObjectHeader *o = (TmObjectHeader*)(rootset->contents[i]);
 8003f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f78:	691a      	ldr	r2, [r3, #16]
 8003f7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	64fb      	str	r3, [r7, #76]	; 0x4c
    TmCell *cell = o->cell;
 8003f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
    make_grey(heap, cell);
 8003f8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff fb72 	bl	8003676 <make_grey>
  for(int i=0; i < count; i++) {
 8003f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f94:	3301      	adds	r3, #1
 8003f96:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	dbea      	blt.n	8003f76 <Tm_flip+0x236>
  }

  Tm_DArray_destroy(rootset);
 8003fa0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003fa2:	f7ff f9b2 	bl	800330a <Tm_DArray_destroy>
  TmHeap_print_all(heap);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fc38 	bl	800381c <TmHeap_print_all>
}
 8003fac:	bf00      	nop
 8003fae:	3760      	adds	r7, #96	; 0x60
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000014 	.word	0x20000014
 8003fb8:	0800a894 	.word	0x0800a894
 8003fbc:	0800a924 	.word	0x0800a924
 8003fc0:	0800a940 	.word	0x0800a940
 8003fc4:	0800a96c 	.word	0x0800a96c
 8003fc8:	0800a9a4 	.word	0x0800a9a4
 8003fcc:	0800a9d0 	.word	0x0800a9d0
 8003fd0:	0800aa08 	.word	0x0800aa08
 8003fd4:	0800aa40 	.word	0x0800aa40

08003fd8 <Tm_allocate>:

TmObjectHeader*
Tm_allocate(TmHeap *heap)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b08b      	sub	sp, #44	; 0x2c
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	6078      	str	r0, [r7, #4]
  if(heap->allocs >= heap->scan_every) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	db05      	blt.n	8003ff8 <Tm_allocate+0x20>
    heap->allocs = 0;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	615a      	str	r2, [r3, #20]
    Tm_scan(heap);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fe64 	bl	8003cc0 <Tm_scan>

  /*
   * If there are no slots in the white list,
   * force a collection.
   */
  if(FREE->next == BOTTOM) {
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d139      	bne.n	800407a <Tm_allocate+0xa2>
    Tm_flip(heap);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fe9a 	bl	8003d40 <Tm_flip>
    check(FREE != BOTTOM, "Heap full.");
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d130      	bne.n	800407a <Tm_allocate+0xa2>
        __asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	617b      	str	r3, [r7, #20]
    }
 800402a:	bf00      	nop
 800402c:	4b3f      	ldr	r3, [pc, #252]	; (800412c <Tm_allocate+0x154>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68dc      	ldr	r4, [r3, #12]
 8004032:	f003 fd89 	bl	8007b48 <__errno>
 8004036:	4603      	mov	r3, r0
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <Tm_allocate+0x78>
 800403e:	f003 fd83 	bl	8007b48 <__errno>
 8004042:	4603      	mov	r3, r0
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4618      	mov	r0, r3
 8004048:	f004 fca0 	bl	800898c <strerror>
 800404c:	4603      	mov	r3, r0
 800404e:	e000      	b.n	8004052 <Tm_allocate+0x7a>
 8004050:	4b37      	ldr	r3, [pc, #220]	; (8004130 <Tm_allocate+0x158>)
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8004058:	4a36      	ldr	r2, [pc, #216]	; (8004134 <Tm_allocate+0x15c>)
 800405a:	4937      	ldr	r1, [pc, #220]	; (8004138 <Tm_allocate+0x160>)
 800405c:	4620      	mov	r0, r4
 800405e:	f003 fd8d 	bl	8007b7c <fiprintf>
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f383 8811 	msr	BASEPRI, r3
    }
 800406c:	bf00      	nop
 800406e:	f003 fd6b 	bl	8007b48 <__errno>
 8004072:	4603      	mov	r3, r0
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e051      	b.n	800411e <Tm_allocate+0x146>
  }

  TmObjectHeader *header = calloc(1, heap->object_size);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	4619      	mov	r1, r3
 8004080:	2001      	movs	r0, #1
 8004082:	f003 fd59 	bl	8007b38 <calloc>
 8004086:	4603      	mov	r3, r0
 8004088:	61fb      	str	r3, [r7, #28]
  check(header, "Out of memory.");
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d130      	bne.n	80040f2 <Tm_allocate+0x11a>
        __asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60fb      	str	r3, [r7, #12]
    }
 80040a2:	bf00      	nop
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <Tm_allocate+0x154>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68dc      	ldr	r4, [r3, #12]
 80040aa:	f003 fd4d 	bl	8007b48 <__errno>
 80040ae:	4603      	mov	r3, r0
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <Tm_allocate+0xf0>
 80040b6:	f003 fd47 	bl	8007b48 <__errno>
 80040ba:	4603      	mov	r3, r0
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f004 fc64 	bl	800898c <strerror>
 80040c4:	4603      	mov	r3, r0
 80040c6:	e000      	b.n	80040ca <Tm_allocate+0xf2>
 80040c8:	4b19      	ldr	r3, [pc, #100]	; (8004130 <Tm_allocate+0x158>)
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <Tm_allocate+0x15c>)
 80040d2:	491a      	ldr	r1, [pc, #104]	; (800413c <Tm_allocate+0x164>)
 80040d4:	4620      	mov	r0, r4
 80040d6:	f003 fd51 	bl	8007b7c <fiprintf>
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f383 8811 	msr	BASEPRI, r3
    }
 80040e4:	bf00      	nop
 80040e6:	f003 fd2f 	bl	8007b48 <__errno>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	e015      	b.n	800411e <Tm_allocate+0x146>

  TmCell *free = FREE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	61bb      	str	r3, [r7, #24]
  header->cell = free;
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	601a      	str	r2, [r3, #0]
  header->cell->value = header;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69fa      	ldr	r2, [r7, #28]
 8004104:	609a      	str	r2, [r3, #8]

  FREE = FREE->next;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	609a      	str	r2, [r3, #8]

  heap->allocs++;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	615a      	str	r2, [r3, #20]

  return header;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	e002      	b.n	8004124 <Tm_allocate+0x14c>
error:
  exit(EXIT_FAILURE);
 800411e:	2001      	movs	r0, #1
 8004120:	f003 fd18 	bl	8007b54 <exit>
  return NULL;
}
 8004124:	4618      	mov	r0, r3
 8004126:	3724      	adds	r7, #36	; 0x24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd90      	pop	{r4, r7, pc}
 800412c:	20000014 	.word	0x20000014
 8004130:	0800a8d0 	.word	0x0800a8d0
 8004134:	0800a894 	.word	0x0800a894
 8004138:	0800aa68 	.word	0x0800aa68
 800413c:	0800aa90 	.word	0x0800aa90

08004140 <Tm_DArray_get>:
{
 8004140:	b590      	push	{r4, r7, lr}
 8004142:	b087      	sub	sp, #28
 8004144:	af02      	add	r7, sp, #8
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  check(i < array->max, "darray attempt to get past max");
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	db31      	blt.n	80041b8 <Tm_DArray_get+0x78>
        __asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60fb      	str	r3, [r7, #12]
    }
 8004166:	bf00      	nop
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <Tm_DArray_get+0x8c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68dc      	ldr	r4, [r3, #12]
 800416e:	f003 fceb 	bl	8007b48 <__errno>
 8004172:	4603      	mov	r3, r0
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <Tm_DArray_get+0x4c>
 800417a:	f003 fce5 	bl	8007b48 <__errno>
 800417e:	4603      	mov	r3, r0
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f004 fc02 	bl	800898c <strerror>
 8004188:	4603      	mov	r3, r0
 800418a:	e000      	b.n	800418e <Tm_DArray_get+0x4e>
 800418c:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <Tm_DArray_get+0x90>)
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2326      	movs	r3, #38	; 0x26
 8004192:	4a10      	ldr	r2, [pc, #64]	; (80041d4 <Tm_DArray_get+0x94>)
 8004194:	4910      	ldr	r1, [pc, #64]	; (80041d8 <Tm_DArray_get+0x98>)
 8004196:	4620      	mov	r0, r4
 8004198:	f003 fcf0 	bl	8007b7c <fiprintf>
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f383 8811 	msr	BASEPRI, r3
    }
 80041a6:	bf00      	nop
 80041a8:	f003 fcce 	bl	8007b48 <__errno>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	bf00      	nop
  return NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e005      	b.n	80041c4 <Tm_DArray_get+0x84>
  return array->contents[i];
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd90      	pop	{r4, r7, pc}
 80041cc:	20000014 	.word	0x20000014
 80041d0:	0800aabc 	.word	0x0800aabc
 80041d4:	0800aac4 	.word	0x0800aac4
 80041d8:	0800ab2c 	.word	0x0800ab2c

080041dc <Hashmap_node_create>:
#include <treadmill/gc_hashmap.h>
#include <treadmill/_dbg.h>


static inline HashmapNode *Hashmap_node_create(int hash, Object *obj_key, Object *obj_data)
{
 80041dc:	b590      	push	{r4, r7, lr}
 80041de:	b08b      	sub	sp, #44	; 0x2c
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  HashmapNode *node = calloc(1, sizeof(HashmapNode));
 80041e8:	210c      	movs	r1, #12
 80041ea:	2001      	movs	r0, #1
 80041ec:	f003 fca4 	bl	8007b38 <calloc>
 80041f0:	4603      	mov	r3, r0
 80041f2:	61fb      	str	r3, [r7, #28]
  check_mem(node);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d131      	bne.n	800425e <Hashmap_node_create+0x82>
        __asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	61bb      	str	r3, [r7, #24]
    }
 800420c:	bf00      	nop
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <Hashmap_node_create+0xa0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68dc      	ldr	r4, [r3, #12]
 8004214:	f003 fc98 	bl	8007b48 <__errno>
 8004218:	4603      	mov	r3, r0
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <Hashmap_node_create+0x56>
 8004220:	f003 fc92 	bl	8007b48 <__errno>
 8004224:	4603      	mov	r3, r0
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f004 fbaf 	bl	800898c <strerror>
 800422e:	4603      	mov	r3, r0
 8004230:	e000      	b.n	8004234 <Hashmap_node_create+0x58>
 8004232:	4b13      	ldr	r3, [pc, #76]	; (8004280 <Hashmap_node_create+0xa4>)
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2318      	movs	r3, #24
 8004238:	4a12      	ldr	r2, [pc, #72]	; (8004284 <Hashmap_node_create+0xa8>)
 800423a:	4913      	ldr	r1, [pc, #76]	; (8004288 <Hashmap_node_create+0xac>)
 800423c:	4620      	mov	r0, r4
 800423e:	f003 fc9d 	bl	8007b7c <fiprintf>
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f383 8811 	msr	BASEPRI, r3
    }
 800424c:	bf00      	nop
 800424e:	f003 fc7b 	bl	8007b48 <__errno>
 8004252:	4603      	mov	r3, r0
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	bf00      	nop
  node->hash = hash;

  return node;

error:
  return NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	e009      	b.n	8004272 <Hashmap_node_create+0x96>
  node->key = obj_key;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	601a      	str	r2, [r3, #0]
  node->data = obj_data;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	605a      	str	r2, [r3, #4]
  node->hash = hash;
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	609a      	str	r2, [r3, #8]
  return node;
 8004270:	69fb      	ldr	r3, [r7, #28]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3724      	adds	r7, #36	; 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	20000014 	.word	0x20000014
 8004280:	0800aabc 	.word	0x0800aabc
 8004284:	0800ab68 	.word	0x0800ab68
 8004288:	0800ab84 	.word	0x0800ab84

0800428c <Hashmap_find_bucket>:

static inline Tm_DArray *Hashmap_find_bucket(Hashmap *map, void *key,
  int create, uint32_t *hash_out)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b08f      	sub	sp, #60	; 0x3c
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  uint32_t hash = map->hash(key);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	68b8      	ldr	r0, [r7, #8]
 80042a0:	4798      	blx	r3
 80042a2:	62b8      	str	r0, [r7, #40]	; 0x28
  int bucket_n = hash % DEFAULT_NUMBER_OF_BUCKETS;
 80042a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <Hashmap_find_bucket+0x144>)
 80042a8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	2164      	movs	r1, #100	; 0x64
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
  check(bucket_n >= 0, "Invalid bucket found: %d", bucket_n);
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	da31      	bge.n	8004322 <Hashmap_find_bucket+0x96>
        __asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	623b      	str	r3, [r7, #32]
    }
 80042d0:	bf00      	nop
 80042d2:	4b40      	ldr	r3, [pc, #256]	; (80043d4 <Hashmap_find_bucket+0x148>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68dc      	ldr	r4, [r3, #12]
 80042d8:	f003 fc36 	bl	8007b48 <__errno>
 80042dc:	4603      	mov	r3, r0
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <Hashmap_find_bucket+0x6a>
 80042e4:	f003 fc30 	bl	8007b48 <__errno>
 80042e8:	4603      	mov	r3, r0
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 fb4d 	bl	800898c <strerror>
 80042f2:	4603      	mov	r3, r0
 80042f4:	e000      	b.n	80042f8 <Hashmap_find_bucket+0x6c>
 80042f6:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <Hashmap_find_bucket+0x14c>)
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	9201      	str	r2, [sp, #4]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	2329      	movs	r3, #41	; 0x29
 8004300:	4a36      	ldr	r2, [pc, #216]	; (80043dc <Hashmap_find_bucket+0x150>)
 8004302:	4937      	ldr	r1, [pc, #220]	; (80043e0 <Hashmap_find_bucket+0x154>)
 8004304:	4620      	mov	r0, r4
 8004306:	f003 fc39 	bl	8007b7c <fiprintf>
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
        __asm volatile
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f383 8811 	msr	BASEPRI, r3
    }
 8004314:	bf00      	nop
 8004316:	f003 fc17 	bl	8007b48 <__errno>
 800431a:	4603      	mov	r3, r0
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e050      	b.n	80043c4 <Hashmap_find_bucket+0x138>
  *hash_out = hash;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004326:	601a      	str	r2, [r3, #0]

  Tm_DArray *bucket = Tm_DArray_get(map->buckets, bucket_n);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff06 	bl	8004140 <Tm_DArray_get>
 8004334:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (!bucket && create) {
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d141      	bne.n	80043c0 <Hashmap_find_bucket+0x134>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d03e      	beq.n	80043c0 <Hashmap_find_bucket+0x134>
    bucket = Tm_DArray_create(sizeof(HashmapNode *), DEFAULT_NUMBER_OF_BUCKETS);
 8004342:	2164      	movs	r1, #100	; 0x64
 8004344:	2004      	movs	r0, #4
 8004346:	f7fe fe05 	bl	8002f54 <Tm_DArray_create>
 800434a:	62f8      	str	r0, [r7, #44]	; 0x2c
    check_mem(bucket);
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d12f      	bne.n	80043b2 <Hashmap_find_bucket+0x126>
        __asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	61bb      	str	r3, [r7, #24]
    }
 8004364:	bf00      	nop
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <Hashmap_find_bucket+0x148>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68dc      	ldr	r4, [r3, #12]
 800436c:	f003 fbec 	bl	8007b48 <__errno>
 8004370:	4603      	mov	r3, r0
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <Hashmap_find_bucket+0xfe>
 8004378:	f003 fbe6 	bl	8007b48 <__errno>
 800437c:	4603      	mov	r3, r0
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f004 fb03 	bl	800898c <strerror>
 8004386:	4603      	mov	r3, r0
 8004388:	e000      	b.n	800438c <Hashmap_find_bucket+0x100>
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <Hashmap_find_bucket+0x14c>)
 800438c:	9300      	str	r3, [sp, #0]
 800438e:	2330      	movs	r3, #48	; 0x30
 8004390:	4a12      	ldr	r2, [pc, #72]	; (80043dc <Hashmap_find_bucket+0x150>)
 8004392:	4914      	ldr	r1, [pc, #80]	; (80043e4 <Hashmap_find_bucket+0x158>)
 8004394:	4620      	mov	r0, r4
 8004396:	f003 fbf1 	bl	8007b7c <fiprintf>
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
        __asm volatile
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f383 8811 	msr	BASEPRI, r3
    }
 80043a4:	bf00      	nop
 80043a6:	f003 fbcf 	bl	8007b48 <__errno>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e008      	b.n	80043c4 <Hashmap_find_bucket+0x138>
    Tm_DArray_set(map->buckets, bucket_n, bucket);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff f85a 	bl	8003474 <Tm_DArray_set>
  }

  return bucket;
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	e000      	b.n	80043c6 <Hashmap_find_bucket+0x13a>

error:
  return NULL;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3734      	adds	r7, #52	; 0x34
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd90      	pop	{r4, r7, pc}
 80043ce:	bf00      	nop
 80043d0:	51eb851f 	.word	0x51eb851f
 80043d4:	20000014 	.word	0x20000014
 80043d8:	0800aabc 	.word	0x0800aabc
 80043dc:	0800ab68 	.word	0x0800ab68
 80043e0:	0800abb4 	.word	0x0800abb4
 80043e4:	0800ab84 	.word	0x0800ab84

080043e8 <gc_Hashmap_set>:

int gc_Hashmap_set(TmHeap *heap, Object *obj_map, char *key, char *data)
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b095      	sub	sp, #84	; 0x54
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  Hashmap *map = OBJ2HASH(obj_map);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	647b      	str	r3, [r7, #68]	; 0x44

  uint32_t hash = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
  Tm_DArray *bucket = Hashmap_find_bucket(map, key, 1, &hash);
 8004400:	f107 0310 	add.w	r3, r7, #16
 8004404:	2201      	movs	r2, #1
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800440a:	f7ff ff3f 	bl	800428c <Hashmap_find_bucket>
 800440e:	6438      	str	r0, [r7, #64]	; 0x40
  check(bucket, "Error can't create bucket.");
 8004410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d12f      	bne.n	8004476 <gc_Hashmap_set+0x8e>
        __asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	633b      	str	r3, [r7, #48]	; 0x30
    }
 8004428:	bf00      	nop
 800442a:	4b72      	ldr	r3, [pc, #456]	; (80045f4 <gc_Hashmap_set+0x20c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68dc      	ldr	r4, [r3, #12]
 8004430:	f003 fb8a 	bl	8007b48 <__errno>
 8004434:	4603      	mov	r3, r0
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <gc_Hashmap_set+0x66>
 800443c:	f003 fb84 	bl	8007b48 <__errno>
 8004440:	4603      	mov	r3, r0
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f004 faa1 	bl	800898c <strerror>
 800444a:	4603      	mov	r3, r0
 800444c:	e000      	b.n	8004450 <gc_Hashmap_set+0x68>
 800444e:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <gc_Hashmap_set+0x210>)
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	2340      	movs	r3, #64	; 0x40
 8004454:	4a69      	ldr	r2, [pc, #420]	; (80045fc <gc_Hashmap_set+0x214>)
 8004456:	496a      	ldr	r1, [pc, #424]	; (8004600 <gc_Hashmap_set+0x218>)
 8004458:	4620      	mov	r0, r4
 800445a:	f003 fb8f 	bl	8007b7c <fiprintf>
 800445e:	2300      	movs	r3, #0
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
        __asm volatile
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	f383 8811 	msr	BASEPRI, r3
    }
 8004468:	bf00      	nop
 800446a:	f003 fb6d 	bl	8007b48 <__errno>
 800446e:	4603      	mov	r3, r0
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e0b7      	b.n	80045e6 <gc_Hashmap_set+0x1fe>

  Object *obj_key = String_new(heap, key);
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 fcf7 	bl	8004e6c <String_new>
 800447e:	63f8      	str	r0, [r7, #60]	; 0x3c
  check(obj_key, "Error can't create obj_key.");
 8004480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d12f      	bne.n	80044e6 <gc_Hashmap_set+0xfe>
        __asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004498:	bf00      	nop
 800449a:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <gc_Hashmap_set+0x20c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68dc      	ldr	r4, [r3, #12]
 80044a0:	f003 fb52 	bl	8007b48 <__errno>
 80044a4:	4603      	mov	r3, r0
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d008      	beq.n	80044be <gc_Hashmap_set+0xd6>
 80044ac:	f003 fb4c 	bl	8007b48 <__errno>
 80044b0:	4603      	mov	r3, r0
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f004 fa69 	bl	800898c <strerror>
 80044ba:	4603      	mov	r3, r0
 80044bc:	e000      	b.n	80044c0 <gc_Hashmap_set+0xd8>
 80044be:	4b4e      	ldr	r3, [pc, #312]	; (80045f8 <gc_Hashmap_set+0x210>)
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2343      	movs	r3, #67	; 0x43
 80044c4:	4a4d      	ldr	r2, [pc, #308]	; (80045fc <gc_Hashmap_set+0x214>)
 80044c6:	494f      	ldr	r1, [pc, #316]	; (8004604 <gc_Hashmap_set+0x21c>)
 80044c8:	4620      	mov	r0, r4
 80044ca:	f003 fb57 	bl	8007b7c <fiprintf>
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
        __asm volatile
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	f383 8811 	msr	BASEPRI, r3
    }
 80044d8:	bf00      	nop
 80044da:	f003 fb35 	bl	8007b48 <__errno>
 80044de:	4603      	mov	r3, r0
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e07f      	b.n	80045e6 <gc_Hashmap_set+0x1fe>
  Object *obj_data = String_new(heap, data);
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fcbf 	bl	8004e6c <String_new>
 80044ee:	63b8      	str	r0, [r7, #56]	; 0x38
  check(obj_data, "Error can't create obj_data.");
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d12f      	bne.n	8004556 <gc_Hashmap_set+0x16e>
        __asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	623b      	str	r3, [r7, #32]
    }
 8004508:	bf00      	nop
 800450a:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <gc_Hashmap_set+0x20c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68dc      	ldr	r4, [r3, #12]
 8004510:	f003 fb1a 	bl	8007b48 <__errno>
 8004514:	4603      	mov	r3, r0
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <gc_Hashmap_set+0x146>
 800451c:	f003 fb14 	bl	8007b48 <__errno>
 8004520:	4603      	mov	r3, r0
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f004 fa31 	bl	800898c <strerror>
 800452a:	4603      	mov	r3, r0
 800452c:	e000      	b.n	8004530 <gc_Hashmap_set+0x148>
 800452e:	4b32      	ldr	r3, [pc, #200]	; (80045f8 <gc_Hashmap_set+0x210>)
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	2345      	movs	r3, #69	; 0x45
 8004534:	4a31      	ldr	r2, [pc, #196]	; (80045fc <gc_Hashmap_set+0x214>)
 8004536:	4934      	ldr	r1, [pc, #208]	; (8004608 <gc_Hashmap_set+0x220>)
 8004538:	4620      	mov	r0, r4
 800453a:	f003 fb1f 	bl	8007b7c <fiprintf>
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
        __asm volatile
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f383 8811 	msr	BASEPRI, r3
    }
 8004548:	bf00      	nop
 800454a:	f003 fafd 	bl	8007b48 <__errno>
 800454e:	4603      	mov	r3, r0
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e047      	b.n	80045e6 <gc_Hashmap_set+0x1fe>
  HashmapNode *node = Hashmap_node_create(hash, obj_key, obj_data);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800455a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fe3d 	bl	80041dc <Hashmap_node_create>
 8004562:	6378      	str	r0, [r7, #52]	; 0x34
  check_mem(node);
 8004564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004566:	2b00      	cmp	r3, #0
 8004568:	d12f      	bne.n	80045ca <gc_Hashmap_set+0x1e2>
        __asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	61bb      	str	r3, [r7, #24]
    }
 800457c:	bf00      	nop
 800457e:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <gc_Hashmap_set+0x20c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68dc      	ldr	r4, [r3, #12]
 8004584:	f003 fae0 	bl	8007b48 <__errno>
 8004588:	4603      	mov	r3, r0
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <gc_Hashmap_set+0x1ba>
 8004590:	f003 fada 	bl	8007b48 <__errno>
 8004594:	4603      	mov	r3, r0
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f004 f9f7 	bl	800898c <strerror>
 800459e:	4603      	mov	r3, r0
 80045a0:	e000      	b.n	80045a4 <gc_Hashmap_set+0x1bc>
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <gc_Hashmap_set+0x210>)
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2347      	movs	r3, #71	; 0x47
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <gc_Hashmap_set+0x214>)
 80045aa:	4918      	ldr	r1, [pc, #96]	; (800460c <gc_Hashmap_set+0x224>)
 80045ac:	4620      	mov	r0, r4
 80045ae:	f003 fae5 	bl	8007b7c <fiprintf>
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
        __asm volatile
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f383 8811 	msr	BASEPRI, r3
    }
 80045bc:	bf00      	nop
 80045be:	f003 fac3 	bl	8007b48 <__errno>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e00d      	b.n	80045e6 <gc_Hashmap_set+0x1fe>

  Tm_DArray_push(bucket, node);
 80045ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80045cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80045ce:	f7fe feb3 	bl	8003338 <Tm_DArray_push>

  Object_relate(obj_key, obj_data);
 80045d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80045d6:	f000 fc74 	bl	8004ec2 <Object_relate>
  Object_relate(obj_map, obj_key);
 80045da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045dc:	68b8      	ldr	r0, [r7, #8]
 80045de:	f000 fc70 	bl	8004ec2 <Object_relate>

  return 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e001      	b.n	80045ea <gc_Hashmap_set+0x202>

error:
  return -1;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	374c      	adds	r7, #76	; 0x4c
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000014 	.word	0x20000014
 80045f8:	0800aabc 	.word	0x0800aabc
 80045fc:	0800ab68 	.word	0x0800ab68
 8004600:	0800abec 	.word	0x0800abec
 8004604:	0800ac24 	.word	0x0800ac24
 8004608:	0800ac60 	.word	0x0800ac60
 800460c:	0800ab84 	.word	0x0800ab84

08004610 <Hashmap_get_node>:

static inline int Hashmap_get_node(Hashmap *map, uint32_t hash, Tm_DArray *bucket, char *key)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
  for(int i = 0; i < Tm_DArray_end(bucket); i++) {
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	e019      	b.n	8004658 <Hashmap_get_node+0x48>
    HashmapNode *node = Tm_DArray_get(bucket, i);
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff fd8a 	bl	8004140 <Tm_DArray_get>
 800462c:	6138      	str	r0, [r7, #16]
    if(node->hash == hash && map->compare(OBJ2STR(node->key), key) == 0) {
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d10c      	bne.n	8004652 <Hashmap_get_node+0x42>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	6892      	ldr	r2, [r2, #8]
 8004642:	6839      	ldr	r1, [r7, #0]
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <Hashmap_get_node+0x42>
      return i;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	e00e      	b.n	8004670 <Hashmap_get_node+0x60>
  for(int i = 0; i < Tm_DArray_end(bucket); i++) {
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	3301      	adds	r3, #1
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <Hashmap_get_node+0x54>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	e000      	b.n	8004666 <Hashmap_get_node+0x56>
 8004664:	2300      	movs	r3, #0
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4293      	cmp	r3, r2
 800466a:	dcdb      	bgt.n	8004624 <Hashmap_get_node+0x14>
    }
  }

  return -1;
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004670:	4618      	mov	r0, r3
 8004672:	3718      	adds	r7, #24
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <gc_Hashmap_get>:

void *gc_Hashmap_get(Object *obj_map, char *key)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b08d      	sub	sp, #52	; 0x34
 800467c:	af02      	add	r7, sp, #8
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  Hashmap *map = OBJ2HASH(obj_map);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t hash = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
  Tm_DArray *bucket = Hashmap_find_bucket(map, key, 0, &hash);
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	2200      	movs	r2, #0
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004696:	f7ff fdf9 	bl	800428c <Hashmap_find_bucket>
 800469a:	6238      	str	r0, [r7, #32]
  if(!bucket) return NULL;
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <gc_Hashmap_get+0x2e>
 80046a2:	2300      	movs	r3, #0
 80046a4:	e049      	b.n	800473a <gc_Hashmap_get+0xc2>

  int i = Hashmap_get_node(map, hash, bucket, key);
 80046a6:	68f9      	ldr	r1, [r7, #12]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	6a3a      	ldr	r2, [r7, #32]
 80046ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80046ae:	f7ff ffaf 	bl	8004610 <Hashmap_get_node>
 80046b2:	61f8      	str	r0, [r7, #28]
  if(i == -1) return NULL;
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d101      	bne.n	80046c0 <gc_Hashmap_get+0x48>
 80046bc:	2300      	movs	r3, #0
 80046be:	e03c      	b.n	800473a <gc_Hashmap_get+0xc2>

  HashmapNode *node = Tm_DArray_get(bucket, i);
 80046c0:	69f9      	ldr	r1, [r7, #28]
 80046c2:	6a38      	ldr	r0, [r7, #32]
 80046c4:	f7ff fd3c 	bl	8004140 <Tm_DArray_get>
 80046c8:	61b8      	str	r0, [r7, #24]
  check(node != NULL, "Failed to get node from bucket when it should exist.");
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d131      	bne.n	8004734 <gc_Hashmap_get+0xbc>
        __asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	617b      	str	r3, [r7, #20]
    }
 80046e2:	bf00      	nop
 80046e4:	4b17      	ldr	r3, [pc, #92]	; (8004744 <gc_Hashmap_get+0xcc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68dc      	ldr	r4, [r3, #12]
 80046ea:	f003 fa2d 	bl	8007b48 <__errno>
 80046ee:	4603      	mov	r3, r0
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <gc_Hashmap_get+0x90>
 80046f6:	f003 fa27 	bl	8007b48 <__errno>
 80046fa:	4603      	mov	r3, r0
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 f944 	bl	800898c <strerror>
 8004704:	4603      	mov	r3, r0
 8004706:	e000      	b.n	800470a <gc_Hashmap_get+0x92>
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <gc_Hashmap_get+0xd0>)
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	236c      	movs	r3, #108	; 0x6c
 800470e:	4a0f      	ldr	r2, [pc, #60]	; (800474c <gc_Hashmap_get+0xd4>)
 8004710:	490f      	ldr	r1, [pc, #60]	; (8004750 <gc_Hashmap_get+0xd8>)
 8004712:	4620      	mov	r0, r4
 8004714:	f003 fa32 	bl	8007b7c <fiprintf>
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
        __asm volatile
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f383 8811 	msr	BASEPRI, r3
    }
 8004722:	bf00      	nop
 8004724:	f003 fa10 	bl	8007b48 <__errno>
 8004728:	4603      	mov	r3, r0
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	bf00      	nop

  return OBJ2STR(node->data);

error:
  return NULL;
 8004730:	2300      	movs	r3, #0
 8004732:	e002      	b.n	800473a <gc_Hashmap_get+0xc2>
  return OBJ2STR(node->data);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
}
 800473a:	4618      	mov	r0, r3
 800473c:	372c      	adds	r7, #44	; 0x2c
 800473e:	46bd      	mov	sp, r7
 8004740:	bd90      	pop	{r4, r7, pc}
 8004742:	bf00      	nop
 8004744:	20000014 	.word	0x20000014
 8004748:	0800aabc 	.word	0x0800aabc
 800474c:	0800ab68 	.word	0x0800ab68
 8004750:	0800ac9c 	.word	0x0800ac9c

08004754 <gc_Hashmap_delete>:


void gc_Hashmap_delete(Object *obj_map, char *key)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  Hashmap *map = OBJ2HASH(obj_map);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t hash = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60fb      	str	r3, [r7, #12]
  Tm_DArray *bucket = Hashmap_find_bucket(map, key, 0, &hash);
 8004768:	f107 030c 	add.w	r3, r7, #12
 800476c:	2200      	movs	r2, #0
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004772:	f7ff fd8b 	bl	800428c <Hashmap_find_bucket>
 8004776:	6238      	str	r0, [r7, #32]
  if(!bucket) return;
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d027      	beq.n	80047ce <gc_Hashmap_delete+0x7a>

  int i = Hashmap_get_node(map, hash, bucket, key);
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004786:	f7ff ff43 	bl	8004610 <Hashmap_get_node>
 800478a:	61f8      	str	r0, [r7, #28]
  if(i == -1) return;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004792:	d01e      	beq.n	80047d2 <gc_Hashmap_delete+0x7e>

  HashmapNode *node = Tm_DArray_get(bucket, i);
 8004794:	69f9      	ldr	r1, [r7, #28]
 8004796:	6a38      	ldr	r0, [r7, #32]
 8004798:	f7ff fcd2 	bl	8004140 <Tm_DArray_get>
 800479c:	61b8      	str	r0, [r7, #24]
  Object *obj_key = node->key;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	617b      	str	r3, [r7, #20]

  Object_unrelate(obj_map, obj_key);
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fbb7 	bl	8004f1a <Object_unrelate>
  free(node);
 80047ac:	69b8      	ldr	r0, [r7, #24]
 80047ae:	f003 fa95 	bl	8007cdc <free>

  HashmapNode *ending = Tm_DArray_pop(bucket);
 80047b2:	6a38      	ldr	r0, [r7, #32]
 80047b4:	f7fe fdec 	bl	8003390 <Tm_DArray_pop>
 80047b8:	6138      	str	r0, [r7, #16]
  if(ending != node) {
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d008      	beq.n	80047d4 <gc_Hashmap_delete+0x80>
    Tm_DArray_set(bucket, i, ending);
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	69f9      	ldr	r1, [r7, #28]
 80047c6:	6a38      	ldr	r0, [r7, #32]
 80047c8:	f7fe fe54 	bl	8003474 <Tm_DArray_set>
 80047cc:	e002      	b.n	80047d4 <gc_Hashmap_delete+0x80>
  if(!bucket) return;
 80047ce:	bf00      	nop
 80047d0:	e000      	b.n	80047d4 <gc_Hashmap_delete+0x80>
  if(i == -1) return;
 80047d2:	bf00      	nop
  }

}
 80047d4:	3728      	adds	r7, #40	; 0x28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <test_rootset>:
#include <treadmill/object.h>
#include "string.h"

Tm_DArray*
test_rootset(TmStateHeader *state_h)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  Tm_DArray *rootset = Tm_DArray_create(sizeof(TmObjectHeader*), 10);
 80047e2:	210a      	movs	r1, #10
 80047e4:	2004      	movs	r0, #4
 80047e6:	f7fe fbb5 	bl	8002f54 <Tm_DArray_create>
 80047ea:	6138      	str	r0, [r7, #16]
  State *state = (State*)state_h;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60fb      	str	r3, [r7, #12]
  for(int i=0; i<Tm_DArray_count(state->rootset);i++) {
 80047f0:	2300      	movs	r3, #0
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	e00d      	b.n	8004812 <test_rootset+0x38>
    Tm_DArray_push(rootset, state->rootset->contents[i]);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	6938      	ldr	r0, [r7, #16]
 8004808:	f7fe fd96 	bl	8003338 <Tm_DArray_push>
  for(int i=0; i<Tm_DArray_count(state->rootset);i++) {
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	3301      	adds	r3, #1
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <test_rootset+0x48>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	e000      	b.n	8004824 <test_rootset+0x4a>
 8004822:	2300      	movs	r3, #0
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4293      	cmp	r3, r2
 8004828:	dce5      	bgt.n	80047f6 <test_rootset+0x1c>
  }

  return rootset;
 800482a:	693b      	ldr	r3, [r7, #16]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <test_scan_pointers>:

void
test_scan_pointers(TmHeap *heap, TmObjectHeader *object, TmCallbackFn callback)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  Object *self = (Object*)object;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61bb      	str	r3, [r7, #24]
  for(int i=0; i < Tm_DArray_count(self->children); i++) {
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	e00e      	b.n	8004868 <test_scan_pointers+0x34>
//    TmObjectHeader *o = (TmObjectHeader*)Tm_DArray_at(self->children, i);
	TmObjectHeader *o = (TmObjectHeader*)(self->children->contents[i]);
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	617b      	str	r3, [r7, #20]
    callback(heap, o);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6979      	ldr	r1, [r7, #20]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	4798      	blx	r3
  for(int i=0; i < Tm_DArray_count(self->children); i++) {
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3301      	adds	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <test_scan_pointers+0x44>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	e000      	b.n	800487a <test_scan_pointers+0x46>
 8004878:	2300      	movs	r3, #0
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	4293      	cmp	r3, r2
 800487e:	dce4      	bgt.n	800484a <test_scan_pointers+0x16>
  }
}
 8004880:	bf00      	nop
 8004882:	bf00      	nop
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <test_release>:

void
test_release(void *value)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  Object_destroy((Object*)value);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fba3 	bl	8004fde <Object_destroy>
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <State_new>:

State*
State_new()
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
  State *state = calloc(1, sizeof(State));
 80048a6:	2108      	movs	r1, #8
 80048a8:	2001      	movs	r0, #1
 80048aa:	f003 f945 	bl	8007b38 <calloc>
 80048ae:	4603      	mov	r3, r0
 80048b0:	607b      	str	r3, [r7, #4]
  state->gc.rootset_fn = test_rootset;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a06      	ldr	r2, [pc, #24]	; (80048d0 <State_new+0x30>)
 80048b6:	601a      	str	r2, [r3, #0]
  state->rootset = Tm_DArray_create(sizeof(Object*), 10);
 80048b8:	210a      	movs	r1, #10
 80048ba:	2004      	movs	r0, #4
 80048bc:	f7fe fb4a 	bl	8002f54 <Tm_DArray_create>
 80048c0:	4602      	mov	r2, r0
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	605a      	str	r2, [r3, #4]
  return state;
 80048c6:	687b      	ldr	r3, [r7, #4]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	080047db 	.word	0x080047db

080048d4 <new_heap>:

TmHeap*
new_heap(State *state, int size, int growth_rate)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af04      	add	r7, sp, #16
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  return TmHeap_new(
 80048e0:	4b08      	ldr	r3, [pc, #32]	; (8004904 <new_heap+0x30>)
 80048e2:	9302      	str	r3, [sp, #8]
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <new_heap+0x34>)
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	2318      	movs	r3, #24
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2305      	movs	r3, #5
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7fe fee4 	bl	80036c0 <TmHeap_new>
 80048f8:	4603      	mov	r3, r0
    5,
    sizeof(Object),
    test_release,
    test_scan_pointers
    );
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	08004835 	.word	0x08004835
 8004908:	0800488b 	.word	0x0800488b

0800490c <Tm_DArray_get>:
{
 800490c:	b590      	push	{r4, r7, lr}
 800490e:	b087      	sub	sp, #28
 8004910:	af02      	add	r7, sp, #8
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  check(i < array->max, "darray attempt to get past max");
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	db31      	blt.n	8004984 <Tm_DArray_get+0x78>
        __asm volatile
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	60fb      	str	r3, [r7, #12]
    }
 8004932:	bf00      	nop
 8004934:	4b18      	ldr	r3, [pc, #96]	; (8004998 <Tm_DArray_get+0x8c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68dc      	ldr	r4, [r3, #12]
 800493a:	f003 f905 	bl	8007b48 <__errno>
 800493e:	4603      	mov	r3, r0
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d008      	beq.n	8004958 <Tm_DArray_get+0x4c>
 8004946:	f003 f8ff 	bl	8007b48 <__errno>
 800494a:	4603      	mov	r3, r0
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f004 f81c 	bl	800898c <strerror>
 8004954:	4603      	mov	r3, r0
 8004956:	e000      	b.n	800495a <Tm_DArray_get+0x4e>
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <Tm_DArray_get+0x90>)
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	2326      	movs	r3, #38	; 0x26
 800495e:	4a10      	ldr	r2, [pc, #64]	; (80049a0 <Tm_DArray_get+0x94>)
 8004960:	4910      	ldr	r1, [pc, #64]	; (80049a4 <Tm_DArray_get+0x98>)
 8004962:	4620      	mov	r0, r4
 8004964:	f003 f90a 	bl	8007b7c <fiprintf>
 8004968:	2300      	movs	r3, #0
 800496a:	60bb      	str	r3, [r7, #8]
        __asm volatile
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f383 8811 	msr	BASEPRI, r3
    }
 8004972:	bf00      	nop
 8004974:	f003 f8e8 	bl	8007b48 <__errno>
 8004978:	4603      	mov	r3, r0
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	bf00      	nop
  return NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	e005      	b.n	8004990 <Tm_DArray_get+0x84>
  return array->contents[i];
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	681b      	ldr	r3, [r3, #0]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	bd90      	pop	{r4, r7, pc}
 8004998:	20000014 	.word	0x20000014
 800499c:	0800acf0 	.word	0x0800acf0
 80049a0:	0800acf8 	.word	0x0800acf8
 80049a4:	0800ad60 	.word	0x0800ad60

080049a8 <default_compare>:
{
  return strcmp((const char *)b, (const char *)a);
}

static int default_compare(void *a, void *b)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  return strcmp((const char *)a, (const char *)b);
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7fb fc0b 	bl	80001d0 <strcmp>
 80049ba:	4603      	mov	r3, r0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <default_hash>:

static uint32_t default_hash(void *a)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  size_t len = strlen((const char *)a);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fb fc09 	bl	80001e4 <strlen>
 80049d2:	60f8      	str	r0, [r7, #12]
  char *key = (char *)a;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60bb      	str	r3, [r7, #8]
  uint32_t hash = 0;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]

  // Jenkins hash function
  for(hash = i = 0; i < len; ++i)
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	e014      	b.n	8004a14 <default_hash+0x50>
  {
    hash += key[i];
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4413      	add	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
    hash += (hash << 10);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	029b      	lsls	r3, r3, #10
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4413      	add	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
    hash ^= (hash >> 6);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	099b      	lsrs	r3, r3, #6
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4053      	eors	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
  for(hash = i = 0; i < len; ++i)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3301      	adds	r3, #1
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d3e6      	bcc.n	80049ea <default_hash+0x26>
  }

  hash += (hash << 3);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4413      	add	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
  hash ^= (hash >> 11);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	0adb      	lsrs	r3, r3, #11
 8004a2a:	697a      	ldr	r2, [r7, #20]
 8004a2c:	4053      	eors	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
  hash += (hash << 15);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	03db      	lsls	r3, r3, #15
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4413      	add	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  return hash;
 8004a3a:	697b      	ldr	r3, [r7, #20]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <Hashmap_create>:

Hashmap *Hashmap_create(Hashmap_compare compare, Hashmap_hash hash)
{
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b08b      	sub	sp, #44	; 0x2c
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  Hashmap *map = calloc(1, sizeof(Hashmap));
 8004a4e:	210c      	movs	r1, #12
 8004a50:	2001      	movs	r0, #1
 8004a52:	f003 f871 	bl	8007b38 <calloc>
 8004a56:	4603      	mov	r3, r0
 8004a58:	61fb      	str	r3, [r7, #28]
  check_mem(map);
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d12f      	bne.n	8004ac0 <Hashmap_create+0x7c>
        __asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	61bb      	str	r3, [r7, #24]
    }
 8004a72:	bf00      	nop
 8004a74:	4b41      	ldr	r3, [pc, #260]	; (8004b7c <Hashmap_create+0x138>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68dc      	ldr	r4, [r3, #12]
 8004a7a:	f003 f865 	bl	8007b48 <__errno>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <Hashmap_create+0x54>
 8004a86:	f003 f85f 	bl	8007b48 <__errno>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f003 ff7c 	bl	800898c <strerror>
 8004a94:	4603      	mov	r3, r0
 8004a96:	e000      	b.n	8004a9a <Hashmap_create+0x56>
 8004a98:	4b39      	ldr	r3, [pc, #228]	; (8004b80 <Hashmap_create+0x13c>)
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	232f      	movs	r3, #47	; 0x2f
 8004a9e:	4a39      	ldr	r2, [pc, #228]	; (8004b84 <Hashmap_create+0x140>)
 8004aa0:	4939      	ldr	r1, [pc, #228]	; (8004b88 <Hashmap_create+0x144>)
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f003 f86a 	bl	8007b7c <fiprintf>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f383 8811 	msr	BASEPRI, r3
    }
 8004ab2:	bf00      	nop
 8004ab4:	f003 f848 	bl	8007b48 <__errno>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	e052      	b.n	8004b66 <Hashmap_create+0x122>

  map->compare = compare == NULL ? default_compare : compare;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <Hashmap_create+0x86>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	e000      	b.n	8004acc <Hashmap_create+0x88>
 8004aca:	4b30      	ldr	r3, [pc, #192]	; (8004b8c <Hashmap_create+0x148>)
 8004acc:	69fa      	ldr	r2, [r7, #28]
 8004ace:	6053      	str	r3, [r2, #4]
  map->hash = hash == NULL ? default_hash : hash;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <Hashmap_create+0x96>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	e000      	b.n	8004adc <Hashmap_create+0x98>
 8004ada:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <Hashmap_create+0x14c>)
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	6093      	str	r3, [r2, #8]
  map->buckets = Tm_DArray_create(sizeof(Tm_DArray *), DEFAULT_NUMBER_OF_BUCKETS);
 8004ae0:	2164      	movs	r1, #100	; 0x64
 8004ae2:	2004      	movs	r0, #4
 8004ae4:	f7fe fa36 	bl	8002f54 <Tm_DArray_create>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	601a      	str	r2, [r3, #0]
  map->buckets->end = map->buckets->max;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6852      	ldr	r2, [r2, #4]
 8004af8:	601a      	str	r2, [r3, #0]
  check_mem(map->buckets);
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d12f      	bne.n	8004b62 <Hashmap_create+0x11e>
        __asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	613b      	str	r3, [r7, #16]
    }
 8004b14:	bf00      	nop
 8004b16:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <Hashmap_create+0x138>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68dc      	ldr	r4, [r3, #12]
 8004b1c:	f003 f814 	bl	8007b48 <__errno>
 8004b20:	4603      	mov	r3, r0
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <Hashmap_create+0xf6>
 8004b28:	f003 f80e 	bl	8007b48 <__errno>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f003 ff2b 	bl	800898c <strerror>
 8004b36:	4603      	mov	r3, r0
 8004b38:	e000      	b.n	8004b3c <Hashmap_create+0xf8>
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <Hashmap_create+0x13c>)
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	2335      	movs	r3, #53	; 0x35
 8004b40:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <Hashmap_create+0x140>)
 8004b42:	4911      	ldr	r1, [pc, #68]	; (8004b88 <Hashmap_create+0x144>)
 8004b44:	4620      	mov	r0, r4
 8004b46:	f003 f819 	bl	8007b7c <fiprintf>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f383 8811 	msr	BASEPRI, r3
    }
 8004b54:	bf00      	nop
 8004b56:	f002 fff7 	bl	8007b48 <__errno>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e001      	b.n	8004b66 <Hashmap_create+0x122>

  return map;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	e006      	b.n	8004b74 <Hashmap_create+0x130>

error:
  if(map) {
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <Hashmap_create+0x12e>
    Hashmap_destroy(map);
 8004b6c:	69f8      	ldr	r0, [r7, #28]
 8004b6e:	f000 f811 	bl	8004b94 <Hashmap_destroy>
  }

  return NULL;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3724      	adds	r7, #36	; 0x24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd90      	pop	{r4, r7, pc}
 8004b7c:	20000014 	.word	0x20000014
 8004b80:	0800acf0 	.word	0x0800acf0
 8004b84:	0800ad9c 	.word	0x0800ad9c
 8004b88:	0800adb4 	.word	0x0800adb4
 8004b8c:	080049a9 	.word	0x080049a9
 8004b90:	080049c5 	.word	0x080049c5

08004b94 <Hashmap_destroy>:

void Hashmap_destroy(Hashmap *map)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if(map) {
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d042      	beq.n	8004c28 <Hashmap_destroy+0x94>
    if(map->buckets) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d03b      	beq.n	8004c22 <Hashmap_destroy+0x8e>
      for(int i = 0; i < Tm_DArray_count(map->buckets); i++) {
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e027      	b.n	8004c00 <Hashmap_destroy+0x6c>
        Tm_DArray *bucket = Tm_DArray_get(map->buckets, i);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6979      	ldr	r1, [r7, #20]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fea8 	bl	800490c <Tm_DArray_get>
 8004bbc:	60f8      	str	r0, [r7, #12]
        if(bucket) {
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01a      	beq.n	8004bfa <Hashmap_destroy+0x66>
          for(int j = 0; j < Tm_DArray_count(bucket); j++) {
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e00a      	b.n	8004be0 <Hashmap_destroy+0x4c>
            free(Tm_DArray_get(bucket, j));
 8004bca:	6939      	ldr	r1, [r7, #16]
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff fe9d 	bl	800490c <Tm_DArray_get>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f003 f881 	bl	8007cdc <free>
          for(int j = 0; j < Tm_DArray_count(bucket); j++) {
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <Hashmap_destroy+0x58>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	e000      	b.n	8004bee <Hashmap_destroy+0x5a>
 8004bec:	2300      	movs	r3, #0
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	dcea      	bgt.n	8004bca <Hashmap_destroy+0x36>
          }
          Tm_DArray_destroy(bucket);
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7fe fb88 	bl	800330a <Tm_DArray_destroy>
      for(int i = 0; i < Tm_DArray_count(map->buckets); i++) {
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <Hashmap_destroy+0x7c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	e000      	b.n	8004c12 <Hashmap_destroy+0x7e>
 8004c10:	2300      	movs	r3, #0
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4293      	cmp	r3, r2
 8004c16:	dccb      	bgt.n	8004bb0 <Hashmap_destroy+0x1c>
        }
      }
      Tm_DArray_destroy(map->buckets);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe fb74 	bl	800330a <Tm_DArray_destroy>
    }

    free(map);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f003 f85a 	bl	8007cdc <free>
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f103 0208 	add.w	r2, r3, #8
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f04f 32ff 	mov.w	r2, #4294967295
 8004c48:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f103 0208 	add.w	r2, r3, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f103 0208 	add.w	r2, r3, #8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d103      	bne.n	8004cf2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	e00c      	b.n	8004d0c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	e002      	b.n	8004d00 <vListInsert+0x2e>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d2f6      	bcs.n	8004cfa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6892      	ldr	r2, [r2, #8]
 8004d5a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6852      	ldr	r2, [r2, #4]
 8004d64:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d103      	bne.n	8004d78 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1e5a      	subs	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <Object_new>:

#include <string.h>

Object*
Object_new(TmHeap *heap, ValueType type)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b089      	sub	sp, #36	; 0x24
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  Object *obj = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
  if (xSemaphoreTake( xSemaphore, ( TickType_t ) 10 ) == pdTRUE ) {
 8004da8:	4b2b      	ldr	r3, [pc, #172]	; (8004e58 <Object_new+0xc0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	210a      	movs	r1, #10
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 fd66 	bl	8005880 <xQueueSemaphoreTake>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d115      	bne.n	8004de6 <Object_new+0x4e>
	  obj = (Object*)Tm_allocate(heap);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7ff f90c 	bl	8003fd8 <Tm_allocate>
 8004dc0:	6178      	str	r0, [r7, #20]
	  xSemaphoreGive( xSemaphore );
 8004dc2:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <Object_new+0xc0>)
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2100      	movs	r1, #0
 8004dcc:	f000 fad0 	bl	8005370 <xQueueGenericSend>

	  obj->type = type;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	711a      	strb	r2, [r3, #4]
	  obj->parent = NULL;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	611a      	str	r2, [r3, #16]
	  obj->children = NULL;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	615a      	str	r2, [r3, #20]
	  return obj;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	e034      	b.n	8004e50 <Object_new+0xb8>
  }
  check(obj, "Error can't create obj.");
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d12f      	bne.n	8004e4c <Object_new+0xb4>
        __asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	613b      	str	r3, [r7, #16]
    }
 8004dfe:	bf00      	nop
 8004e00:	4b16      	ldr	r3, [pc, #88]	; (8004e5c <Object_new+0xc4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68dc      	ldr	r4, [r3, #12]
 8004e06:	f002 fe9f 	bl	8007b48 <__errno>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <Object_new+0x8c>
 8004e12:	f002 fe99 	bl	8007b48 <__errno>
 8004e16:	4603      	mov	r3, r0
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f003 fdb6 	bl	800898c <strerror>
 8004e20:	4603      	mov	r3, r0
 8004e22:	e000      	b.n	8004e26 <Object_new+0x8e>
 8004e24:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <Object_new+0xc8>)
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	2319      	movs	r3, #25
 8004e2a:	4a0e      	ldr	r2, [pc, #56]	; (8004e64 <Object_new+0xcc>)
 8004e2c:	490e      	ldr	r1, [pc, #56]	; (8004e68 <Object_new+0xd0>)
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f002 fea4 	bl	8007b7c <fiprintf>
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]
        __asm volatile
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
    }
 8004e3e:	bf00      	nop
 8004e40:	f002 fe82 	bl	8007b48 <__errno>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2200      	movs	r2, #0
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e000      	b.n	8004e4e <Object_new+0xb6>
error:
 8004e4c:	bf00      	nop
  return NULL;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd90      	pop	{r4, r7, pc}
 8004e58:	20012e10 	.word	0x20012e10
 8004e5c:	20000014 	.word	0x20000014
 8004e60:	0800ade4 	.word	0x0800ade4
 8004e64:	0800adec 	.word	0x0800adec
 8004e68:	0800ae04 	.word	0x0800ae04

08004e6c <String_new>:
  return obj;
}

Object*
String_new(TmHeap *heap, char* value)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  Object* obj = Object_new(heap, StringType);
 8004e76:	2102      	movs	r1, #2
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff8d 	bl	8004d98 <Object_new>
 8004e7e:	60f8      	str	r0, [r7, #12]
  obj->data.as_str = strdup(value);
 8004e80:	6838      	ldr	r0, [r7, #0]
 8004e82:	f003 fb7f 	bl	8008584 <strdup>
 8004e86:	4603      	mov	r3, r0
 8004e88:	461a      	mov	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	609a      	str	r2, [r3, #8]
  return obj;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <Map_new>:
  return obj;
}

Object*
Map_new(TmHeap *heap)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  Object* obj = Object_new(heap, MapType);
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ff78 	bl	8004d98 <Object_new>
 8004ea8:	60f8      	str	r0, [r7, #12]
  obj->data.as_data = Hashmap_create(NULL, NULL);
 8004eaa:	2100      	movs	r1, #0
 8004eac:	2000      	movs	r0, #0
 8004eae:	f7ff fdc9 	bl	8004a44 <Hashmap_create>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]

  return obj;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <Object_relate>:

void
Object_relate(Object* parent, Object* child)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  if (!parent->children)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <Object_relate+0x20>
	  parent->children = Tm_DArray_create(sizeof(Object*), 10);
 8004ed4:	210a      	movs	r1, #10
 8004ed6:	2004      	movs	r0, #4
 8004ed8:	f7fe f83c 	bl	8002f54 <Tm_DArray_create>
 8004edc:	4602      	mov	r2, r0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	615a      	str	r2, [r3, #20]

  Tm_DArray_push(parent->children, child);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fa25 	bl	8003338 <Tm_DArray_push>
  child->parent = parent;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	611a      	str	r2, [r3, #16]
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <Object_make_root>:

void
Object_make_root(Object *self, State *state)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  Tm_DArray_push(state->rootset, self);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fe fa13 	bl	8003338 <Tm_DArray_push>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <Object_unrelate>:

void Object_unrelate(Object* parent, Object* child) {
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]

	if (child->parent != parent) return;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d14f      	bne.n	8004fce <Object_unrelate+0xb4>

	int child_i = -1;
 8004f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f32:	617b      	str	r3, [r7, #20]
	for (int i= 0; i < Tm_DArray_end(parent->children); ++i) {
 8004f34:	2300      	movs	r3, #0
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	e014      	b.n	8004f64 <Object_unrelate+0x4a>
		if ((parent->children->contents[i]) == child) {
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d107      	bne.n	8004f5e <Object_unrelate+0x44>
			child_i = i;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	617b      	str	r3, [r7, #20]
			--(parent->children->end);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	3a01      	subs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]
			break;
 8004f5c:	e00e      	b.n	8004f7c <Object_unrelate+0x62>
	for (int i= 0; i < Tm_DArray_end(parent->children); ++i) {
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3301      	adds	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <Object_unrelate+0x5a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	e000      	b.n	8004f76 <Object_unrelate+0x5c>
 8004f74:	2300      	movs	r3, #0
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	dcde      	bgt.n	8004f3a <Object_unrelate+0x20>
		}
	}

	if (child_i == -1) return;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f82:	d026      	beq.n	8004fd2 <Object_unrelate+0xb8>

	for (int i = child_i; i < Tm_DArray_end(parent->children); ++i)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e011      	b.n	8004fae <Object_unrelate+0x94>
		parent->children->contents[i] = parent->children->contents[i+1];
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	3301      	adds	r3, #1
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	441a      	add	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	6919      	ldr	r1, [r3, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	440b      	add	r3, r1
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	601a      	str	r2, [r3, #0]
	for (int i = child_i; i < Tm_DArray_end(parent->children); ++i)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	3301      	adds	r3, #1
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <Object_unrelate+0xa4>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	e000      	b.n	8004fc0 <Object_unrelate+0xa6>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	dce1      	bgt.n	8004f8a <Object_unrelate+0x70>

	child->parent = NULL;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	611a      	str	r2, [r3, #16]
 8004fcc:	e002      	b.n	8004fd4 <Object_unrelate+0xba>
	if (child->parent != parent) return;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <Object_unrelate+0xba>
	if (child_i == -1) return;
 8004fd2:	bf00      	nop
}
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <Object_destroy>:

void
Object_destroy(Object *self)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  if (self->parent)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <Object_destroy+0x1c>
	Object_unrelate(self->parent, self);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff ff90 	bl	8004f1a <Object_unrelate>

  if (self->children) {
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01c      	beq.n	800503c <Object_destroy+0x5e>
	  for (int i = 0; i < Tm_DArray_end(self->children); ++i) {
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	e00d      	b.n	8005024 <Object_destroy+0x46>
		  Object *child = self->children->contents[i];
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60bb      	str	r3, [r7, #8]
		  child->parent = NULL;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2200      	movs	r2, #0
 800501c:	611a      	str	r2, [r3, #16]
	  for (int i = 0; i < Tm_DArray_end(self->children); ++i) {
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3301      	adds	r3, #1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d003      	beq.n	8005034 <Object_destroy+0x56>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	e000      	b.n	8005036 <Object_destroy+0x58>
 8005034:	2300      	movs	r3, #0
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4293      	cmp	r3, r2
 800503a:	dce5      	bgt.n	8005008 <Object_destroy+0x2a>
	  }
  }
  Tm_DArray_destroy(self->children);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe f962 	bl	800330a <Tm_DArray_destroy>

  if (self) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d016      	beq.n	800507a <Object_destroy+0x9c>
	  if( self->type == StringType) {
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	791b      	ldrb	r3, [r3, #4]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d109      	bne.n	8005068 <Object_destroy+0x8a>
		  if (self->data.as_str)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00e      	beq.n	800507a <Object_destroy+0x9c>
			  free(self->data.as_str);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4618      	mov	r0, r3
 8005062:	f002 fe3b 	bl	8007cdc <free>
 8005066:	e008      	b.n	800507a <Object_destroy+0x9c>
	  } else if ( self->type == MapType ) {
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	791b      	ldrb	r3, [r3, #4]
 800506c:	2b04      	cmp	r3, #4
 800506e:	d104      	bne.n	800507a <Object_destroy+0x9c>
		  Hashmap_destroy(OBJ2HASH(self));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fd8d 	bl	8004b94 <Hashmap_destroy>
	  }
  }


  free(self);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f002 fe2e 	bl	8007cdc <free>
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <Object_delete_root>:

void
Object_delete_root(Object *self, State *state) {
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

	int root_i = -1;
 8005092:	f04f 33ff 	mov.w	r3, #4294967295
 8005096:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < Tm_DArray_end(state->rootset); ++i) {
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	e014      	b.n	80050c8 <Object_delete_root+0x40>
		if ((state->rootset->contents[i]) == self) {
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d107      	bne.n	80050c2 <Object_delete_root+0x3a>
			root_i = i;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	617b      	str	r3, [r7, #20]
			--(state->rootset->end);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	3a01      	subs	r2, #1
 80050be:	601a      	str	r2, [r3, #0]
			break;
 80050c0:	e00e      	b.n	80050e0 <Object_delete_root+0x58>
	for(int i = 0; i < Tm_DArray_end(state->rootset); ++i) {
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3301      	adds	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <Object_delete_root+0x50>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	e000      	b.n	80050da <Object_delete_root+0x52>
 80050d8:	2300      	movs	r3, #0
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4293      	cmp	r3, r2
 80050de:	dcde      	bgt.n	800509e <Object_delete_root+0x16>
		}
	}

	if (root_i == -1) return;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d021      	beq.n	800512c <Object_delete_root+0xa4>

	for (int i = root_i; i < Tm_DArray_end(state->rootset); ++i)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e011      	b.n	8005112 <Object_delete_root+0x8a>
		state->rootset->contents[i] = state->rootset->contents[i+1];
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3301      	adds	r3, #1
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	441a      	add	r2, r3
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	6919      	ldr	r1, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	6812      	ldr	r2, [r2, #0]
 800510a:	601a      	str	r2, [r3, #0]
	for (int i = root_i; i < Tm_DArray_end(state->rootset); ++i)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <Object_delete_root+0x9a>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	e000      	b.n	8005124 <Object_delete_root+0x9c>
 8005122:	2300      	movs	r3, #0
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4293      	cmp	r3, r2
 8005128:	dce1      	bgt.n	80050ee <Object_delete_root+0x66>
 800512a:	e000      	b.n	800512e <Object_delete_root+0xa6>
	if (root_i == -1) return;
 800512c:	bf00      	nop
}
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <xQueueGenericReset+0x2a>
        __asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	60bb      	str	r3, [r7, #8]
    }
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005162:	f002 f9c9 	bl	80074f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005172:	fb01 f303 	mul.w	r3, r1, r3
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	3b01      	subs	r3, #1
 8005194:	68f9      	ldr	r1, [r7, #12]
 8005196:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	441a      	add	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	22ff      	movs	r2, #255	; 0xff
 80051a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d114      	bne.n	80051e2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01a      	beq.n	80051f6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3310      	adds	r3, #16
 80051c4:	4618      	mov	r0, r3
 80051c6:	f001 f9a3 	bl	8006510 <xTaskRemoveFromEventList>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80051d0:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <xQueueGenericReset+0xcc>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	e009      	b.n	80051f6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3310      	adds	r3, #16
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fd22 	bl	8004c30 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3324      	adds	r3, #36	; 0x24
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fd1d 	bl	8004c30 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80051f6:	f002 f9af 	bl	8007558 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80051fa:	2301      	movs	r3, #1
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005208:	b580      	push	{r7, lr}
 800520a:	b08c      	sub	sp, #48	; 0x30
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <xQueueGenericCreate+0x2a>
        __asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	61bb      	str	r3, [r7, #24]
    }
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <xQueueGenericCreate+0x48>
 8005242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	429a      	cmp	r2, r3
 800524e:	d101      	bne.n	8005254 <xQueueGenericCreate+0x4c>
 8005250:	2301      	movs	r3, #1
 8005252:	e000      	b.n	8005256 <xQueueGenericCreate+0x4e>
 8005254:	2300      	movs	r3, #0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <xQueueGenericCreate+0x68>
        __asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	617b      	str	r3, [r7, #20]
    }
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005276:	d90a      	bls.n	800528e <xQueueGenericCreate+0x86>
        __asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	613b      	str	r3, [r7, #16]
    }
 800528a:	bf00      	nop
 800528c:	e7fe      	b.n	800528c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	3350      	adds	r3, #80	; 0x50
 8005292:	4618      	mov	r0, r3
 8005294:	f002 fa52 	bl	800773c <pvPortMalloc>
 8005298:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	3350      	adds	r3, #80	; 0x50
 80052a8:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052aa:	79fa      	ldrb	r2, [r7, #7]
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	4613      	mov	r3, r2
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f805 	bl	80052c6 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80052bc:	6a3b      	ldr	r3, [r7, #32]
    }
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	607a      	str	r2, [r7, #4]
 80052d2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e002      	b.n	80052e8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052f4:	2101      	movs	r1, #1
 80052f6:	69b8      	ldr	r0, [r7, #24]
 80052f8:	f7ff ff1e 	bl	8005138 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	78fa      	ldrb	r2, [r7, #3]
 8005300:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00e      	beq.n	8005338 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800532c:	2300      	movs	r3, #0
 800532e:	2200      	movs	r2, #0
 8005330:	2100      	movs	r1, #0
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f81c 	bl	8005370 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800534a:	2301      	movs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	461a      	mov	r2, r3
 8005356:	6939      	ldr	r1, [r7, #16]
 8005358:	6978      	ldr	r0, [r7, #20]
 800535a:	f7ff ff55 	bl	8005208 <xQueueGenericCreate>
 800535e:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff ffd3 	bl	800530c <prvInitialiseMutex>

        return xNewQueue;
 8005366:	68fb      	ldr	r3, [r7, #12]
    }
 8005368:	4618      	mov	r0, r3
 800536a:	3718      	adds	r7, #24
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	; 0x38
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800537e:	2300      	movs	r3, #0
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueGenericSend+0x32>
        __asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d103      	bne.n	80053b0 <xQueueGenericSend+0x40>
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <xQueueGenericSend+0x44>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <xQueueGenericSend+0x46>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <xQueueGenericSend+0x60>
        __asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <xQueueGenericSend+0x6e>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSend+0x72>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSend+0x74>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueGenericSend+0x8e>
        __asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	623b      	str	r3, [r7, #32]
    }
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053fe:	f001 fa23 	bl	8006848 <xTaskGetSchedulerState>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <xQueueGenericSend+0x9e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xQueueGenericSend+0xa2>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueGenericSend+0xa4>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueGenericSend+0xbe>
        __asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61fb      	str	r3, [r7, #28]
    }
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800542e:	f002 f863 	bl	80074f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543a:	429a      	cmp	r2, r3
 800543c:	d302      	bcc.n	8005444 <xQueueGenericSend+0xd4>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b02      	cmp	r3, #2
 8005442:	d129      	bne.n	8005498 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800544a:	f000 fb3d 	bl	8005ac8 <prvCopyDataToQueue>
 800544e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d010      	beq.n	800547a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545a:	3324      	adds	r3, #36	; 0x24
 800545c:	4618      	mov	r0, r3
 800545e:	f001 f857 	bl	8006510 <xTaskRemoveFromEventList>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d013      	beq.n	8005490 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005468:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <xQueueGenericSend+0x1f8>)
 800546a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	e00a      	b.n	8005490 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b39      	ldr	r3, [pc, #228]	; (8005568 <xQueueGenericSend+0x1f8>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005490:	f002 f862 	bl	8007558 <vPortExitCritical>
                return pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	e063      	b.n	8005560 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800549e:	f002 f85b 	bl	8007558 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e05c      	b.n	8005560 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80054ac:	f107 0314 	add.w	r3, r7, #20
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 f88f 	bl	80065d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80054ba:	f002 f84d 	bl	8007558 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80054be:	f000 fe09 	bl	80060d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80054c2:	f002 f819 	bl	80074f8 <vPortEnterCritical>
 80054c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054cc:	b25b      	sxtb	r3, r3
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d103      	bne.n	80054dc <xQueueGenericSend+0x16c>
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueGenericSend+0x182>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f2:	f002 f831 	bl	8007558 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f6:	1d3a      	adds	r2, r7, #4
 80054f8:	f107 0314 	add.w	r3, r7, #20
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f001 f87e 	bl	8006600 <xTaskCheckForTimeOut>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d124      	bne.n	8005554 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800550a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800550c:	f000 fbd4 	bl	8005cb8 <prvIsQueueFull>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d018      	beq.n	8005548 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	3310      	adds	r3, #16
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 ffa6 	bl	8006470 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005526:	f000 fb5f 	bl	8005be8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800552a:	f000 fde1 	bl	80060f0 <xTaskResumeAll>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	f47f af7c 	bne.w	800542e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <xQueueGenericSend+0x1f8>)
 8005538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	e772      	b.n	800542e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554a:	f000 fb4d 	bl	8005be8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800554e:	f000 fdcf 	bl	80060f0 <xTaskResumeAll>
 8005552:	e76c      	b.n	800542e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005556:	f000 fb47 	bl	8005be8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800555a:	f000 fdc9 	bl	80060f0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800555e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005560:	4618      	mov	r0, r3
 8005562:	3738      	adds	r7, #56	; 0x38
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b090      	sub	sp, #64	; 0x40
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <xQueueGenericSendFromISR+0x3c>
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <xQueueGenericSendFromISR+0x40>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e000      	b.n	80055ae <xQueueGenericSendFromISR+0x42>
 80055ac:	2300      	movs	r3, #0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d10a      	bne.n	80055c8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d103      	bne.n	80055d6 <xQueueGenericSendFromISR+0x6a>
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <xQueueGenericSendFromISR+0x6e>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <xQueueGenericSendFromISR+0x70>
 80055da:	2300      	movs	r3, #0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	623b      	str	r3, [r7, #32]
    }
 80055f2:	bf00      	nop
 80055f4:	e7fe      	b.n	80055f4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055f6:	f002 f861 	bl	80076bc <vPortValidateInterruptPriority>
        __asm volatile
 80055fa:	f3ef 8211 	mrs	r2, BASEPRI
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61fa      	str	r2, [r7, #28]
 8005610:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8005612:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005614:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800561a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	429a      	cmp	r2, r3
 8005620:	d302      	bcc.n	8005628 <xQueueGenericSendFromISR+0xbc>
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d13e      	bne.n	80056a6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800563e:	f000 fa43 	bl	8005ac8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005642:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564a:	d112      	bne.n	8005672 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	2b00      	cmp	r3, #0
 8005652:	d025      	beq.n	80056a0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005656:	3324      	adds	r3, #36	; 0x24
 8005658:	4618      	mov	r0, r3
 800565a:	f000 ff59 	bl	8006510 <xTaskRemoveFromEventList>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01d      	beq.n	80056a0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01a      	beq.n	80056a0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	e016      	b.n	80056a0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005672:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005676:	2b7f      	cmp	r3, #127	; 0x7f
 8005678:	d10a      	bne.n	8005690 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	617b      	str	r3, [r7, #20]
    }
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005690:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005694:	3301      	adds	r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	b25a      	sxtb	r2, r3
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80056a0:	2301      	movs	r3, #1
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80056a4:	e001      	b.n	80056aa <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ac:	613b      	str	r3, [r7, #16]
        __asm volatile
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f383 8811 	msr	BASEPRI, r3
    }
 80056b4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80056b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3740      	adds	r7, #64	; 0x40
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08c      	sub	sp, #48	; 0x30
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10a      	bne.n	80056f0 <xQueueReceive+0x30>
        __asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	623b      	str	r3, [r7, #32]
    }
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d103      	bne.n	80056fe <xQueueReceive+0x3e>
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <xQueueReceive+0x42>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <xQueueReceive+0x44>
 8005702:	2300      	movs	r3, #0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <xQueueReceive+0x5e>
        __asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	61fb      	str	r3, [r7, #28]
    }
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800571e:	f001 f893 	bl	8006848 <xTaskGetSchedulerState>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <xQueueReceive+0x6e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <xQueueReceive+0x72>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <xQueueReceive+0x74>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xQueueReceive+0x8e>
        __asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	61bb      	str	r3, [r7, #24]
    }
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800574e:	f001 fed3 	bl	80074f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01f      	beq.n	800579e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005762:	f000 fa1b 	bl	8005b9c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	1e5a      	subs	r2, r3, #1
 800576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00f      	beq.n	8005796 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	3310      	adds	r3, #16
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fec8 	bl	8006510 <xTaskRemoveFromEventList>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005786:	4b3d      	ldr	r3, [pc, #244]	; (800587c <xQueueReceive+0x1bc>)
 8005788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005796:	f001 fedf 	bl	8007558 <vPortExitCritical>
                return pdPASS;
 800579a:	2301      	movs	r3, #1
 800579c:	e069      	b.n	8005872 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d103      	bne.n	80057ac <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80057a4:	f001 fed8 	bl	8007558 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e062      	b.n	8005872 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80057b2:	f107 0310 	add.w	r3, r7, #16
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 ff0c 	bl	80065d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80057bc:	2301      	movs	r3, #1
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80057c0:	f001 feca 	bl	8007558 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80057c4:	f000 fc86 	bl	80060d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80057c8:	f001 fe96 	bl	80074f8 <vPortEnterCritical>
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d103      	bne.n	80057e2 <xQueueReceive+0x122>
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e8:	b25b      	sxtb	r3, r3
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d103      	bne.n	80057f8 <xQueueReceive+0x138>
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f8:	f001 feae 	bl	8007558 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057fc:	1d3a      	adds	r2, r7, #4
 80057fe:	f107 0310 	add.w	r3, r7, #16
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fefb 	bl	8006600 <xTaskCheckForTimeOut>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d123      	bne.n	8005858 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005812:	f000 fa3b 	bl	8005c8c <prvIsQueueEmpty>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d017      	beq.n	800584c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	3324      	adds	r3, #36	; 0x24
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	4611      	mov	r1, r2
 8005824:	4618      	mov	r0, r3
 8005826:	f000 fe23 	bl	8006470 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800582a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800582c:	f000 f9dc 	bl	8005be8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005830:	f000 fc5e 	bl	80060f0 <xTaskResumeAll>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d189      	bne.n	800574e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800583a:	4b10      	ldr	r3, [pc, #64]	; (800587c <xQueueReceive+0x1bc>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	e780      	b.n	800574e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800584c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800584e:	f000 f9cb 	bl	8005be8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005852:	f000 fc4d 	bl	80060f0 <xTaskResumeAll>
 8005856:	e77a      	b.n	800574e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585a:	f000 f9c5 	bl	8005be8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800585e:	f000 fc47 	bl	80060f0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005864:	f000 fa12 	bl	8005c8c <prvIsQueueEmpty>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	f43f af6f 	beq.w	800574e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005870:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005872:	4618      	mov	r0, r3
 8005874:	3730      	adds	r7, #48	; 0x30
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08e      	sub	sp, #56	; 0x38
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xQueueSemaphoreTake+0x32>
        __asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	623b      	str	r3, [r7, #32]
    }
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <xQueueSemaphoreTake+0x50>
        __asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	61fb      	str	r3, [r7, #28]
    }
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058d0:	f000 ffba 	bl	8006848 <xTaskGetSchedulerState>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d102      	bne.n	80058e0 <xQueueSemaphoreTake+0x60>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <xQueueSemaphoreTake+0x64>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <xQueueSemaphoreTake+0x66>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	61bb      	str	r3, [r7, #24]
    }
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005900:	f001 fdfa 	bl	80074f8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	2b00      	cmp	r3, #0
 800590e:	d024      	beq.n	800595a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	1e5a      	subs	r2, r3, #1
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d104      	bne.n	800592a <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005920:	f001 f92e 	bl	8006b80 <pvTaskIncrementMutexHeldCount>
 8005924:	4602      	mov	r2, r0
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00f      	beq.n	8005952 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	3310      	adds	r3, #16
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fdea 	bl	8006510 <xTaskRemoveFromEventList>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005942:	4b54      	ldr	r3, [pc, #336]	; (8005a94 <xQueueSemaphoreTake+0x214>)
 8005944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005952:	f001 fe01 	bl	8007558 <vPortExitCritical>
                return pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	e097      	b.n	8005a8a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d111      	bne.n	8005984 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	617b      	str	r3, [r7, #20]
    }
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800597c:	f001 fdec 	bl	8007558 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005980:	2300      	movs	r3, #0
 8005982:	e082      	b.n	8005a8a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800598a:	f107 030c 	add.w	r3, r7, #12
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fe20 	bl	80065d4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005998:	f001 fdde 	bl	8007558 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800599c:	f000 fb9a 	bl	80060d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80059a0:	f001 fdaa 	bl	80074f8 <vPortEnterCritical>
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059aa:	b25b      	sxtb	r3, r3
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d103      	bne.n	80059ba <xQueueSemaphoreTake+0x13a>
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059c0:	b25b      	sxtb	r3, r3
 80059c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c6:	d103      	bne.n	80059d0 <xQueueSemaphoreTake+0x150>
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059d0:	f001 fdc2 	bl	8007558 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059d4:	463a      	mov	r2, r7
 80059d6:	f107 030c 	add.w	r3, r7, #12
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fe0f 	bl	8006600 <xTaskCheckForTimeOut>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d132      	bne.n	8005a4e <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059ea:	f000 f94f 	bl	8005c8c <prvIsQueueEmpty>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d026      	beq.n	8005a42 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 80059fc:	f001 fd7c 	bl	80074f8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 ff3d 	bl	8006884 <xTaskPriorityInherit>
 8005a0a:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8005a0c:	f001 fda4 	bl	8007558 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a12:	3324      	adds	r3, #36	; 0x24
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	4611      	mov	r1, r2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fd29 	bl	8006470 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a20:	f000 f8e2 	bl	8005be8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005a24:	f000 fb64 	bl	80060f0 <xTaskResumeAll>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f47f af68 	bne.w	8005900 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8005a30:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <xQueueSemaphoreTake+0x214>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	e75e      	b.n	8005900 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8005a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a44:	f000 f8d0 	bl	8005be8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005a48:	f000 fb52 	bl	80060f0 <xTaskResumeAll>
 8005a4c:	e758      	b.n	8005900 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8005a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a50:	f000 f8ca 	bl	8005be8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005a54:	f000 fb4c 	bl	80060f0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a5a:	f000 f917 	bl	8005c8c <prvIsQueueEmpty>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f43f af4d 	beq.w	8005900 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00d      	beq.n	8005a88 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8005a6c:	f001 fd44 	bl	80074f8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a72:	f000 f811 	bl	8005a98 <prvGetDisinheritPriorityAfterTimeout>
 8005a76:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fff0 	bl	8006a64 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8005a84:	f001 fd68 	bl	8007558 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005a88:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3738      	adds	r7, #56	; 0x38
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	e000ed04 	.word	0xe000ed04

08005a98 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d006      	beq.n	8005ab6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1c3 0305 	rsb	r3, r3, #5
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e001      	b.n	8005aba <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8005aba:	68fb      	ldr	r3, [r7, #12]
    }
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10d      	bne.n	8005b02 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d14d      	bne.n	8005b8a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 ff3c 	bl	8006970 <xTaskPriorityDisinherit>
 8005af8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	e043      	b.n	8005b8a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d119      	bne.n	8005b3c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6858      	ldr	r0, [r3, #4]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	461a      	mov	r2, r3
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	f002 f8ea 	bl	8007cec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685a      	ldr	r2, [r3, #4]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	441a      	add	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d32b      	bcc.n	8005b8a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	e026      	b.n	8005b8a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68d8      	ldr	r0, [r3, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b44:	461a      	mov	r2, r3
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	f002 f8d0 	bl	8007cec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b54:	425b      	negs	r3, r3
 8005b56:	441a      	add	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d207      	bcs.n	8005b78 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	425b      	negs	r3, r3
 8005b72:	441a      	add	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d105      	bne.n	8005b8a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005b92:	697b      	ldr	r3, [r7, #20]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d018      	beq.n	8005be0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	441a      	add	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d303      	bcc.n	8005bd0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68d9      	ldr	r1, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6838      	ldr	r0, [r7, #0]
 8005bdc:	f002 f886 	bl	8007cec <memcpy>
    }
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005bf0:	f001 fc82 	bl	80074f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bfa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bfc:	e011      	b.n	8005c22 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d012      	beq.n	8005c2c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3324      	adds	r3, #36	; 0x24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fc80 	bl	8006510 <xTaskRemoveFromEventList>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005c16:	f000 fd59 	bl	80066cc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	dce9      	bgt.n	8005bfe <prvUnlockQueue+0x16>
 8005c2a:	e000      	b.n	8005c2e <prvUnlockQueue+0x46>
                        break;
 8005c2c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	22ff      	movs	r2, #255	; 0xff
 8005c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8005c36:	f001 fc8f 	bl	8007558 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005c3a:	f001 fc5d 	bl	80074f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c44:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c46:	e011      	b.n	8005c6c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d012      	beq.n	8005c76 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3310      	adds	r3, #16
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fc5b 	bl	8006510 <xTaskRemoveFromEventList>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005c60:	f000 fd34 	bl	80066cc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005c64:	7bbb      	ldrb	r3, [r7, #14]
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dce9      	bgt.n	8005c48 <prvUnlockQueue+0x60>
 8005c74:	e000      	b.n	8005c78 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005c76:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	22ff      	movs	r2, #255	; 0xff
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005c80:	f001 fc6a 	bl	8007558 <vPortExitCritical>
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005c94:	f001 fc30 	bl	80074f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d102      	bne.n	8005ca6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e001      	b.n	8005caa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005caa:	f001 fc55 	bl	8007558 <vPortExitCritical>

    return xReturn;
 8005cae:	68fb      	ldr	r3, [r7, #12]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005cc0:	f001 fc1a 	bl	80074f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d102      	bne.n	8005cd6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e001      	b.n	8005cda <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005cda:	f001 fc3d 	bl	8007558 <vPortExitCritical>

    return xReturn;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e014      	b.n	8005d22 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005cf8:	4a0f      	ldr	r2, [pc, #60]	; (8005d38 <vQueueAddToRegistry+0x50>)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d04:	490c      	ldr	r1, [pc, #48]	; (8005d38 <vQueueAddToRegistry+0x50>)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <vQueueAddToRegistry+0x50>)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4413      	add	r3, r2
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005d1a:	e006      	b.n	8005d2a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b07      	cmp	r3, #7
 8005d26:	d9e7      	bls.n	8005cf8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20012eac 	.word	0x20012eac

08005d3c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005d4c:	f001 fbd4 	bl	80074f8 <vPortEnterCritical>
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d56:	b25b      	sxtb	r3, r3
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d103      	bne.n	8005d66 <vQueueWaitForMessageRestricted+0x2a>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d103      	bne.n	8005d7c <vQueueWaitForMessageRestricted+0x40>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d7c:	f001 fbec 	bl	8007558 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d106      	bne.n	8005d96 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	3324      	adds	r3, #36	; 0x24
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fb91 	bl	80064b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005d96:	6978      	ldr	r0, [r7, #20]
 8005d98:	f7ff ff26 	bl	8005be8 <prvUnlockQueue>
    }
 8005d9c:	bf00      	nop
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08c      	sub	sp, #48	; 0x30
 8005da8:	af04      	add	r7, sp, #16
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	4613      	mov	r3, r2
 8005db2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005db4:	88fb      	ldrh	r3, [r7, #6]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 fcbf 	bl	800773c <pvPortMalloc>
 8005dbe:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00e      	beq.n	8005de4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005dc6:	2058      	movs	r0, #88	; 0x58
 8005dc8:	f001 fcb8 	bl	800773c <pvPortMalloc>
 8005dcc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8005dda:	e005      	b.n	8005de8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005ddc:	6978      	ldr	r0, [r7, #20]
 8005dde:	f001 fd8d 	bl	80078fc <vPortFree>
 8005de2:	e001      	b.n	8005de8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d013      	beq.n	8005e16 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	2300      	movs	r3, #0
 8005df2:	9303      	str	r3, [sp, #12]
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	9302      	str	r3, [sp, #8]
 8005df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfa:	9301      	str	r3, [sp, #4]
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68b9      	ldr	r1, [r7, #8]
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f000 f80e 	bl	8005e26 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005e0a:	69f8      	ldr	r0, [r7, #28]
 8005e0c:	f000 f8a2 	bl	8005f54 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005e10:	2301      	movs	r3, #1
 8005e12:	61bb      	str	r3, [r7, #24]
 8005e14:	e002      	b.n	8005e1c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e16:	f04f 33ff 	mov.w	r3, #4294967295
 8005e1a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
    }
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3720      	adds	r7, #32
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b088      	sub	sp, #32
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	60f8      	str	r0, [r7, #12]
 8005e2e:	60b9      	str	r1, [r7, #8]
 8005e30:	607a      	str	r2, [r7, #4]
 8005e32:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	21a5      	movs	r1, #165	; 0xa5
 8005e40:	f001 ff62 	bl	8007d08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f023 0307 	bic.w	r3, r3, #7
 8005e5c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	f003 0307 	and.w	r3, r3, #7
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <prvInitialiseNewTask+0x58>
        __asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	617b      	str	r3, [r7, #20]
    }
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01f      	beq.n	8005ec4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e84:	2300      	movs	r3, #0
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	e012      	b.n	8005eb0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	7819      	ldrb	r1, [r3, #0]
 8005e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	3334      	adds	r3, #52	; 0x34
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b09      	cmp	r3, #9
 8005eb4:	d9e9      	bls.n	8005e8a <prvInitialiseNewTask+0x64>
 8005eb6:	e000      	b.n	8005eba <prvInitialiseNewTask+0x94>
            {
                break;
 8005eb8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ec2:	e003      	b.n	8005ecc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d901      	bls.n	8005ed6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ed2:	2304      	movs	r3, #4
 8005ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eda:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	3304      	adds	r3, #4
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fe febf 	bl	8004c70 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	3318      	adds	r3, #24
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe feba 	bl	8004c70 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f00:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	f1c3 0205 	rsb	r2, r3, #5
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	3350      	adds	r3, #80	; 0x50
 8005f16:	2204      	movs	r2, #4
 8005f18:	2100      	movs	r1, #0
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 fef4 	bl	8007d08 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	3354      	adds	r3, #84	; 0x54
 8005f24:	2201      	movs	r2, #1
 8005f26:	2100      	movs	r1, #0
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 feed 	bl	8007d08 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	68f9      	ldr	r1, [r7, #12]
 8005f32:	69b8      	ldr	r0, [r7, #24]
 8005f34:	f001 f9b0 	bl	8007298 <pxPortInitialiseStack>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005f4a:	bf00      	nop
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005f5c:	f001 facc 	bl	80074f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005f60:	4b2c      	ldr	r3, [pc, #176]	; (8006014 <prvAddNewTaskToReadyList+0xc0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3301      	adds	r3, #1
 8005f66:	4a2b      	ldr	r2, [pc, #172]	; (8006014 <prvAddNewTaskToReadyList+0xc0>)
 8005f68:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005f6a:	4b2b      	ldr	r3, [pc, #172]	; (8006018 <prvAddNewTaskToReadyList+0xc4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005f72:	4a29      	ldr	r2, [pc, #164]	; (8006018 <prvAddNewTaskToReadyList+0xc4>)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f78:	4b26      	ldr	r3, [pc, #152]	; (8006014 <prvAddNewTaskToReadyList+0xc0>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d110      	bne.n	8005fa2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005f80:	f000 fbc8 	bl	8006714 <prvInitialiseTaskLists>
 8005f84:	e00d      	b.n	8005fa2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005f86:	4b25      	ldr	r3, [pc, #148]	; (800601c <prvAddNewTaskToReadyList+0xc8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f8e:	4b22      	ldr	r3, [pc, #136]	; (8006018 <prvAddNewTaskToReadyList+0xc4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d802      	bhi.n	8005fa2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005f9c:	4a1e      	ldr	r2, [pc, #120]	; (8006018 <prvAddNewTaskToReadyList+0xc4>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005fa2:	4b1f      	ldr	r3, [pc, #124]	; (8006020 <prvAddNewTaskToReadyList+0xcc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <prvAddNewTaskToReadyList+0xcc>)
 8005faa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005fac:	4b1c      	ldr	r3, [pc, #112]	; (8006020 <prvAddNewTaskToReadyList+0xcc>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	2201      	movs	r2, #1
 8005fba:	409a      	lsls	r2, r3
 8005fbc:	4b19      	ldr	r3, [pc, #100]	; (8006024 <prvAddNewTaskToReadyList+0xd0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	4a18      	ldr	r2, [pc, #96]	; (8006024 <prvAddNewTaskToReadyList+0xd0>)
 8005fc4:	6013      	str	r3, [r2, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4a15      	ldr	r2, [pc, #84]	; (8006028 <prvAddNewTaskToReadyList+0xd4>)
 8005fd4:	441a      	add	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4619      	mov	r1, r3
 8005fdc:	4610      	mov	r0, r2
 8005fde:	f7fe fe54 	bl	8004c8a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005fe2:	f001 fab9 	bl	8007558 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	; (800601c <prvAddNewTaskToReadyList+0xc8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00e      	beq.n	800600c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <prvAddNewTaskToReadyList+0xc4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d207      	bcs.n	800600c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <prvAddNewTaskToReadyList+0xd8>)
 8005ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000174 	.word	0x20000174
 8006018:	2000009c 	.word	0x2000009c
 800601c:	20000180 	.word	0x20000180
 8006020:	20000190 	.word	0x20000190
 8006024:	2000017c 	.word	0x2000017c
 8006028:	200000a0 	.word	0x200000a0
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8006036:	4b20      	ldr	r3, [pc, #128]	; (80060b8 <vTaskStartScheduler+0x88>)
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	2300      	movs	r3, #0
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	2300      	movs	r3, #0
 8006040:	2282      	movs	r2, #130	; 0x82
 8006042:	491e      	ldr	r1, [pc, #120]	; (80060bc <vTaskStartScheduler+0x8c>)
 8006044:	481e      	ldr	r0, [pc, #120]	; (80060c0 <vTaskStartScheduler+0x90>)
 8006046:	f7ff fead 	bl	8005da4 <xTaskCreate>
 800604a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d102      	bne.n	8006058 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006052:	f000 fe0f 	bl	8006c74 <xTimerCreateTimerTask>
 8006056:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d116      	bne.n	800608c <vTaskStartScheduler+0x5c>
        __asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	60bb      	str	r3, [r7, #8]
    }
 8006070:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006072:	4b14      	ldr	r3, [pc, #80]	; (80060c4 <vTaskStartScheduler+0x94>)
 8006074:	f04f 32ff 	mov.w	r2, #4294967295
 8006078:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <vTaskStartScheduler+0x98>)
 800607c:	2201      	movs	r2, #1
 800607e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <vTaskStartScheduler+0x9c>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006086:	f001 f995 	bl	80073b4 <xPortStartScheduler>
 800608a:	e00e      	b.n	80060aa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d10a      	bne.n	80060aa <vTaskStartScheduler+0x7a>
        __asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	607b      	str	r3, [r7, #4]
    }
 80060a6:	bf00      	nop
 80060a8:	e7fe      	b.n	80060a8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80060aa:	4b09      	ldr	r3, [pc, #36]	; (80060d0 <vTaskStartScheduler+0xa0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000198 	.word	0x20000198
 80060bc:	0800ae64 	.word	0x0800ae64
 80060c0:	080066e5 	.word	0x080066e5
 80060c4:	20000194 	.word	0x20000194
 80060c8:	20000180 	.word	0x20000180
 80060cc:	20000178 	.word	0x20000178
 80060d0:	2000000c 	.word	0x2000000c

080060d4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <vTaskSuspendAll+0x18>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	4a03      	ldr	r2, [pc, #12]	; (80060ec <vTaskSuspendAll+0x18>)
 80060e0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80060e2:	bf00      	nop
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	2000019c 	.word	0x2000019c

080060f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80060fe:	4b41      	ldr	r3, [pc, #260]	; (8006204 <xTaskResumeAll+0x114>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <xTaskResumeAll+0x2c>
        __asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	603b      	str	r3, [r7, #0]
    }
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800611c:	f001 f9ec 	bl	80074f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006120:	4b38      	ldr	r3, [pc, #224]	; (8006204 <xTaskResumeAll+0x114>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3b01      	subs	r3, #1
 8006126:	4a37      	ldr	r2, [pc, #220]	; (8006204 <xTaskResumeAll+0x114>)
 8006128:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800612a:	4b36      	ldr	r3, [pc, #216]	; (8006204 <xTaskResumeAll+0x114>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d161      	bne.n	80061f6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006132:	4b35      	ldr	r3, [pc, #212]	; (8006208 <xTaskResumeAll+0x118>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d05d      	beq.n	80061f6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800613a:	e02e      	b.n	800619a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800613c:	4b33      	ldr	r3, [pc, #204]	; (800620c <xTaskResumeAll+0x11c>)
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3318      	adds	r3, #24
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe fdfb 	bl	8004d44 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3304      	adds	r3, #4
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fdf6 	bl	8004d44 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	2201      	movs	r2, #1
 800615e:	409a      	lsls	r2, r3
 8006160:	4b2b      	ldr	r3, [pc, #172]	; (8006210 <xTaskResumeAll+0x120>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4313      	orrs	r3, r2
 8006166:	4a2a      	ldr	r2, [pc, #168]	; (8006210 <xTaskResumeAll+0x120>)
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4a27      	ldr	r2, [pc, #156]	; (8006214 <xTaskResumeAll+0x124>)
 8006178:	441a      	add	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f7fe fd82 	bl	8004c8a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	4b23      	ldr	r3, [pc, #140]	; (8006218 <xTaskResumeAll+0x128>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	429a      	cmp	r2, r3
 8006192:	d302      	bcc.n	800619a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8006194:	4b21      	ldr	r3, [pc, #132]	; (800621c <xTaskResumeAll+0x12c>)
 8006196:	2201      	movs	r2, #1
 8006198:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800619a:	4b1c      	ldr	r3, [pc, #112]	; (800620c <xTaskResumeAll+0x11c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1cc      	bne.n	800613c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80061a8:	f000 fb32 	bl	8006810 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061ac:	4b1c      	ldr	r3, [pc, #112]	; (8006220 <xTaskResumeAll+0x130>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d010      	beq.n	80061da <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80061b8:	f000 f846 	bl	8006248 <xTaskIncrementTick>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 80061c2:	4b16      	ldr	r3, [pc, #88]	; (800621c <xTaskResumeAll+0x12c>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f1      	bne.n	80061b8 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <xTaskResumeAll+0x130>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80061da:	4b10      	ldr	r3, [pc, #64]	; (800621c <xTaskResumeAll+0x12c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d009      	beq.n	80061f6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80061e2:	2301      	movs	r3, #1
 80061e4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80061e6:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <xTaskResumeAll+0x134>)
 80061e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80061f6:	f001 f9af 	bl	8007558 <vPortExitCritical>

    return xAlreadyYielded;
 80061fa:	68bb      	ldr	r3, [r7, #8]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	2000019c 	.word	0x2000019c
 8006208:	20000174 	.word	0x20000174
 800620c:	20000134 	.word	0x20000134
 8006210:	2000017c 	.word	0x2000017c
 8006214:	200000a0 	.word	0x200000a0
 8006218:	2000009c 	.word	0x2000009c
 800621c:	20000188 	.word	0x20000188
 8006220:	20000184 	.word	0x20000184
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800622e:	4b05      	ldr	r3, [pc, #20]	; (8006244 <xTaskGetTickCount+0x1c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006234:	687b      	ldr	r3, [r7, #4]
}
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000178 	.word	0x20000178

08006248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800624e:	2300      	movs	r3, #0
 8006250:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006252:	4b4e      	ldr	r3, [pc, #312]	; (800638c <xTaskIncrementTick+0x144>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	f040 808e 	bne.w	8006378 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800625c:	4b4c      	ldr	r3, [pc, #304]	; (8006390 <xTaskIncrementTick+0x148>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3301      	adds	r3, #1
 8006262:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006264:	4a4a      	ldr	r2, [pc, #296]	; (8006390 <xTaskIncrementTick+0x148>)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d120      	bne.n	80062b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006270:	4b48      	ldr	r3, [pc, #288]	; (8006394 <xTaskIncrementTick+0x14c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <xTaskIncrementTick+0x48>
        __asm volatile
 800627a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	603b      	str	r3, [r7, #0]
    }
 800628c:	bf00      	nop
 800628e:	e7fe      	b.n	800628e <xTaskIncrementTick+0x46>
 8006290:	4b40      	ldr	r3, [pc, #256]	; (8006394 <xTaskIncrementTick+0x14c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	4b40      	ldr	r3, [pc, #256]	; (8006398 <xTaskIncrementTick+0x150>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a3e      	ldr	r2, [pc, #248]	; (8006394 <xTaskIncrementTick+0x14c>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4a3e      	ldr	r2, [pc, #248]	; (8006398 <xTaskIncrementTick+0x150>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b3d      	ldr	r3, [pc, #244]	; (800639c <xTaskIncrementTick+0x154>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3301      	adds	r3, #1
 80062aa:	4a3c      	ldr	r2, [pc, #240]	; (800639c <xTaskIncrementTick+0x154>)
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	f000 faaf 	bl	8006810 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80062b2:	4b3b      	ldr	r3, [pc, #236]	; (80063a0 <xTaskIncrementTick+0x158>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d348      	bcc.n	800634e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062bc:	4b35      	ldr	r3, [pc, #212]	; (8006394 <xTaskIncrementTick+0x14c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c6:	4b36      	ldr	r3, [pc, #216]	; (80063a0 <xTaskIncrementTick+0x158>)
 80062c8:	f04f 32ff 	mov.w	r2, #4294967295
 80062cc:	601a      	str	r2, [r3, #0]
                    break;
 80062ce:	e03e      	b.n	800634e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d0:	4b30      	ldr	r3, [pc, #192]	; (8006394 <xTaskIncrementTick+0x14c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d203      	bcs.n	80062f0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80062e8:	4a2d      	ldr	r2, [pc, #180]	; (80063a0 <xTaskIncrementTick+0x158>)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062ee:	e02e      	b.n	800634e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fe fd25 	bl	8004d44 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d004      	beq.n	800630c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	3318      	adds	r3, #24
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fd1c 	bl	8004d44 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	2201      	movs	r2, #1
 8006312:	409a      	lsls	r2, r3
 8006314:	4b23      	ldr	r3, [pc, #140]	; (80063a4 <xTaskIncrementTick+0x15c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4313      	orrs	r3, r2
 800631a:	4a22      	ldr	r2, [pc, #136]	; (80063a4 <xTaskIncrementTick+0x15c>)
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4a1f      	ldr	r2, [pc, #124]	; (80063a8 <xTaskIncrementTick+0x160>)
 800632c:	441a      	add	r2, r3
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	3304      	adds	r3, #4
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f7fe fca8 	bl	8004c8a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <xTaskIncrementTick+0x164>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	429a      	cmp	r2, r3
 8006346:	d3b9      	bcc.n	80062bc <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006348:	2301      	movs	r3, #1
 800634a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800634c:	e7b6      	b.n	80062bc <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800634e:	4b17      	ldr	r3, [pc, #92]	; (80063ac <xTaskIncrementTick+0x164>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006354:	4914      	ldr	r1, [pc, #80]	; (80063a8 <xTaskIncrementTick+0x160>)
 8006356:	4613      	mov	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d901      	bls.n	800636a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8006366:	2301      	movs	r3, #1
 8006368:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800636a:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <xTaskIncrementTick+0x168>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8006372:	2301      	movs	r3, #1
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e004      	b.n	8006382 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <xTaskIncrementTick+0x16c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	4a0d      	ldr	r2, [pc, #52]	; (80063b4 <xTaskIncrementTick+0x16c>)
 8006380:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006382:	697b      	ldr	r3, [r7, #20]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	2000019c 	.word	0x2000019c
 8006390:	20000178 	.word	0x20000178
 8006394:	2000012c 	.word	0x2000012c
 8006398:	20000130 	.word	0x20000130
 800639c:	2000018c 	.word	0x2000018c
 80063a0:	20000194 	.word	0x20000194
 80063a4:	2000017c 	.word	0x2000017c
 80063a8:	200000a0 	.word	0x200000a0
 80063ac:	2000009c 	.word	0x2000009c
 80063b0:	20000188 	.word	0x20000188
 80063b4:	20000184 	.word	0x20000184

080063b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b087      	sub	sp, #28
 80063bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063be:	4b27      	ldr	r3, [pc, #156]	; (800645c <vTaskSwitchContext+0xa4>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80063c6:	4b26      	ldr	r3, [pc, #152]	; (8006460 <vTaskSwitchContext+0xa8>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80063cc:	e03f      	b.n	800644e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80063ce:	4b24      	ldr	r3, [pc, #144]	; (8006460 <vTaskSwitchContext+0xa8>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d4:	4b23      	ldr	r3, [pc, #140]	; (8006464 <vTaskSwitchContext+0xac>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	fab3 f383 	clz	r3, r3
 80063e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80063e2:	7afb      	ldrb	r3, [r7, #11]
 80063e4:	f1c3 031f 	rsb	r3, r3, #31
 80063e8:	617b      	str	r3, [r7, #20]
 80063ea:	491f      	ldr	r1, [pc, #124]	; (8006468 <vTaskSwitchContext+0xb0>)
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <vTaskSwitchContext+0x5c>
        __asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	607b      	str	r3, [r7, #4]
    }
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <vTaskSwitchContext+0x5a>
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4613      	mov	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4a12      	ldr	r2, [pc, #72]	; (8006468 <vTaskSwitchContext+0xb0>)
 8006420:	4413      	add	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	3308      	adds	r3, #8
 8006436:	429a      	cmp	r2, r3
 8006438:	d104      	bne.n	8006444 <vTaskSwitchContext+0x8c>
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	605a      	str	r2, [r3, #4]
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	4a08      	ldr	r2, [pc, #32]	; (800646c <vTaskSwitchContext+0xb4>)
 800644c:	6013      	str	r3, [r2, #0]
}
 800644e:	bf00      	nop
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	2000019c 	.word	0x2000019c
 8006460:	20000188 	.word	0x20000188
 8006464:	2000017c 	.word	0x2000017c
 8006468:	200000a0 	.word	0x200000a0
 800646c:	2000009c 	.word	0x2000009c

08006470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	60fb      	str	r3, [r7, #12]
    }
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <vTaskPlaceOnEventList+0x44>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3318      	adds	r3, #24
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7fe fc17 	bl	8004cd2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064a4:	2101      	movs	r1, #1
 80064a6:	6838      	ldr	r0, [r7, #0]
 80064a8:	f000 fb7e 	bl	8006ba8 <prvAddCurrentTaskToDelayedList>
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	2000009c 	.word	0x2000009c

080064b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	617b      	str	r3, [r7, #20]
    }
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <vTaskPlaceOnEventListRestricted+0x54>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3318      	adds	r3, #24
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7fe fbce 	bl	8004c8a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	68b8      	ldr	r0, [r7, #8]
 80064fe:	f000 fb53 	bl	8006ba8 <prvAddCurrentTaskToDelayedList>
    }
 8006502:	bf00      	nop
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	2000009c 	.word	0x2000009c

08006510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10a      	bne.n	800653c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	60fb      	str	r3, [r7, #12]
    }
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	3318      	adds	r3, #24
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe fbff 	bl	8004d44 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <xTaskRemoveFromEventList+0xac>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d11c      	bne.n	8006588 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fbf6 	bl	8004d44 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	2201      	movs	r2, #1
 800655e:	409a      	lsls	r2, r3
 8006560:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <xTaskRemoveFromEventList+0xb0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4313      	orrs	r3, r2
 8006566:	4a16      	ldr	r2, [pc, #88]	; (80065c0 <xTaskRemoveFromEventList+0xb0>)
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <xTaskRemoveFromEventList+0xb4>)
 8006578:	441a      	add	r2, r3
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	3304      	adds	r3, #4
 800657e:	4619      	mov	r1, r3
 8006580:	4610      	mov	r0, r2
 8006582:	f7fe fb82 	bl	8004c8a <vListInsertEnd>
 8006586:	e005      	b.n	8006594 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	3318      	adds	r3, #24
 800658c:	4619      	mov	r1, r3
 800658e:	480e      	ldr	r0, [pc, #56]	; (80065c8 <xTaskRemoveFromEventList+0xb8>)
 8006590:	f7fe fb7b 	bl	8004c8a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006598:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <xTaskRemoveFromEventList+0xbc>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	429a      	cmp	r2, r3
 80065a0:	d905      	bls.n	80065ae <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80065a2:	2301      	movs	r3, #1
 80065a4:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <xTaskRemoveFromEventList+0xc0>)
 80065a8:	2201      	movs	r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	e001      	b.n	80065b2 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80065b2:	697b      	ldr	r3, [r7, #20]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	2000019c 	.word	0x2000019c
 80065c0:	2000017c 	.word	0x2000017c
 80065c4:	200000a0 	.word	0x200000a0
 80065c8:	20000134 	.word	0x20000134
 80065cc:	2000009c 	.word	0x2000009c
 80065d0:	20000188 	.word	0x20000188

080065d4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <vTaskInternalSetTimeOutState+0x24>)
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80065e4:	4b05      	ldr	r3, [pc, #20]	; (80065fc <vTaskInternalSetTimeOutState+0x28>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	605a      	str	r2, [r3, #4]
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	2000018c 	.word	0x2000018c
 80065fc:	20000178 	.word	0x20000178

08006600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	613b      	str	r3, [r7, #16]
    }
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60fb      	str	r3, [r7, #12]
    }
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006642:	f000 ff59 	bl	80074f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006646:	4b1f      	ldr	r3, [pc, #124]	; (80066c4 <xTaskCheckForTimeOut+0xc4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d102      	bne.n	8006666 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e026      	b.n	80066b4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <xTaskCheckForTimeOut+0xc8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d00a      	beq.n	8006688 <xTaskCheckForTimeOut+0x88>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	429a      	cmp	r2, r3
 800667a:	d305      	bcc.n	8006688 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800667c:	2301      	movs	r3, #1
 800667e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e015      	b.n	80066b4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	429a      	cmp	r2, r3
 8006690:	d20b      	bcs.n	80066aa <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	1ad2      	subs	r2, r2, r3
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff ff98 	bl	80065d4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e004      	b.n	80066b4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80066b4:	f000 ff50 	bl	8007558 <vPortExitCritical>

    return xReturn;
 80066b8:	69fb      	ldr	r3, [r7, #28]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000178 	.word	0x20000178
 80066c8:	2000018c 	.word	0x2000018c

080066cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <vTaskMissedYield+0x14>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	20000188 	.word	0x20000188

080066e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80066ec:	f000 f852 	bl	8006794 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <prvIdleTask+0x28>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d9f9      	bls.n	80066ec <prvIdleTask+0x8>
                {
                    taskYIELD();
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <prvIdleTask+0x2c>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006708:	e7f0      	b.n	80066ec <prvIdleTask+0x8>
 800670a:	bf00      	nop
 800670c:	200000a0 	.word	0x200000a0
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800671a:	2300      	movs	r3, #0
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	e00c      	b.n	800673a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a12      	ldr	r2, [pc, #72]	; (8006774 <prvInitialiseTaskLists+0x60>)
 800672c:	4413      	add	r3, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fa7e 	bl	8004c30 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3301      	adds	r3, #1
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b04      	cmp	r3, #4
 800673e:	d9ef      	bls.n	8006720 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006740:	480d      	ldr	r0, [pc, #52]	; (8006778 <prvInitialiseTaskLists+0x64>)
 8006742:	f7fe fa75 	bl	8004c30 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006746:	480d      	ldr	r0, [pc, #52]	; (800677c <prvInitialiseTaskLists+0x68>)
 8006748:	f7fe fa72 	bl	8004c30 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800674c:	480c      	ldr	r0, [pc, #48]	; (8006780 <prvInitialiseTaskLists+0x6c>)
 800674e:	f7fe fa6f 	bl	8004c30 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006752:	480c      	ldr	r0, [pc, #48]	; (8006784 <prvInitialiseTaskLists+0x70>)
 8006754:	f7fe fa6c 	bl	8004c30 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006758:	480b      	ldr	r0, [pc, #44]	; (8006788 <prvInitialiseTaskLists+0x74>)
 800675a:	f7fe fa69 	bl	8004c30 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <prvInitialiseTaskLists+0x78>)
 8006760:	4a05      	ldr	r2, [pc, #20]	; (8006778 <prvInitialiseTaskLists+0x64>)
 8006762:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <prvInitialiseTaskLists+0x7c>)
 8006766:	4a05      	ldr	r2, [pc, #20]	; (800677c <prvInitialiseTaskLists+0x68>)
 8006768:	601a      	str	r2, [r3, #0]
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200000a0 	.word	0x200000a0
 8006778:	20000104 	.word	0x20000104
 800677c:	20000118 	.word	0x20000118
 8006780:	20000134 	.word	0x20000134
 8006784:	20000148 	.word	0x20000148
 8006788:	20000160 	.word	0x20000160
 800678c:	2000012c 	.word	0x2000012c
 8006790:	20000130 	.word	0x20000130

08006794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800679a:	e019      	b.n	80067d0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800679c:	f000 feac 	bl	80074f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a0:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <prvCheckTasksWaitingTermination+0x50>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fac9 	bl	8004d44 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4a0b      	ldr	r2, [pc, #44]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067ba:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067c4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80067c6:	f000 fec7 	bl	8007558 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f810 	bl	80067f0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e1      	bne.n	800679c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000148 	.word	0x20000148
 80067e8:	20000174 	.word	0x20000174
 80067ec:	2000015c 	.word	0x2000015c

080067f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f87d 	bl	80078fc <vPortFree>
                vPortFree( pxTCB );
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f001 f87a 	bl	80078fc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <prvResetNextTaskUnblockTime+0x30>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800681e:	4b09      	ldr	r3, [pc, #36]	; (8006844 <prvResetNextTaskUnblockTime+0x34>)
 8006820:	f04f 32ff 	mov.w	r2, #4294967295
 8006824:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006826:	e005      	b.n	8006834 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006828:	4b05      	ldr	r3, [pc, #20]	; (8006840 <prvResetNextTaskUnblockTime+0x30>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a04      	ldr	r2, [pc, #16]	; (8006844 <prvResetNextTaskUnblockTime+0x34>)
 8006832:	6013      	str	r3, [r2, #0]
}
 8006834:	bf00      	nop
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	2000012c 	.word	0x2000012c
 8006844:	20000194 	.word	0x20000194

08006848 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <xTaskGetSchedulerState+0x34>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d102      	bne.n	800685c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006856:	2301      	movs	r3, #1
 8006858:	607b      	str	r3, [r7, #4]
 800685a:	e008      	b.n	800686e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800685c:	4b08      	ldr	r3, [pc, #32]	; (8006880 <xTaskGetSchedulerState+0x38>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006864:	2302      	movs	r3, #2
 8006866:	607b      	str	r3, [r7, #4]
 8006868:	e001      	b.n	800686e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800686e:	687b      	ldr	r3, [r7, #4]
    }
 8006870:	4618      	mov	r0, r3
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	20000180 	.word	0x20000180
 8006880:	2000019c 	.word	0x2000019c

08006884 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d05e      	beq.n	8006958 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	4b31      	ldr	r3, [pc, #196]	; (8006964 <xTaskPriorityInherit+0xe0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d24e      	bcs.n	8006946 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	db06      	blt.n	80068be <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068b0:	4b2c      	ldr	r3, [pc, #176]	; (8006964 <xTaskPriorityInherit+0xe0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b6:	f1c3 0205 	rsb	r2, r3, #5
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6959      	ldr	r1, [r3, #20]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4a26      	ldr	r2, [pc, #152]	; (8006968 <xTaskPriorityInherit+0xe4>)
 80068d0:	4413      	add	r3, r2
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d12f      	bne.n	8006936 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	3304      	adds	r3, #4
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fa32 	bl	8004d44 <uxListRemove>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10a      	bne.n	80068fc <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	2201      	movs	r2, #1
 80068ec:	fa02 f303 	lsl.w	r3, r2, r3
 80068f0:	43da      	mvns	r2, r3
 80068f2:	4b1e      	ldr	r3, [pc, #120]	; (800696c <xTaskPriorityInherit+0xe8>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4013      	ands	r3, r2
 80068f8:	4a1c      	ldr	r2, [pc, #112]	; (800696c <xTaskPriorityInherit+0xe8>)
 80068fa:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80068fc:	4b19      	ldr	r3, [pc, #100]	; (8006964 <xTaskPriorityInherit+0xe0>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690a:	2201      	movs	r2, #1
 800690c:	409a      	lsls	r2, r3
 800690e:	4b17      	ldr	r3, [pc, #92]	; (800696c <xTaskPriorityInherit+0xe8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4313      	orrs	r3, r2
 8006914:	4a15      	ldr	r2, [pc, #84]	; (800696c <xTaskPriorityInherit+0xe8>)
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4a10      	ldr	r2, [pc, #64]	; (8006968 <xTaskPriorityInherit+0xe4>)
 8006926:	441a      	add	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	3304      	adds	r3, #4
 800692c:	4619      	mov	r1, r3
 800692e:	4610      	mov	r0, r2
 8006930:	f7fe f9ab 	bl	8004c8a <vListInsertEnd>
 8006934:	e004      	b.n	8006940 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006936:	4b0b      	ldr	r3, [pc, #44]	; (8006964 <xTaskPriorityInherit+0xe0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e008      	b.n	8006958 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <xTaskPriorityInherit+0xe0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	429a      	cmp	r2, r3
 8006952:	d201      	bcs.n	8006958 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8006954:	2301      	movs	r3, #1
 8006956:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006958:	68fb      	ldr	r3, [r7, #12]
    }
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	2000009c 	.word	0x2000009c
 8006968:	200000a0 	.word	0x200000a0
 800696c:	2000017c 	.word	0x2000017c

08006970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800697c:	2300      	movs	r3, #0
 800697e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d063      	beq.n	8006a4e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006986:	4b34      	ldr	r3, [pc, #208]	; (8006a58 <xTaskPriorityDisinherit+0xe8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	429a      	cmp	r2, r3
 800698e:	d00a      	beq.n	80069a6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60fb      	str	r3, [r7, #12]
    }
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	60bb      	str	r3, [r7, #8]
    }
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c8:	1e5a      	subs	r2, r3, #1
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d039      	beq.n	8006a4e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d135      	bne.n	8006a4e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe f9ac 	bl	8004d44 <uxListRemove>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	2201      	movs	r2, #1
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	43da      	mvns	r2, r3
 80069fe:	4b17      	ldr	r3, [pc, #92]	; (8006a5c <xTaskPriorityDisinherit+0xec>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4013      	ands	r3, r2
 8006a04:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <xTaskPriorityDisinherit+0xec>)
 8006a06:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	f1c3 0205 	rsb	r2, r3, #5
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a20:	2201      	movs	r2, #1
 8006a22:	409a      	lsls	r2, r3
 8006a24:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <xTaskPriorityDisinherit+0xec>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	4a0c      	ldr	r2, [pc, #48]	; (8006a5c <xTaskPriorityDisinherit+0xec>)
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <xTaskPriorityDisinherit+0xf0>)
 8006a3c:	441a      	add	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3304      	adds	r3, #4
 8006a42:	4619      	mov	r1, r3
 8006a44:	4610      	mov	r0, r2
 8006a46:	f7fe f920 	bl	8004c8a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006a4e:	697b      	ldr	r3, [r7, #20]
    }
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	2000009c 	.word	0x2000009c
 8006a5c:	2000017c 	.word	0x2000017c
 8006a60:	200000a0 	.word	0x200000a0

08006a64 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006a72:	2301      	movs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d077      	beq.n	8006b6c <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	60fb      	str	r3, [r7, #12]
    }
 8006a96:	bf00      	nop
 8006a98:	e7fe      	b.n	8006a98 <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d902      	bls.n	8006aaa <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e002      	b.n	8006ab0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab4:	69fa      	ldr	r2, [r7, #28]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d058      	beq.n	8006b6c <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d153      	bne.n	8006b6c <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8006ac4:	4b2b      	ldr	r3, [pc, #172]	; (8006b74 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d10a      	bne.n	8006ae4 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	60bb      	str	r3, [r7, #8]
    }
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	db04      	blt.n	8006b02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f1c3 0205 	rsb	r2, r3, #5
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	6959      	ldr	r1, [r3, #20]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006b12:	4413      	add	r3, r2
 8006b14:	4299      	cmp	r1, r3
 8006b16:	d129      	bne.n	8006b6c <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe f911 	bl	8004d44 <uxListRemove>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10a      	bne.n	8006b3e <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b32:	43da      	mvns	r2, r3
 8006b34:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	4a10      	ldr	r2, [pc, #64]	; (8006b7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b3c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b42:	2201      	movs	r2, #1
 8006b44:	409a      	lsls	r2, r3
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	4a0b      	ldr	r2, [pc, #44]	; (8006b7c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4a06      	ldr	r2, [pc, #24]	; (8006b78 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006b5e:	441a      	add	r2, r3
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f7fe f88f 	bl	8004c8a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006b6c:	bf00      	nop
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	2000009c 	.word	0x2000009c
 8006b78:	200000a0 	.word	0x200000a0
 8006b7c:	2000017c 	.word	0x2000017c

08006b80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8006b84:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b92:	3201      	adds	r2, #1
 8006b94:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8006b96:	4b03      	ldr	r3, [pc, #12]	; (8006ba4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006b98:	681b      	ldr	r3, [r3, #0]
    }
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	2000009c 	.word	0x2000009c

08006ba8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006bb2:	4b29      	ldr	r3, [pc, #164]	; (8006c58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb8:	4b28      	ldr	r3, [pc, #160]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fe f8c0 	bl	8004d44 <uxListRemove>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10b      	bne.n	8006be2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006bca:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	43da      	mvns	r2, r3
 8006bd8:	4b21      	ldr	r3, [pc, #132]	; (8006c60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	4a20      	ldr	r2, [pc, #128]	; (8006c60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006be0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d10a      	bne.n	8006c00 <prvAddCurrentTaskToDelayedList+0x58>
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d007      	beq.n	8006c00 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf0:	4b1a      	ldr	r3, [pc, #104]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	481a      	ldr	r0, [pc, #104]	; (8006c64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006bfa:	f7fe f846 	bl	8004c8a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006bfe:	e026      	b.n	8006c4e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4413      	add	r3, r2
 8006c06:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c08:	4b14      	ldr	r3, [pc, #80]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d209      	bcs.n	8006c2c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c18:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f7fe f854 	bl	8004cd2 <vListInsert>
}
 8006c2a:	e010      	b.n	8006c4e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f7fe f84a 	bl	8004cd2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d202      	bcs.n	8006c4e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006c48:	4a09      	ldr	r2, [pc, #36]	; (8006c70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6013      	str	r3, [r2, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000178 	.word	0x20000178
 8006c5c:	2000009c 	.word	0x2000009c
 8006c60:	2000017c 	.word	0x2000017c
 8006c64:	20000160 	.word	0x20000160
 8006c68:	20000130 	.word	0x20000130
 8006c6c:	2000012c 	.word	0x2000012c
 8006c70:	20000194 	.word	0x20000194

08006c74 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006c7e:	f000 fad5 	bl	800722c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006c82:	4b11      	ldr	r3, [pc, #68]	; (8006cc8 <xTimerCreateTimerTask+0x54>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006c8a:	4b10      	ldr	r3, [pc, #64]	; (8006ccc <xTimerCreateTimerTask+0x58>)
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	2302      	movs	r3, #2
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006c98:	490d      	ldr	r1, [pc, #52]	; (8006cd0 <xTimerCreateTimerTask+0x5c>)
 8006c9a:	480e      	ldr	r0, [pc, #56]	; (8006cd4 <xTimerCreateTimerTask+0x60>)
 8006c9c:	f7ff f882 	bl	8005da4 <xTaskCreate>
 8006ca0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	603b      	str	r3, [r7, #0]
    }
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006cbe:	687b      	ldr	r3, [r7, #4]
    }
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	200001d0 	.word	0x200001d0
 8006ccc:	200001d4 	.word	0x200001d4
 8006cd0:	0800ae6c 	.word	0x0800ae6c
 8006cd4:	08006e0d 	.word	0x08006e0d

08006cd8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10a      	bne.n	8006d06 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	623b      	str	r3, [r7, #32]
    }
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006d06:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <xTimerGenericCommand+0x98>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d02a      	beq.n	8006d64 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	dc18      	bgt.n	8006d52 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d20:	f7ff fd92 	bl	8006848 <xTaskGetSchedulerState>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d109      	bne.n	8006d3e <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d2a:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <xTimerGenericCommand+0x98>)
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	f107 0114 	add.w	r1, r7, #20
 8006d32:	2300      	movs	r3, #0
 8006d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d36:	f7fe fb1b 	bl	8005370 <xQueueGenericSend>
 8006d3a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d3c:	e012      	b.n	8006d64 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	; (8006d70 <xTimerGenericCommand+0x98>)
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	f107 0114 	add.w	r1, r7, #20
 8006d46:	2300      	movs	r3, #0
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f7fe fb11 	bl	8005370 <xQueueGenericSend>
 8006d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d50:	e008      	b.n	8006d64 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <xTimerGenericCommand+0x98>)
 8006d54:	6818      	ldr	r0, [r3, #0]
 8006d56:	f107 0114 	add.w	r1, r7, #20
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	f7fe fc05 	bl	800556c <xQueueGenericSendFromISR>
 8006d62:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006d66:	4618      	mov	r0, r3
 8006d68:	3728      	adds	r7, #40	; 0x28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	200001d0 	.word	0x200001d0

08006d74 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7e:	4b22      	ldr	r3, [pc, #136]	; (8006e08 <prvProcessExpiredTimer+0x94>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fd ffd9 	bl	8004d44 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d022      	beq.n	8006de6 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	699a      	ldr	r2, [r3, #24]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	18d1      	adds	r1, r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	6978      	ldr	r0, [r7, #20]
 8006dae:	f000 f8d1 	bl	8006f54 <prvInsertTimerInActiveList>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01f      	beq.n	8006df8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006db8:	2300      	movs	r3, #0
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6978      	ldr	r0, [r7, #20]
 8006dc4:	f7ff ff88 	bl	8006cd8 <xTimerGenericCommand>
 8006dc8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d113      	bne.n	8006df8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	60fb      	str	r3, [r7, #12]
    }
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dec:	f023 0301 	bic.w	r3, r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	6978      	ldr	r0, [r7, #20]
 8006dfe:	4798      	blx	r3
    }
 8006e00:	bf00      	nop
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200001c8 	.word	0x200001c8

08006e0c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e14:	f107 0308 	add.w	r3, r7, #8
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 f857 	bl	8006ecc <prvGetNextExpireTime>
 8006e1e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	4619      	mov	r1, r3
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f803 	bl	8006e30 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006e2a:	f000 f8d5 	bl	8006fd8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e2e:	e7f1      	b.n	8006e14 <prvTimerTask+0x8>

08006e30 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006e3a:	f7ff f94b 	bl	80060d4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e3e:	f107 0308 	add.w	r3, r7, #8
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 f866 	bl	8006f14 <prvSampleTimeNow>
 8006e48:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d130      	bne.n	8006eb2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10a      	bne.n	8006e6c <prvProcessTimerOrBlockTask+0x3c>
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d806      	bhi.n	8006e6c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006e5e:	f7ff f947 	bl	80060f0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff85 	bl	8006d74 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006e6a:	e024      	b.n	8006eb6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e72:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <prvProcessTimerOrBlockTask+0x90>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <prvProcessTimerOrBlockTask+0x50>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <prvProcessTimerOrBlockTask+0x52>
 8006e80:	2300      	movs	r3, #0
 8006e82:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <prvProcessTimerOrBlockTask+0x94>)
 8006e86:	6818      	ldr	r0, [r3, #0]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	4619      	mov	r1, r3
 8006e92:	f7fe ff53 	bl	8005d3c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006e96:	f7ff f92b 	bl	80060f0 <xTaskResumeAll>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006ea0:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <prvProcessTimerOrBlockTask+0x98>)
 8006ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	f3bf 8f6f 	isb	sy
    }
 8006eb0:	e001      	b.n	8006eb6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006eb2:	f7ff f91d 	bl	80060f0 <xTaskResumeAll>
    }
 8006eb6:	bf00      	nop
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200001cc 	.word	0x200001cc
 8006ec4:	200001d0 	.word	0x200001d0
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ed4:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <prvGetNextExpireTime+0x44>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <prvGetNextExpireTime+0x16>
 8006ede:	2201      	movs	r2, #1
 8006ee0:	e000      	b.n	8006ee4 <prvGetNextExpireTime+0x18>
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <prvGetNextExpireTime+0x44>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e001      	b.n	8006f00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006f00:	68fb      	ldr	r3, [r7, #12]
    }
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	200001c8 	.word	0x200001c8

08006f14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006f1c:	f7ff f984 	bl	8006228 <xTaskGetTickCount>
 8006f20:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006f22:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <prvSampleTimeNow+0x3c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d205      	bcs.n	8006f38 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006f2c:	f000 f91a 	bl	8007164 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e002      	b.n	8006f3e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006f3e:	4a04      	ldr	r2, [pc, #16]	; (8006f50 <prvSampleTimeNow+0x3c>)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006f44:	68fb      	ldr	r3, [r7, #12]
    }
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200001d8 	.word	0x200001d8

08006f54 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d812      	bhi.n	8006fa0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	1ad2      	subs	r2, r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d302      	bcc.n	8006f8e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e01b      	b.n	8006fc6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f8e:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <prvInsertTimerInActiveList+0x7c>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7fd fe9a 	bl	8004cd2 <vListInsert>
 8006f9e:	e012      	b.n	8006fc6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d206      	bcs.n	8006fb6 <prvInsertTimerInActiveList+0x62>
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d302      	bcc.n	8006fb6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	617b      	str	r3, [r7, #20]
 8006fb4:	e007      	b.n	8006fc6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fb6:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <prvInsertTimerInActiveList+0x80>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	4610      	mov	r0, r2
 8006fc2:	f7fd fe86 	bl	8004cd2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006fc6:	697b      	ldr	r3, [r7, #20]
    }
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3718      	adds	r7, #24
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	200001cc 	.word	0x200001cc
 8006fd4:	200001c8 	.word	0x200001c8

08006fd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08c      	sub	sp, #48	; 0x30
 8006fdc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fde:	e0ae      	b.n	800713e <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f2c0 80aa 	blt.w	800713c <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fd fea3 	bl	8004d44 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff ff87 	bl	8006f14 <prvSampleTimeNow>
 8007006:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b09      	cmp	r3, #9
 800700c:	f200 8097 	bhi.w	800713e <prvProcessReceivedCommands+0x166>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <prvProcessReceivedCommands+0x40>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	08007041 	.word	0x08007041
 800701c:	08007041 	.word	0x08007041
 8007020:	08007041 	.word	0x08007041
 8007024:	080070b5 	.word	0x080070b5
 8007028:	080070c9 	.word	0x080070c9
 800702c:	08007113 	.word	0x08007113
 8007030:	08007041 	.word	0x08007041
 8007034:	08007041 	.word	0x08007041
 8007038:	080070b5 	.word	0x080070b5
 800703c:	080070c9 	.word	0x080070c9
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007046:	f043 0301 	orr.w	r3, r3, #1
 800704a:	b2da      	uxtb	r2, r3
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	18d1      	adds	r1, r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a3a      	ldr	r2, [r7, #32]
 800705e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007060:	f7ff ff78 	bl	8006f54 <prvInsertTimerInActiveList>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d069      	beq.n	800713e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007070:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b00      	cmp	r3, #0
 800707e:	d05e      	beq.n	800713e <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	441a      	add	r2, r3
 8007088:	2300      	movs	r3, #0
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	2300      	movs	r3, #0
 800708e:	2100      	movs	r1, #0
 8007090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007092:	f7ff fe21 	bl	8006cd8 <xTimerGenericCommand>
 8007096:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d14f      	bne.n	800713e <prvProcessReceivedCommands+0x166>
        __asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	61bb      	str	r3, [r7, #24]
    }
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ba:	f023 0301 	bic.w	r3, r3, #1
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80070c6:	e03a      	b.n	800713e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <prvProcessReceivedCommands+0x126>
        __asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	617b      	str	r3, [r7, #20]
    }
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	18d1      	adds	r1, r2, r3
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	6a3a      	ldr	r2, [r7, #32]
 800710a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800710c:	f7ff ff22 	bl	8006f54 <prvInsertTimerInActiveList>
                        break;
 8007110:	e015      	b.n	800713e <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007122:	f000 fbeb 	bl	80078fc <vPortFree>
 8007126:	e00a      	b.n	800713e <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	b2da      	uxtb	r2, r3
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800713a:	e000      	b.n	800713e <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800713c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800713e:	4b08      	ldr	r3, [pc, #32]	; (8007160 <prvProcessReceivedCommands+0x188>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f107 0108 	add.w	r1, r7, #8
 8007146:	2200      	movs	r2, #0
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe fab9 	bl	80056c0 <xQueueReceive>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	f47f af45 	bne.w	8006fe0 <prvProcessReceivedCommands+0x8>
        }
    }
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	3728      	adds	r7, #40	; 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	200001d0 	.word	0x200001d0

08007164 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007164:	b580      	push	{r7, lr}
 8007166:	b088      	sub	sp, #32
 8007168:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800716a:	e048      	b.n	80071fe <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800716c:	4b2d      	ldr	r3, [pc, #180]	; (8007224 <prvSwitchTimerLists+0xc0>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007176:	4b2b      	ldr	r3, [pc, #172]	; (8007224 <prvSwitchTimerLists+0xc0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7fd fddd 	bl	8004d44 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	d02e      	beq.n	80071fe <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4413      	add	r3, r2
 80071a8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d90e      	bls.n	80071d0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071be:	4b19      	ldr	r3, [pc, #100]	; (8007224 <prvSwitchTimerLists+0xc0>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	3304      	adds	r3, #4
 80071c6:	4619      	mov	r1, r3
 80071c8:	4610      	mov	r0, r2
 80071ca:	f7fd fd82 	bl	8004cd2 <vListInsert>
 80071ce:	e016      	b.n	80071fe <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071d0:	2300      	movs	r3, #0
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	2100      	movs	r1, #0
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fd7c 	bl	8006cd8 <xTimerGenericCommand>
 80071e0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <prvSwitchTimerLists+0x9a>
        __asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	603b      	str	r3, [r7, #0]
    }
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <prvSwitchTimerLists+0xc0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1b1      	bne.n	800716c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <prvSwitchTimerLists+0xc0>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800720e:	4b06      	ldr	r3, [pc, #24]	; (8007228 <prvSwitchTimerLists+0xc4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a04      	ldr	r2, [pc, #16]	; (8007224 <prvSwitchTimerLists+0xc0>)
 8007214:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007216:	4a04      	ldr	r2, [pc, #16]	; (8007228 <prvSwitchTimerLists+0xc4>)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	6013      	str	r3, [r2, #0]
    }
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	200001c8 	.word	0x200001c8
 8007228:	200001cc 	.word	0x200001cc

0800722c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007230:	f000 f962 	bl	80074f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007234:	4b12      	ldr	r3, [pc, #72]	; (8007280 <prvCheckForValidListAndQueue+0x54>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d11d      	bne.n	8007278 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800723c:	4811      	ldr	r0, [pc, #68]	; (8007284 <prvCheckForValidListAndQueue+0x58>)
 800723e:	f7fd fcf7 	bl	8004c30 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007242:	4811      	ldr	r0, [pc, #68]	; (8007288 <prvCheckForValidListAndQueue+0x5c>)
 8007244:	f7fd fcf4 	bl	8004c30 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007248:	4b10      	ldr	r3, [pc, #64]	; (800728c <prvCheckForValidListAndQueue+0x60>)
 800724a:	4a0e      	ldr	r2, [pc, #56]	; (8007284 <prvCheckForValidListAndQueue+0x58>)
 800724c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <prvCheckForValidListAndQueue+0x64>)
 8007250:	4a0d      	ldr	r2, [pc, #52]	; (8007288 <prvCheckForValidListAndQueue+0x5c>)
 8007252:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007254:	2200      	movs	r2, #0
 8007256:	210c      	movs	r1, #12
 8007258:	200a      	movs	r0, #10
 800725a:	f7fd ffd5 	bl	8005208 <xQueueGenericCreate>
 800725e:	4603      	mov	r3, r0
 8007260:	4a07      	ldr	r2, [pc, #28]	; (8007280 <prvCheckForValidListAndQueue+0x54>)
 8007262:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <prvCheckForValidListAndQueue+0x54>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800726c:	4b04      	ldr	r3, [pc, #16]	; (8007280 <prvCheckForValidListAndQueue+0x54>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4908      	ldr	r1, [pc, #32]	; (8007294 <prvCheckForValidListAndQueue+0x68>)
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fd38 	bl	8005ce8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007278:	f000 f96e 	bl	8007558 <vPortExitCritical>
    }
 800727c:	bf00      	nop
 800727e:	bd80      	pop	{r7, pc}
 8007280:	200001d0 	.word	0x200001d0
 8007284:	200001a0 	.word	0x200001a0
 8007288:	200001b4 	.word	0x200001b4
 800728c:	200001c8 	.word	0x200001c8
 8007290:	200001cc 	.word	0x200001cc
 8007294:	0800ae74 	.word	0x0800ae74

08007298 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3b04      	subs	r3, #4
 80072a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3b04      	subs	r3, #4
 80072b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f023 0201 	bic.w	r2, r3, #1
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	3b04      	subs	r3, #4
 80072c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80072c8:	4a0c      	ldr	r2, [pc, #48]	; (80072fc <pxPortInitialiseStack+0x64>)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3b14      	subs	r3, #20
 80072d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3b04      	subs	r3, #4
 80072de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f06f 0202 	mvn.w	r2, #2
 80072e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3b20      	subs	r3, #32
 80072ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80072ee:	68fb      	ldr	r3, [r7, #12]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	08007301 	.word	0x08007301

08007300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800730a:	4b12      	ldr	r3, [pc, #72]	; (8007354 <prvTaskExitError+0x54>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d00a      	beq.n	800732a <prvTaskExitError+0x2a>
        __asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	60fb      	str	r3, [r7, #12]
    }
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <prvTaskExitError+0x28>
        __asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	60bb      	str	r3, [r7, #8]
    }
 800733c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800733e:	bf00      	nop
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0fc      	beq.n	8007340 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	20000010 	.word	0x20000010
	...

08007360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <pxCurrentTCBConst2>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	f380 8809 	msr	PSP, r0
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	4770      	bx	lr
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst2>:
 8007380:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007388:	4808      	ldr	r0, [pc, #32]	; (80073ac <prvPortStartFirstTask+0x24>)
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f380 8808 	msr	MSP, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8814 	msr	CONTROL, r0
 800739a:	b662      	cpsie	i
 800739c:	b661      	cpsie	f
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	df00      	svc	0
 80073a8:	bf00      	nop
 80073aa:	0000      	.short	0x0000
 80073ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop

080073b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073ba:	4b46      	ldr	r3, [pc, #280]	; (80074d4 <xPortStartScheduler+0x120>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a46      	ldr	r2, [pc, #280]	; (80074d8 <xPortStartScheduler+0x124>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d10a      	bne.n	80073da <xPortStartScheduler+0x26>
        __asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	613b      	str	r3, [r7, #16]
    }
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073da:	4b3e      	ldr	r3, [pc, #248]	; (80074d4 <xPortStartScheduler+0x120>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a3f      	ldr	r2, [pc, #252]	; (80074dc <xPortStartScheduler+0x128>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d10a      	bne.n	80073fa <xPortStartScheduler+0x46>
        __asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	60fb      	str	r3, [r7, #12]
    }
 80073f6:	bf00      	nop
 80073f8:	e7fe      	b.n	80073f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073fa:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <xPortStartScheduler+0x12c>)
 80073fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b2db      	uxtb	r3, r3
 8007404:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	22ff      	movs	r2, #255	; 0xff
 800740a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	b2db      	uxtb	r3, r3
 8007418:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800741c:	b2da      	uxtb	r2, r3
 800741e:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <xPortStartScheduler+0x130>)
 8007420:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007422:	4b31      	ldr	r3, [pc, #196]	; (80074e8 <xPortStartScheduler+0x134>)
 8007424:	2207      	movs	r2, #7
 8007426:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007428:	e009      	b.n	800743e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800742a:	4b2f      	ldr	r3, [pc, #188]	; (80074e8 <xPortStartScheduler+0x134>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3b01      	subs	r3, #1
 8007430:	4a2d      	ldr	r2, [pc, #180]	; (80074e8 <xPortStartScheduler+0x134>)
 8007432:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	b2db      	uxtb	r3, r3
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	b2db      	uxtb	r3, r3
 800743c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800743e:	78fb      	ldrb	r3, [r7, #3]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d0ef      	beq.n	800742a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800744a:	4b27      	ldr	r3, [pc, #156]	; (80074e8 <xPortStartScheduler+0x134>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f1c3 0307 	rsb	r3, r3, #7
 8007452:	2b04      	cmp	r3, #4
 8007454:	d00a      	beq.n	800746c <xPortStartScheduler+0xb8>
        __asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60bb      	str	r3, [r7, #8]
    }
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800746c:	4b1e      	ldr	r3, [pc, #120]	; (80074e8 <xPortStartScheduler+0x134>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	4a1d      	ldr	r2, [pc, #116]	; (80074e8 <xPortStartScheduler+0x134>)
 8007474:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007476:	4b1c      	ldr	r3, [pc, #112]	; (80074e8 <xPortStartScheduler+0x134>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800747e:	4a1a      	ldr	r2, [pc, #104]	; (80074e8 <xPortStartScheduler+0x134>)
 8007480:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	b2da      	uxtb	r2, r3
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800748a:	4b18      	ldr	r3, [pc, #96]	; (80074ec <xPortStartScheduler+0x138>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a17      	ldr	r2, [pc, #92]	; (80074ec <xPortStartScheduler+0x138>)
 8007490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007494:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007496:	4b15      	ldr	r3, [pc, #84]	; (80074ec <xPortStartScheduler+0x138>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a14      	ldr	r2, [pc, #80]	; (80074ec <xPortStartScheduler+0x138>)
 800749c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80074a2:	f000 f8db 	bl	800765c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80074a6:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <xPortStartScheduler+0x13c>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80074ac:	f000 f8fa 	bl	80076a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074b0:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <xPortStartScheduler+0x140>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a0f      	ldr	r2, [pc, #60]	; (80074f4 <xPortStartScheduler+0x140>)
 80074b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80074bc:	f7ff ff64 	bl	8007388 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80074c0:	f7fe ff7a 	bl	80063b8 <vTaskSwitchContext>
    prvTaskExitError();
 80074c4:	f7ff ff1c 	bl	8007300 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	e000ed00 	.word	0xe000ed00
 80074d8:	410fc271 	.word	0x410fc271
 80074dc:	410fc270 	.word	0x410fc270
 80074e0:	e000e400 	.word	0xe000e400
 80074e4:	200001dc 	.word	0x200001dc
 80074e8:	200001e0 	.word	0x200001e0
 80074ec:	e000ed20 	.word	0xe000ed20
 80074f0:	20000010 	.word	0x20000010
 80074f4:	e000ef34 	.word	0xe000ef34

080074f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
        __asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	607b      	str	r3, [r7, #4]
    }
 8007510:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <vPortEnterCritical+0x58>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	4a0d      	ldr	r2, [pc, #52]	; (8007550 <vPortEnterCritical+0x58>)
 800751a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800751c:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <vPortEnterCritical+0x58>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d10f      	bne.n	8007544 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007524:	4b0b      	ldr	r3, [pc, #44]	; (8007554 <vPortEnterCritical+0x5c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00a      	beq.n	8007544 <vPortEnterCritical+0x4c>
        __asm volatile
 800752e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007532:	f383 8811 	msr	BASEPRI, r3
 8007536:	f3bf 8f6f 	isb	sy
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	603b      	str	r3, [r7, #0]
    }
 8007540:	bf00      	nop
 8007542:	e7fe      	b.n	8007542 <vPortEnterCritical+0x4a>
    }
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	20000010 	.word	0x20000010
 8007554:	e000ed04 	.word	0xe000ed04

08007558 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800755e:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <vPortExitCritical+0x50>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <vPortExitCritical+0x24>
        __asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	607b      	str	r3, [r7, #4]
    }
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800757c:	4b0a      	ldr	r3, [pc, #40]	; (80075a8 <vPortExitCritical+0x50>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3b01      	subs	r3, #1
 8007582:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <vPortExitCritical+0x50>)
 8007584:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007586:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <vPortExitCritical+0x50>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d105      	bne.n	800759a <vPortExitCritical+0x42>
 800758e:	2300      	movs	r3, #0
 8007590:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	f383 8811 	msr	BASEPRI, r3
    }
 8007598:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000010 	.word	0x20000010
 80075ac:	00000000 	.word	0x00000000

080075b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80075b0:	f3ef 8009 	mrs	r0, PSP
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <pxCurrentTCBConst>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f01e 0f10 	tst.w	lr, #16
 80075c0:	bf08      	it	eq
 80075c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	6010      	str	r0, [r2, #0]
 80075cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075d4:	f380 8811 	msr	BASEPRI, r0
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f7fe feea 	bl	80063b8 <vTaskSwitchContext>
 80075e4:	f04f 0000 	mov.w	r0, #0
 80075e8:	f380 8811 	msr	BASEPRI, r0
 80075ec:	bc09      	pop	{r0, r3}
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	6808      	ldr	r0, [r1, #0]
 80075f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f6:	f01e 0f10 	tst.w	lr, #16
 80075fa:	bf08      	it	eq
 80075fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007600:	f380 8809 	msr	PSP, r0
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst>:
 8007610:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
        __asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
    }
 8007630:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007632:	f7fe fe09 	bl	8006248 <xTaskIncrementTick>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <SysTick_Handler+0x40>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f383 8811 	msr	BASEPRI, r3
    }
 800764e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <vPortSetupTimerInterrupt+0x38>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <vPortSetupTimerInterrupt+0x3c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <vPortSetupTimerInterrupt+0x40>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	099b      	lsrs	r3, r3, #6
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <vPortSetupTimerInterrupt+0x44>)
 800767a:	3b01      	subs	r3, #1
 800767c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007680:	2207      	movs	r2, #7
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	e000e010 	.word	0xe000e010
 8007694:	e000e018 	.word	0xe000e018
 8007698:	20000000 	.word	0x20000000
 800769c:	10624dd3 	.word	0x10624dd3
 80076a0:	e000e014 	.word	0xe000e014

080076a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80076a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076b4 <vPortEnableVFP+0x10>
 80076a8:	6801      	ldr	r1, [r0, #0]
 80076aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ae:	6001      	str	r1, [r0, #0]
 80076b0:	4770      	bx	lr
 80076b2:	0000      	.short	0x0000
 80076b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop

080076bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80076c2:	f3ef 8305 	mrs	r3, IPSR
 80076c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b0f      	cmp	r3, #15
 80076cc:	d914      	bls.n	80076f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ce:	4a17      	ldr	r2, [pc, #92]	; (800772c <vPortValidateInterruptPriority+0x70>)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076d8:	4b15      	ldr	r3, [pc, #84]	; (8007730 <vPortValidateInterruptPriority+0x74>)
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	7afa      	ldrb	r2, [r7, #11]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d20a      	bcs.n	80076f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	f383 8811 	msr	BASEPRI, r3
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	607b      	str	r3, [r7, #4]
    }
 80076f4:	bf00      	nop
 80076f6:	e7fe      	b.n	80076f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076f8:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <vPortValidateInterruptPriority+0x78>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007700:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <vPortValidateInterruptPriority+0x7c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d90a      	bls.n	800771e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	603b      	str	r3, [r7, #0]
    }
 800771a:	bf00      	nop
 800771c:	e7fe      	b.n	800771c <vPortValidateInterruptPriority+0x60>
    }
 800771e:	bf00      	nop
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	e000e3f0 	.word	0xe000e3f0
 8007730:	200001dc 	.word	0x200001dc
 8007734:	e000ed0c 	.word	0xe000ed0c
 8007738:	200001e0 	.word	0x200001e0

0800773c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007748:	f7fe fcc4 	bl	80060d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800774c:	4b65      	ldr	r3, [pc, #404]	; (80078e4 <pvPortMalloc+0x1a8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007754:	f000 f934 	bl	80079c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007758:	4b63      	ldr	r3, [pc, #396]	; (80078e8 <pvPortMalloc+0x1ac>)
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4013      	ands	r3, r2
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 80a7 	bne.w	80078b4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d02d      	beq.n	80077c8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800776c:	2208      	movs	r2, #8
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	429a      	cmp	r2, r3
 8007776:	d227      	bcs.n	80077c8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8007778:	2208      	movs	r2, #8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4413      	add	r3, r2
 800777e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	2b00      	cmp	r3, #0
 8007788:	d021      	beq.n	80077ce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f023 0307 	bic.w	r3, r3, #7
 8007790:	3308      	adds	r3, #8
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	429a      	cmp	r2, r3
 8007796:	d214      	bcs.n	80077c2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f023 0307 	bic.w	r3, r3, #7
 800779e:	3308      	adds	r3, #8
 80077a0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f003 0307 	and.w	r3, r3, #7
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d010      	beq.n	80077ce <pvPortMalloc+0x92>
        __asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	617b      	str	r3, [r7, #20]
    }
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077c6:	e002      	b.n	80077ce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	e000      	b.n	80077d0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077ce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d06e      	beq.n	80078b4 <pvPortMalloc+0x178>
 80077d6:	4b45      	ldr	r3, [pc, #276]	; (80078ec <pvPortMalloc+0x1b0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d869      	bhi.n	80078b4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80077e0:	4b43      	ldr	r3, [pc, #268]	; (80078f0 <pvPortMalloc+0x1b4>)
 80077e2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80077e4:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <pvPortMalloc+0x1b4>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ea:	e004      	b.n	80077f6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d903      	bls.n	8007808 <pvPortMalloc+0xcc>
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f1      	bne.n	80077ec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007808:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <pvPortMalloc+0x1a8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780e:	429a      	cmp	r2, r3
 8007810:	d050      	beq.n	80078b4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2208      	movs	r2, #8
 8007818:	4413      	add	r3, r2
 800781a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	1ad2      	subs	r2, r2, r3
 800782c:	2308      	movs	r3, #8
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	429a      	cmp	r2, r3
 8007832:	d91f      	bls.n	8007874 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4413      	add	r3, r2
 800783a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <pvPortMalloc+0x120>
        __asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	613b      	str	r3, [r7, #16]
    }
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800786e:	69b8      	ldr	r0, [r7, #24]
 8007870:	f000 f908 	bl	8007a84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007874:	4b1d      	ldr	r3, [pc, #116]	; (80078ec <pvPortMalloc+0x1b0>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	4a1b      	ldr	r2, [pc, #108]	; (80078ec <pvPortMalloc+0x1b0>)
 8007880:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007882:	4b1a      	ldr	r3, [pc, #104]	; (80078ec <pvPortMalloc+0x1b0>)
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	4b1b      	ldr	r3, [pc, #108]	; (80078f4 <pvPortMalloc+0x1b8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d203      	bcs.n	8007896 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800788e:	4b17      	ldr	r3, [pc, #92]	; (80078ec <pvPortMalloc+0x1b0>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a18      	ldr	r2, [pc, #96]	; (80078f4 <pvPortMalloc+0x1b8>)
 8007894:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <pvPortMalloc+0x1ac>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	431a      	orrs	r2, r3
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80078aa:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <pvPortMalloc+0x1bc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	3301      	adds	r3, #1
 80078b0:	4a11      	ldr	r2, [pc, #68]	; (80078f8 <pvPortMalloc+0x1bc>)
 80078b2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80078b4:	f7fe fc1c 	bl	80060f0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <pvPortMalloc+0x19c>
        __asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	60fb      	str	r3, [r7, #12]
    }
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <pvPortMalloc+0x19a>
    return pvReturn;
 80078d8:	69fb      	ldr	r3, [r7, #28]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3728      	adds	r7, #40	; 0x28
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20012dec 	.word	0x20012dec
 80078e8:	20012e00 	.word	0x20012e00
 80078ec:	20012df0 	.word	0x20012df0
 80078f0:	20012de4 	.word	0x20012de4
 80078f4:	20012df4 	.word	0x20012df4
 80078f8:	20012df8 	.word	0x20012df8

080078fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d04d      	beq.n	80079aa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800790e:	2308      	movs	r3, #8
 8007910:	425b      	negs	r3, r3
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4413      	add	r3, r2
 8007916:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <vPortFree+0xb8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4013      	ands	r3, r2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10a      	bne.n	8007940 <vPortFree+0x44>
        __asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	60fb      	str	r3, [r7, #12]
    }
 800793c:	bf00      	nop
 800793e:	e7fe      	b.n	800793e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <vPortFree+0x62>
        __asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	60bb      	str	r3, [r7, #8]
    }
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	4b14      	ldr	r3, [pc, #80]	; (80079b4 <vPortFree+0xb8>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4013      	ands	r3, r2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01e      	beq.n	80079aa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d11a      	bne.n	80079aa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <vPortFree+0xb8>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	43db      	mvns	r3, r3
 800797e:	401a      	ands	r2, r3
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007984:	f7fe fba6 	bl	80060d4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	4b0a      	ldr	r3, [pc, #40]	; (80079b8 <vPortFree+0xbc>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4413      	add	r3, r2
 8007992:	4a09      	ldr	r2, [pc, #36]	; (80079b8 <vPortFree+0xbc>)
 8007994:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007996:	6938      	ldr	r0, [r7, #16]
 8007998:	f000 f874 	bl	8007a84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800799c:	4b07      	ldr	r3, [pc, #28]	; (80079bc <vPortFree+0xc0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	4a06      	ldr	r2, [pc, #24]	; (80079bc <vPortFree+0xc0>)
 80079a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80079a6:	f7fe fba3 	bl	80060f0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80079aa:	bf00      	nop
 80079ac:	3718      	adds	r7, #24
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20012e00 	.word	0x20012e00
 80079b8:	20012df0 	.word	0x20012df0
 80079bc:	20012dfc 	.word	0x20012dfc

080079c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80079c0:	b480      	push	{r7}
 80079c2:	b085      	sub	sp, #20
 80079c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079c6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80079ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80079cc:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <prvHeapInit+0xac>)
 80079ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00c      	beq.n	80079f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3307      	adds	r3, #7
 80079de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f023 0307 	bic.w	r3, r3, #7
 80079e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	4a1f      	ldr	r2, [pc, #124]	; (8007a6c <prvHeapInit+0xac>)
 80079f0:	4413      	add	r3, r2
 80079f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079f8:	4a1d      	ldr	r2, [pc, #116]	; (8007a70 <prvHeapInit+0xb0>)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80079fe:	4b1c      	ldr	r3, [pc, #112]	; (8007a70 <prvHeapInit+0xb0>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	4413      	add	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007a0c:	2208      	movs	r2, #8
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0307 	bic.w	r3, r3, #7
 8007a1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <prvHeapInit+0xb4>)
 8007a20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007a22:	4b14      	ldr	r3, [pc, #80]	; (8007a74 <prvHeapInit+0xb4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2200      	movs	r2, #0
 8007a28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007a2a:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <prvHeapInit+0xb4>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	1ad2      	subs	r2, r2, r3
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <prvHeapInit+0xb4>)
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	4a0a      	ldr	r2, [pc, #40]	; (8007a78 <prvHeapInit+0xb8>)
 8007a4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	4a09      	ldr	r2, [pc, #36]	; (8007a7c <prvHeapInit+0xbc>)
 8007a56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <prvHeapInit+0xc0>)
 8007a5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a5e:	601a      	str	r2, [r3, #0]
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	200001e4 	.word	0x200001e4
 8007a70:	20012de4 	.word	0x20012de4
 8007a74:	20012dec 	.word	0x20012dec
 8007a78:	20012df4 	.word	0x20012df4
 8007a7c:	20012df0 	.word	0x20012df0
 8007a80:	20012e00 	.word	0x20012e00

08007a84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a8c:	4b28      	ldr	r3, [pc, #160]	; (8007b30 <prvInsertBlockIntoFreeList+0xac>)
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	e002      	b.n	8007a98 <prvInsertBlockIntoFreeList+0x14>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d8f7      	bhi.n	8007a92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4413      	add	r3, r2
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d108      	bne.n	8007ac6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	441a      	add	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d118      	bne.n	8007b0c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	4b15      	ldr	r3, [pc, #84]	; (8007b34 <prvInsertBlockIntoFreeList+0xb0>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d00d      	beq.n	8007b02 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	441a      	add	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	e008      	b.n	8007b14 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b02:	4b0c      	ldr	r3, [pc, #48]	; (8007b34 <prvInsertBlockIntoFreeList+0xb0>)
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	e003      	b.n	8007b14 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d002      	beq.n	8007b22 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	20012de4 	.word	0x20012de4
 8007b34:	20012dec 	.word	0x20012dec

08007b38 <calloc>:
 8007b38:	4b02      	ldr	r3, [pc, #8]	; (8007b44 <calloc+0xc>)
 8007b3a:	460a      	mov	r2, r1
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	f000 b8ea 	b.w	8007d18 <_calloc_r>
 8007b44:	20000014 	.word	0x20000014

08007b48 <__errno>:
 8007b48:	4b01      	ldr	r3, [pc, #4]	; (8007b50 <__errno+0x8>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	20000014 	.word	0x20000014

08007b54 <exit>:
 8007b54:	b508      	push	{r3, lr}
 8007b56:	4b07      	ldr	r3, [pc, #28]	; (8007b74 <exit+0x20>)
 8007b58:	4604      	mov	r4, r0
 8007b5a:	b113      	cbz	r3, 8007b62 <exit+0xe>
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	f3af 8000 	nop.w
 8007b62:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <exit+0x24>)
 8007b64:	6818      	ldr	r0, [r3, #0]
 8007b66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b68:	b103      	cbz	r3, 8007b6c <exit+0x18>
 8007b6a:	4798      	blx	r3
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f7f9 fc13 	bl	8001398 <_exit>
 8007b72:	bf00      	nop
 8007b74:	00000000 	.word	0x00000000
 8007b78:	0800ae94 	.word	0x0800ae94

08007b7c <fiprintf>:
 8007b7c:	b40e      	push	{r1, r2, r3}
 8007b7e:	b503      	push	{r0, r1, lr}
 8007b80:	4601      	mov	r1, r0
 8007b82:	ab03      	add	r3, sp, #12
 8007b84:	4805      	ldr	r0, [pc, #20]	; (8007b9c <fiprintf+0x20>)
 8007b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	f000 f9a7 	bl	8007ee0 <_vfiprintf_r>
 8007b92:	b002      	add	sp, #8
 8007b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b98:	b003      	add	sp, #12
 8007b9a:	4770      	bx	lr
 8007b9c:	20000014 	.word	0x20000014

08007ba0 <_fwrite_r>:
 8007ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba4:	9c08      	ldr	r4, [sp, #32]
 8007ba6:	4689      	mov	r9, r1
 8007ba8:	4617      	mov	r7, r2
 8007baa:	fb02 f803 	mul.w	r8, r2, r3
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b118      	cbz	r0, 8007bba <_fwrite_r+0x1a>
 8007bb2:	6983      	ldr	r3, [r0, #24]
 8007bb4:	b90b      	cbnz	r3, 8007bba <_fwrite_r+0x1a>
 8007bb6:	f001 f8cf 	bl	8008d58 <__sinit>
 8007bba:	4b26      	ldr	r3, [pc, #152]	; (8007c54 <_fwrite_r+0xb4>)
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	d123      	bne.n	8007c08 <_fwrite_r+0x68>
 8007bc0:	686c      	ldr	r4, [r5, #4]
 8007bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bc4:	07de      	lsls	r6, r3, #31
 8007bc6:	d405      	bmi.n	8007bd4 <_fwrite_r+0x34>
 8007bc8:	89a3      	ldrh	r3, [r4, #12]
 8007bca:	0598      	lsls	r0, r3, #22
 8007bcc:	d402      	bmi.n	8007bd4 <_fwrite_r+0x34>
 8007bce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bd0:	f000 f879 	bl	8007cc6 <__retarget_lock_acquire_recursive>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	0719      	lsls	r1, r3, #28
 8007bd8:	d520      	bpl.n	8007c1c <_fwrite_r+0x7c>
 8007bda:	6923      	ldr	r3, [r4, #16]
 8007bdc:	b1f3      	cbz	r3, 8007c1c <_fwrite_r+0x7c>
 8007bde:	2600      	movs	r6, #0
 8007be0:	4546      	cmp	r6, r8
 8007be2:	d029      	beq.n	8007c38 <_fwrite_r+0x98>
 8007be4:	68a0      	ldr	r0, [r4, #8]
 8007be6:	f819 1006 	ldrb.w	r1, [r9, r6]
 8007bea:	3801      	subs	r0, #1
 8007bec:	2800      	cmp	r0, #0
 8007bee:	60a0      	str	r0, [r4, #8]
 8007bf0:	da04      	bge.n	8007bfc <_fwrite_r+0x5c>
 8007bf2:	69a3      	ldr	r3, [r4, #24]
 8007bf4:	4298      	cmp	r0, r3
 8007bf6:	db19      	blt.n	8007c2c <_fwrite_r+0x8c>
 8007bf8:	290a      	cmp	r1, #10
 8007bfa:	d017      	beq.n	8007c2c <_fwrite_r+0x8c>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	1c5a      	adds	r2, r3, #1
 8007c00:	6022      	str	r2, [r4, #0]
 8007c02:	7019      	strb	r1, [r3, #0]
 8007c04:	3601      	adds	r6, #1
 8007c06:	e7eb      	b.n	8007be0 <_fwrite_r+0x40>
 8007c08:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <_fwrite_r+0xb8>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d101      	bne.n	8007c12 <_fwrite_r+0x72>
 8007c0e:	68ac      	ldr	r4, [r5, #8]
 8007c10:	e7d7      	b.n	8007bc2 <_fwrite_r+0x22>
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <_fwrite_r+0xbc>)
 8007c14:	429c      	cmp	r4, r3
 8007c16:	bf08      	it	eq
 8007c18:	68ec      	ldreq	r4, [r5, #12]
 8007c1a:	e7d2      	b.n	8007bc2 <_fwrite_r+0x22>
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f000 ff12 	bl	8008a48 <__swsetup_r>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d0da      	beq.n	8007bde <_fwrite_r+0x3e>
 8007c28:	2600      	movs	r6, #0
 8007c2a:	e005      	b.n	8007c38 <_fwrite_r+0x98>
 8007c2c:	4622      	mov	r2, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 feb8 	bl	80089a4 <__swbuf_r>
 8007c34:	3001      	adds	r0, #1
 8007c36:	d1e5      	bne.n	8007c04 <_fwrite_r+0x64>
 8007c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c3a:	07da      	lsls	r2, r3, #31
 8007c3c:	d405      	bmi.n	8007c4a <_fwrite_r+0xaa>
 8007c3e:	89a3      	ldrh	r3, [r4, #12]
 8007c40:	059b      	lsls	r3, r3, #22
 8007c42:	d402      	bmi.n	8007c4a <_fwrite_r+0xaa>
 8007c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c46:	f000 f83f 	bl	8007cc8 <__retarget_lock_release_recursive>
 8007c4a:	fbb6 f0f7 	udiv	r0, r6, r7
 8007c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c52:	bf00      	nop
 8007c54:	0800b584 	.word	0x0800b584
 8007c58:	0800b5a4 	.word	0x0800b5a4
 8007c5c:	0800b564 	.word	0x0800b564

08007c60 <fwrite>:
 8007c60:	b507      	push	{r0, r1, r2, lr}
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	4613      	mov	r3, r2
 8007c66:	460a      	mov	r2, r1
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4803      	ldr	r0, [pc, #12]	; (8007c78 <fwrite+0x18>)
 8007c6c:	6800      	ldr	r0, [r0, #0]
 8007c6e:	f7ff ff97 	bl	8007ba0 <_fwrite_r>
 8007c72:	b003      	add	sp, #12
 8007c74:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c78:	20000014 	.word	0x20000014

08007c7c <__libc_init_array>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	4d0d      	ldr	r5, [pc, #52]	; (8007cb4 <__libc_init_array+0x38>)
 8007c80:	4c0d      	ldr	r4, [pc, #52]	; (8007cb8 <__libc_init_array+0x3c>)
 8007c82:	1b64      	subs	r4, r4, r5
 8007c84:	10a4      	asrs	r4, r4, #2
 8007c86:	2600      	movs	r6, #0
 8007c88:	42a6      	cmp	r6, r4
 8007c8a:	d109      	bne.n	8007ca0 <__libc_init_array+0x24>
 8007c8c:	4d0b      	ldr	r5, [pc, #44]	; (8007cbc <__libc_init_array+0x40>)
 8007c8e:	4c0c      	ldr	r4, [pc, #48]	; (8007cc0 <__libc_init_array+0x44>)
 8007c90:	f001 fa4a 	bl	8009128 <_init>
 8007c94:	1b64      	subs	r4, r4, r5
 8007c96:	10a4      	asrs	r4, r4, #2
 8007c98:	2600      	movs	r6, #0
 8007c9a:	42a6      	cmp	r6, r4
 8007c9c:	d105      	bne.n	8007caa <__libc_init_array+0x2e>
 8007c9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca4:	4798      	blx	r3
 8007ca6:	3601      	adds	r6, #1
 8007ca8:	e7ee      	b.n	8007c88 <__libc_init_array+0xc>
 8007caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cae:	4798      	blx	r3
 8007cb0:	3601      	adds	r6, #1
 8007cb2:	e7f2      	b.n	8007c9a <__libc_init_array+0x1e>
 8007cb4:	0800b5cc 	.word	0x0800b5cc
 8007cb8:	0800b5cc 	.word	0x0800b5cc
 8007cbc:	0800b5cc 	.word	0x0800b5cc
 8007cc0:	0800b5d0 	.word	0x0800b5d0

08007cc4 <__retarget_lock_init_recursive>:
 8007cc4:	4770      	bx	lr

08007cc6 <__retarget_lock_acquire_recursive>:
 8007cc6:	4770      	bx	lr

08007cc8 <__retarget_lock_release_recursive>:
 8007cc8:	4770      	bx	lr
	...

08007ccc <malloc>:
 8007ccc:	4b02      	ldr	r3, [pc, #8]	; (8007cd8 <malloc+0xc>)
 8007cce:	4601      	mov	r1, r0
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	f000 b881 	b.w	8007dd8 <_malloc_r>
 8007cd6:	bf00      	nop
 8007cd8:	20000014 	.word	0x20000014

08007cdc <free>:
 8007cdc:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <free+0xc>)
 8007cde:	4601      	mov	r1, r0
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	f000 b829 	b.w	8007d38 <_free_r>
 8007ce6:	bf00      	nop
 8007ce8:	20000014 	.word	0x20000014

08007cec <memcpy>:
 8007cec:	440a      	add	r2, r1
 8007cee:	4291      	cmp	r1, r2
 8007cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf4:	d100      	bne.n	8007cf8 <memcpy+0xc>
 8007cf6:	4770      	bx	lr
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d02:	4291      	cmp	r1, r2
 8007d04:	d1f9      	bne.n	8007cfa <memcpy+0xe>
 8007d06:	bd10      	pop	{r4, pc}

08007d08 <memset>:
 8007d08:	4402      	add	r2, r0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <memset+0xa>
 8007d10:	4770      	bx	lr
 8007d12:	f803 1b01 	strb.w	r1, [r3], #1
 8007d16:	e7f9      	b.n	8007d0c <memset+0x4>

08007d18 <_calloc_r>:
 8007d18:	b513      	push	{r0, r1, r4, lr}
 8007d1a:	434a      	muls	r2, r1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	9201      	str	r2, [sp, #4]
 8007d20:	f000 f85a 	bl	8007dd8 <_malloc_r>
 8007d24:	4604      	mov	r4, r0
 8007d26:	b118      	cbz	r0, 8007d30 <_calloc_r+0x18>
 8007d28:	9a01      	ldr	r2, [sp, #4]
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	f7ff ffec 	bl	8007d08 <memset>
 8007d30:	4620      	mov	r0, r4
 8007d32:	b002      	add	sp, #8
 8007d34:	bd10      	pop	{r4, pc}
	...

08007d38 <_free_r>:
 8007d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d3a:	2900      	cmp	r1, #0
 8007d3c:	d048      	beq.n	8007dd0 <_free_r+0x98>
 8007d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d42:	9001      	str	r0, [sp, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f1a1 0404 	sub.w	r4, r1, #4
 8007d4a:	bfb8      	it	lt
 8007d4c:	18e4      	addlt	r4, r4, r3
 8007d4e:	f001 f905 	bl	8008f5c <__malloc_lock>
 8007d52:	4a20      	ldr	r2, [pc, #128]	; (8007dd4 <_free_r+0x9c>)
 8007d54:	9801      	ldr	r0, [sp, #4]
 8007d56:	6813      	ldr	r3, [r2, #0]
 8007d58:	4615      	mov	r5, r2
 8007d5a:	b933      	cbnz	r3, 8007d6a <_free_r+0x32>
 8007d5c:	6063      	str	r3, [r4, #4]
 8007d5e:	6014      	str	r4, [r2, #0]
 8007d60:	b003      	add	sp, #12
 8007d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d66:	f001 b8ff 	b.w	8008f68 <__malloc_unlock>
 8007d6a:	42a3      	cmp	r3, r4
 8007d6c:	d90b      	bls.n	8007d86 <_free_r+0x4e>
 8007d6e:	6821      	ldr	r1, [r4, #0]
 8007d70:	1862      	adds	r2, r4, r1
 8007d72:	4293      	cmp	r3, r2
 8007d74:	bf04      	itt	eq
 8007d76:	681a      	ldreq	r2, [r3, #0]
 8007d78:	685b      	ldreq	r3, [r3, #4]
 8007d7a:	6063      	str	r3, [r4, #4]
 8007d7c:	bf04      	itt	eq
 8007d7e:	1852      	addeq	r2, r2, r1
 8007d80:	6022      	streq	r2, [r4, #0]
 8007d82:	602c      	str	r4, [r5, #0]
 8007d84:	e7ec      	b.n	8007d60 <_free_r+0x28>
 8007d86:	461a      	mov	r2, r3
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	b10b      	cbz	r3, 8007d90 <_free_r+0x58>
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	d9fa      	bls.n	8007d86 <_free_r+0x4e>
 8007d90:	6811      	ldr	r1, [r2, #0]
 8007d92:	1855      	adds	r5, r2, r1
 8007d94:	42a5      	cmp	r5, r4
 8007d96:	d10b      	bne.n	8007db0 <_free_r+0x78>
 8007d98:	6824      	ldr	r4, [r4, #0]
 8007d9a:	4421      	add	r1, r4
 8007d9c:	1854      	adds	r4, r2, r1
 8007d9e:	42a3      	cmp	r3, r4
 8007da0:	6011      	str	r1, [r2, #0]
 8007da2:	d1dd      	bne.n	8007d60 <_free_r+0x28>
 8007da4:	681c      	ldr	r4, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	6053      	str	r3, [r2, #4]
 8007daa:	4421      	add	r1, r4
 8007dac:	6011      	str	r1, [r2, #0]
 8007dae:	e7d7      	b.n	8007d60 <_free_r+0x28>
 8007db0:	d902      	bls.n	8007db8 <_free_r+0x80>
 8007db2:	230c      	movs	r3, #12
 8007db4:	6003      	str	r3, [r0, #0]
 8007db6:	e7d3      	b.n	8007d60 <_free_r+0x28>
 8007db8:	6825      	ldr	r5, [r4, #0]
 8007dba:	1961      	adds	r1, r4, r5
 8007dbc:	428b      	cmp	r3, r1
 8007dbe:	bf04      	itt	eq
 8007dc0:	6819      	ldreq	r1, [r3, #0]
 8007dc2:	685b      	ldreq	r3, [r3, #4]
 8007dc4:	6063      	str	r3, [r4, #4]
 8007dc6:	bf04      	itt	eq
 8007dc8:	1949      	addeq	r1, r1, r5
 8007dca:	6021      	streq	r1, [r4, #0]
 8007dcc:	6054      	str	r4, [r2, #4]
 8007dce:	e7c7      	b.n	8007d60 <_free_r+0x28>
 8007dd0:	b003      	add	sp, #12
 8007dd2:	bd30      	pop	{r4, r5, pc}
 8007dd4:	20012e04 	.word	0x20012e04

08007dd8 <_malloc_r>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	1ccd      	adds	r5, r1, #3
 8007ddc:	f025 0503 	bic.w	r5, r5, #3
 8007de0:	3508      	adds	r5, #8
 8007de2:	2d0c      	cmp	r5, #12
 8007de4:	bf38      	it	cc
 8007de6:	250c      	movcc	r5, #12
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	4606      	mov	r6, r0
 8007dec:	db01      	blt.n	8007df2 <_malloc_r+0x1a>
 8007dee:	42a9      	cmp	r1, r5
 8007df0:	d903      	bls.n	8007dfa <_malloc_r+0x22>
 8007df2:	230c      	movs	r3, #12
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	2000      	movs	r0, #0
 8007df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfa:	f001 f8af 	bl	8008f5c <__malloc_lock>
 8007dfe:	4921      	ldr	r1, [pc, #132]	; (8007e84 <_malloc_r+0xac>)
 8007e00:	680a      	ldr	r2, [r1, #0]
 8007e02:	4614      	mov	r4, r2
 8007e04:	b99c      	cbnz	r4, 8007e2e <_malloc_r+0x56>
 8007e06:	4f20      	ldr	r7, [pc, #128]	; (8007e88 <_malloc_r+0xb0>)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	b923      	cbnz	r3, 8007e16 <_malloc_r+0x3e>
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f000 fba8 	bl	8008564 <_sbrk_r>
 8007e14:	6038      	str	r0, [r7, #0]
 8007e16:	4629      	mov	r1, r5
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 fba3 	bl	8008564 <_sbrk_r>
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	d123      	bne.n	8007e6a <_malloc_r+0x92>
 8007e22:	230c      	movs	r3, #12
 8007e24:	6033      	str	r3, [r6, #0]
 8007e26:	4630      	mov	r0, r6
 8007e28:	f001 f89e 	bl	8008f68 <__malloc_unlock>
 8007e2c:	e7e3      	b.n	8007df6 <_malloc_r+0x1e>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	1b5b      	subs	r3, r3, r5
 8007e32:	d417      	bmi.n	8007e64 <_malloc_r+0x8c>
 8007e34:	2b0b      	cmp	r3, #11
 8007e36:	d903      	bls.n	8007e40 <_malloc_r+0x68>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	441c      	add	r4, r3
 8007e3c:	6025      	str	r5, [r4, #0]
 8007e3e:	e004      	b.n	8007e4a <_malloc_r+0x72>
 8007e40:	6863      	ldr	r3, [r4, #4]
 8007e42:	42a2      	cmp	r2, r4
 8007e44:	bf0c      	ite	eq
 8007e46:	600b      	streq	r3, [r1, #0]
 8007e48:	6053      	strne	r3, [r2, #4]
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f001 f88c 	bl	8008f68 <__malloc_unlock>
 8007e50:	f104 000b 	add.w	r0, r4, #11
 8007e54:	1d23      	adds	r3, r4, #4
 8007e56:	f020 0007 	bic.w	r0, r0, #7
 8007e5a:	1ac2      	subs	r2, r0, r3
 8007e5c:	d0cc      	beq.n	8007df8 <_malloc_r+0x20>
 8007e5e:	1a1b      	subs	r3, r3, r0
 8007e60:	50a3      	str	r3, [r4, r2]
 8007e62:	e7c9      	b.n	8007df8 <_malloc_r+0x20>
 8007e64:	4622      	mov	r2, r4
 8007e66:	6864      	ldr	r4, [r4, #4]
 8007e68:	e7cc      	b.n	8007e04 <_malloc_r+0x2c>
 8007e6a:	1cc4      	adds	r4, r0, #3
 8007e6c:	f024 0403 	bic.w	r4, r4, #3
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d0e3      	beq.n	8007e3c <_malloc_r+0x64>
 8007e74:	1a21      	subs	r1, r4, r0
 8007e76:	4630      	mov	r0, r6
 8007e78:	f000 fb74 	bl	8008564 <_sbrk_r>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d1dd      	bne.n	8007e3c <_malloc_r+0x64>
 8007e80:	e7cf      	b.n	8007e22 <_malloc_r+0x4a>
 8007e82:	bf00      	nop
 8007e84:	20012e04 	.word	0x20012e04
 8007e88:	20012e08 	.word	0x20012e08

08007e8c <__sfputc_r>:
 8007e8c:	6893      	ldr	r3, [r2, #8]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	b410      	push	{r4}
 8007e94:	6093      	str	r3, [r2, #8]
 8007e96:	da08      	bge.n	8007eaa <__sfputc_r+0x1e>
 8007e98:	6994      	ldr	r4, [r2, #24]
 8007e9a:	42a3      	cmp	r3, r4
 8007e9c:	db01      	blt.n	8007ea2 <__sfputc_r+0x16>
 8007e9e:	290a      	cmp	r1, #10
 8007ea0:	d103      	bne.n	8007eaa <__sfputc_r+0x1e>
 8007ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ea6:	f000 bd7d 	b.w	80089a4 <__swbuf_r>
 8007eaa:	6813      	ldr	r3, [r2, #0]
 8007eac:	1c58      	adds	r0, r3, #1
 8007eae:	6010      	str	r0, [r2, #0]
 8007eb0:	7019      	strb	r1, [r3, #0]
 8007eb2:	4608      	mov	r0, r1
 8007eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <__sfputs_r>:
 8007eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	460f      	mov	r7, r1
 8007ec0:	4614      	mov	r4, r2
 8007ec2:	18d5      	adds	r5, r2, r3
 8007ec4:	42ac      	cmp	r4, r5
 8007ec6:	d101      	bne.n	8007ecc <__sfputs_r+0x12>
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e007      	b.n	8007edc <__sfputs_r+0x22>
 8007ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed0:	463a      	mov	r2, r7
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f7ff ffda 	bl	8007e8c <__sfputc_r>
 8007ed8:	1c43      	adds	r3, r0, #1
 8007eda:	d1f3      	bne.n	8007ec4 <__sfputs_r+0xa>
 8007edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ee0 <_vfiprintf_r>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	460d      	mov	r5, r1
 8007ee6:	b09d      	sub	sp, #116	; 0x74
 8007ee8:	4614      	mov	r4, r2
 8007eea:	4698      	mov	r8, r3
 8007eec:	4606      	mov	r6, r0
 8007eee:	b118      	cbz	r0, 8007ef8 <_vfiprintf_r+0x18>
 8007ef0:	6983      	ldr	r3, [r0, #24]
 8007ef2:	b90b      	cbnz	r3, 8007ef8 <_vfiprintf_r+0x18>
 8007ef4:	f000 ff30 	bl	8008d58 <__sinit>
 8007ef8:	4b89      	ldr	r3, [pc, #548]	; (8008120 <_vfiprintf_r+0x240>)
 8007efa:	429d      	cmp	r5, r3
 8007efc:	d11b      	bne.n	8007f36 <_vfiprintf_r+0x56>
 8007efe:	6875      	ldr	r5, [r6, #4]
 8007f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f02:	07d9      	lsls	r1, r3, #31
 8007f04:	d405      	bmi.n	8007f12 <_vfiprintf_r+0x32>
 8007f06:	89ab      	ldrh	r3, [r5, #12]
 8007f08:	059a      	lsls	r2, r3, #22
 8007f0a:	d402      	bmi.n	8007f12 <_vfiprintf_r+0x32>
 8007f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f0e:	f7ff feda 	bl	8007cc6 <__retarget_lock_acquire_recursive>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	071b      	lsls	r3, r3, #28
 8007f16:	d501      	bpl.n	8007f1c <_vfiprintf_r+0x3c>
 8007f18:	692b      	ldr	r3, [r5, #16]
 8007f1a:	b9eb      	cbnz	r3, 8007f58 <_vfiprintf_r+0x78>
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4630      	mov	r0, r6
 8007f20:	f000 fd92 	bl	8008a48 <__swsetup_r>
 8007f24:	b1c0      	cbz	r0, 8007f58 <_vfiprintf_r+0x78>
 8007f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f28:	07dc      	lsls	r4, r3, #31
 8007f2a:	d50e      	bpl.n	8007f4a <_vfiprintf_r+0x6a>
 8007f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f30:	b01d      	add	sp, #116	; 0x74
 8007f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f36:	4b7b      	ldr	r3, [pc, #492]	; (8008124 <_vfiprintf_r+0x244>)
 8007f38:	429d      	cmp	r5, r3
 8007f3a:	d101      	bne.n	8007f40 <_vfiprintf_r+0x60>
 8007f3c:	68b5      	ldr	r5, [r6, #8]
 8007f3e:	e7df      	b.n	8007f00 <_vfiprintf_r+0x20>
 8007f40:	4b79      	ldr	r3, [pc, #484]	; (8008128 <_vfiprintf_r+0x248>)
 8007f42:	429d      	cmp	r5, r3
 8007f44:	bf08      	it	eq
 8007f46:	68f5      	ldreq	r5, [r6, #12]
 8007f48:	e7da      	b.n	8007f00 <_vfiprintf_r+0x20>
 8007f4a:	89ab      	ldrh	r3, [r5, #12]
 8007f4c:	0598      	lsls	r0, r3, #22
 8007f4e:	d4ed      	bmi.n	8007f2c <_vfiprintf_r+0x4c>
 8007f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f52:	f7ff feb9 	bl	8007cc8 <__retarget_lock_release_recursive>
 8007f56:	e7e9      	b.n	8007f2c <_vfiprintf_r+0x4c>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5c:	2320      	movs	r3, #32
 8007f5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f62:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f66:	2330      	movs	r3, #48	; 0x30
 8007f68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800812c <_vfiprintf_r+0x24c>
 8007f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f70:	f04f 0901 	mov.w	r9, #1
 8007f74:	4623      	mov	r3, r4
 8007f76:	469a      	mov	sl, r3
 8007f78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f7c:	b10a      	cbz	r2, 8007f82 <_vfiprintf_r+0xa2>
 8007f7e:	2a25      	cmp	r2, #37	; 0x25
 8007f80:	d1f9      	bne.n	8007f76 <_vfiprintf_r+0x96>
 8007f82:	ebba 0b04 	subs.w	fp, sl, r4
 8007f86:	d00b      	beq.n	8007fa0 <_vfiprintf_r+0xc0>
 8007f88:	465b      	mov	r3, fp
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f7ff ff93 	bl	8007eba <__sfputs_r>
 8007f94:	3001      	adds	r0, #1
 8007f96:	f000 80aa 	beq.w	80080ee <_vfiprintf_r+0x20e>
 8007f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f9c:	445a      	add	r2, fp
 8007f9e:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	f000 80a2 	beq.w	80080ee <_vfiprintf_r+0x20e>
 8007faa:	2300      	movs	r3, #0
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fb4:	f10a 0a01 	add.w	sl, sl, #1
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	9307      	str	r3, [sp, #28]
 8007fbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fc0:	931a      	str	r3, [sp, #104]	; 0x68
 8007fc2:	4654      	mov	r4, sl
 8007fc4:	2205      	movs	r2, #5
 8007fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fca:	4858      	ldr	r0, [pc, #352]	; (800812c <_vfiprintf_r+0x24c>)
 8007fcc:	f7f8 f918 	bl	8000200 <memchr>
 8007fd0:	9a04      	ldr	r2, [sp, #16]
 8007fd2:	b9d8      	cbnz	r0, 800800c <_vfiprintf_r+0x12c>
 8007fd4:	06d1      	lsls	r1, r2, #27
 8007fd6:	bf44      	itt	mi
 8007fd8:	2320      	movmi	r3, #32
 8007fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fde:	0713      	lsls	r3, r2, #28
 8007fe0:	bf44      	itt	mi
 8007fe2:	232b      	movmi	r3, #43	; 0x2b
 8007fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fec:	2b2a      	cmp	r3, #42	; 0x2a
 8007fee:	d015      	beq.n	800801c <_vfiprintf_r+0x13c>
 8007ff0:	9a07      	ldr	r2, [sp, #28]
 8007ff2:	4654      	mov	r4, sl
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	f04f 0c0a 	mov.w	ip, #10
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008000:	3b30      	subs	r3, #48	; 0x30
 8008002:	2b09      	cmp	r3, #9
 8008004:	d94e      	bls.n	80080a4 <_vfiprintf_r+0x1c4>
 8008006:	b1b0      	cbz	r0, 8008036 <_vfiprintf_r+0x156>
 8008008:	9207      	str	r2, [sp, #28]
 800800a:	e014      	b.n	8008036 <_vfiprintf_r+0x156>
 800800c:	eba0 0308 	sub.w	r3, r0, r8
 8008010:	fa09 f303 	lsl.w	r3, r9, r3
 8008014:	4313      	orrs	r3, r2
 8008016:	9304      	str	r3, [sp, #16]
 8008018:	46a2      	mov	sl, r4
 800801a:	e7d2      	b.n	8007fc2 <_vfiprintf_r+0xe2>
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	1d19      	adds	r1, r3, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	9103      	str	r1, [sp, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfbb      	ittet	lt
 8008028:	425b      	neglt	r3, r3
 800802a:	f042 0202 	orrlt.w	r2, r2, #2
 800802e:	9307      	strge	r3, [sp, #28]
 8008030:	9307      	strlt	r3, [sp, #28]
 8008032:	bfb8      	it	lt
 8008034:	9204      	strlt	r2, [sp, #16]
 8008036:	7823      	ldrb	r3, [r4, #0]
 8008038:	2b2e      	cmp	r3, #46	; 0x2e
 800803a:	d10c      	bne.n	8008056 <_vfiprintf_r+0x176>
 800803c:	7863      	ldrb	r3, [r4, #1]
 800803e:	2b2a      	cmp	r3, #42	; 0x2a
 8008040:	d135      	bne.n	80080ae <_vfiprintf_r+0x1ce>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	1d1a      	adds	r2, r3, #4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	9203      	str	r2, [sp, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	bfb8      	it	lt
 800804e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008052:	3402      	adds	r4, #2
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800813c <_vfiprintf_r+0x25c>
 800805a:	7821      	ldrb	r1, [r4, #0]
 800805c:	2203      	movs	r2, #3
 800805e:	4650      	mov	r0, sl
 8008060:	f7f8 f8ce 	bl	8000200 <memchr>
 8008064:	b140      	cbz	r0, 8008078 <_vfiprintf_r+0x198>
 8008066:	2340      	movs	r3, #64	; 0x40
 8008068:	eba0 000a 	sub.w	r0, r0, sl
 800806c:	fa03 f000 	lsl.w	r0, r3, r0
 8008070:	9b04      	ldr	r3, [sp, #16]
 8008072:	4303      	orrs	r3, r0
 8008074:	3401      	adds	r4, #1
 8008076:	9304      	str	r3, [sp, #16]
 8008078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800807c:	482c      	ldr	r0, [pc, #176]	; (8008130 <_vfiprintf_r+0x250>)
 800807e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008082:	2206      	movs	r2, #6
 8008084:	f7f8 f8bc 	bl	8000200 <memchr>
 8008088:	2800      	cmp	r0, #0
 800808a:	d03f      	beq.n	800810c <_vfiprintf_r+0x22c>
 800808c:	4b29      	ldr	r3, [pc, #164]	; (8008134 <_vfiprintf_r+0x254>)
 800808e:	bb1b      	cbnz	r3, 80080d8 <_vfiprintf_r+0x1f8>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	3307      	adds	r3, #7
 8008094:	f023 0307 	bic.w	r3, r3, #7
 8008098:	3308      	adds	r3, #8
 800809a:	9303      	str	r3, [sp, #12]
 800809c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800809e:	443b      	add	r3, r7
 80080a0:	9309      	str	r3, [sp, #36]	; 0x24
 80080a2:	e767      	b.n	8007f74 <_vfiprintf_r+0x94>
 80080a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080a8:	460c      	mov	r4, r1
 80080aa:	2001      	movs	r0, #1
 80080ac:	e7a5      	b.n	8007ffa <_vfiprintf_r+0x11a>
 80080ae:	2300      	movs	r3, #0
 80080b0:	3401      	adds	r4, #1
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	4619      	mov	r1, r3
 80080b6:	f04f 0c0a 	mov.w	ip, #10
 80080ba:	4620      	mov	r0, r4
 80080bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c0:	3a30      	subs	r2, #48	; 0x30
 80080c2:	2a09      	cmp	r2, #9
 80080c4:	d903      	bls.n	80080ce <_vfiprintf_r+0x1ee>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0c5      	beq.n	8008056 <_vfiprintf_r+0x176>
 80080ca:	9105      	str	r1, [sp, #20]
 80080cc:	e7c3      	b.n	8008056 <_vfiprintf_r+0x176>
 80080ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80080d2:	4604      	mov	r4, r0
 80080d4:	2301      	movs	r3, #1
 80080d6:	e7f0      	b.n	80080ba <_vfiprintf_r+0x1da>
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	462a      	mov	r2, r5
 80080de:	4b16      	ldr	r3, [pc, #88]	; (8008138 <_vfiprintf_r+0x258>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	4630      	mov	r0, r6
 80080e4:	f3af 8000 	nop.w
 80080e8:	4607      	mov	r7, r0
 80080ea:	1c78      	adds	r0, r7, #1
 80080ec:	d1d6      	bne.n	800809c <_vfiprintf_r+0x1bc>
 80080ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f0:	07d9      	lsls	r1, r3, #31
 80080f2:	d405      	bmi.n	8008100 <_vfiprintf_r+0x220>
 80080f4:	89ab      	ldrh	r3, [r5, #12]
 80080f6:	059a      	lsls	r2, r3, #22
 80080f8:	d402      	bmi.n	8008100 <_vfiprintf_r+0x220>
 80080fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080fc:	f7ff fde4 	bl	8007cc8 <__retarget_lock_release_recursive>
 8008100:	89ab      	ldrh	r3, [r5, #12]
 8008102:	065b      	lsls	r3, r3, #25
 8008104:	f53f af12 	bmi.w	8007f2c <_vfiprintf_r+0x4c>
 8008108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800810a:	e711      	b.n	8007f30 <_vfiprintf_r+0x50>
 800810c:	ab03      	add	r3, sp, #12
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	462a      	mov	r2, r5
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <_vfiprintf_r+0x258>)
 8008114:	a904      	add	r1, sp, #16
 8008116:	4630      	mov	r0, r6
 8008118:	f000 f880 	bl	800821c <_printf_i>
 800811c:	e7e4      	b.n	80080e8 <_vfiprintf_r+0x208>
 800811e:	bf00      	nop
 8008120:	0800b584 	.word	0x0800b584
 8008124:	0800b5a4 	.word	0x0800b5a4
 8008128:	0800b564 	.word	0x0800b564
 800812c:	0800ae98 	.word	0x0800ae98
 8008130:	0800aea2 	.word	0x0800aea2
 8008134:	00000000 	.word	0x00000000
 8008138:	08007ebb 	.word	0x08007ebb
 800813c:	0800ae9e 	.word	0x0800ae9e

08008140 <_printf_common>:
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	4616      	mov	r6, r2
 8008146:	4699      	mov	r9, r3
 8008148:	688a      	ldr	r2, [r1, #8]
 800814a:	690b      	ldr	r3, [r1, #16]
 800814c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008150:	4293      	cmp	r3, r2
 8008152:	bfb8      	it	lt
 8008154:	4613      	movlt	r3, r2
 8008156:	6033      	str	r3, [r6, #0]
 8008158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800815c:	4607      	mov	r7, r0
 800815e:	460c      	mov	r4, r1
 8008160:	b10a      	cbz	r2, 8008166 <_printf_common+0x26>
 8008162:	3301      	adds	r3, #1
 8008164:	6033      	str	r3, [r6, #0]
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	0699      	lsls	r1, r3, #26
 800816a:	bf42      	ittt	mi
 800816c:	6833      	ldrmi	r3, [r6, #0]
 800816e:	3302      	addmi	r3, #2
 8008170:	6033      	strmi	r3, [r6, #0]
 8008172:	6825      	ldr	r5, [r4, #0]
 8008174:	f015 0506 	ands.w	r5, r5, #6
 8008178:	d106      	bne.n	8008188 <_printf_common+0x48>
 800817a:	f104 0a19 	add.w	sl, r4, #25
 800817e:	68e3      	ldr	r3, [r4, #12]
 8008180:	6832      	ldr	r2, [r6, #0]
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	42ab      	cmp	r3, r5
 8008186:	dc26      	bgt.n	80081d6 <_printf_common+0x96>
 8008188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800818c:	1e13      	subs	r3, r2, #0
 800818e:	6822      	ldr	r2, [r4, #0]
 8008190:	bf18      	it	ne
 8008192:	2301      	movne	r3, #1
 8008194:	0692      	lsls	r2, r2, #26
 8008196:	d42b      	bmi.n	80081f0 <_printf_common+0xb0>
 8008198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800819c:	4649      	mov	r1, r9
 800819e:	4638      	mov	r0, r7
 80081a0:	47c0      	blx	r8
 80081a2:	3001      	adds	r0, #1
 80081a4:	d01e      	beq.n	80081e4 <_printf_common+0xa4>
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	68e5      	ldr	r5, [r4, #12]
 80081aa:	6832      	ldr	r2, [r6, #0]
 80081ac:	f003 0306 	and.w	r3, r3, #6
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	bf08      	it	eq
 80081b4:	1aad      	subeq	r5, r5, r2
 80081b6:	68a3      	ldr	r3, [r4, #8]
 80081b8:	6922      	ldr	r2, [r4, #16]
 80081ba:	bf0c      	ite	eq
 80081bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081c0:	2500      	movne	r5, #0
 80081c2:	4293      	cmp	r3, r2
 80081c4:	bfc4      	itt	gt
 80081c6:	1a9b      	subgt	r3, r3, r2
 80081c8:	18ed      	addgt	r5, r5, r3
 80081ca:	2600      	movs	r6, #0
 80081cc:	341a      	adds	r4, #26
 80081ce:	42b5      	cmp	r5, r6
 80081d0:	d11a      	bne.n	8008208 <_printf_common+0xc8>
 80081d2:	2000      	movs	r0, #0
 80081d4:	e008      	b.n	80081e8 <_printf_common+0xa8>
 80081d6:	2301      	movs	r3, #1
 80081d8:	4652      	mov	r2, sl
 80081da:	4649      	mov	r1, r9
 80081dc:	4638      	mov	r0, r7
 80081de:	47c0      	blx	r8
 80081e0:	3001      	adds	r0, #1
 80081e2:	d103      	bne.n	80081ec <_printf_common+0xac>
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ec:	3501      	adds	r5, #1
 80081ee:	e7c6      	b.n	800817e <_printf_common+0x3e>
 80081f0:	18e1      	adds	r1, r4, r3
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	2030      	movs	r0, #48	; 0x30
 80081f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081fa:	4422      	add	r2, r4
 80081fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008204:	3302      	adds	r3, #2
 8008206:	e7c7      	b.n	8008198 <_printf_common+0x58>
 8008208:	2301      	movs	r3, #1
 800820a:	4622      	mov	r2, r4
 800820c:	4649      	mov	r1, r9
 800820e:	4638      	mov	r0, r7
 8008210:	47c0      	blx	r8
 8008212:	3001      	adds	r0, #1
 8008214:	d0e6      	beq.n	80081e4 <_printf_common+0xa4>
 8008216:	3601      	adds	r6, #1
 8008218:	e7d9      	b.n	80081ce <_printf_common+0x8e>
	...

0800821c <_printf_i>:
 800821c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008220:	460c      	mov	r4, r1
 8008222:	4691      	mov	r9, r2
 8008224:	7e27      	ldrb	r7, [r4, #24]
 8008226:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008228:	2f78      	cmp	r7, #120	; 0x78
 800822a:	4680      	mov	r8, r0
 800822c:	469a      	mov	sl, r3
 800822e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008232:	d807      	bhi.n	8008244 <_printf_i+0x28>
 8008234:	2f62      	cmp	r7, #98	; 0x62
 8008236:	d80a      	bhi.n	800824e <_printf_i+0x32>
 8008238:	2f00      	cmp	r7, #0
 800823a:	f000 80d8 	beq.w	80083ee <_printf_i+0x1d2>
 800823e:	2f58      	cmp	r7, #88	; 0x58
 8008240:	f000 80a3 	beq.w	800838a <_printf_i+0x16e>
 8008244:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800824c:	e03a      	b.n	80082c4 <_printf_i+0xa8>
 800824e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008252:	2b15      	cmp	r3, #21
 8008254:	d8f6      	bhi.n	8008244 <_printf_i+0x28>
 8008256:	a001      	add	r0, pc, #4	; (adr r0, 800825c <_printf_i+0x40>)
 8008258:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800825c:	080082b5 	.word	0x080082b5
 8008260:	080082c9 	.word	0x080082c9
 8008264:	08008245 	.word	0x08008245
 8008268:	08008245 	.word	0x08008245
 800826c:	08008245 	.word	0x08008245
 8008270:	08008245 	.word	0x08008245
 8008274:	080082c9 	.word	0x080082c9
 8008278:	08008245 	.word	0x08008245
 800827c:	08008245 	.word	0x08008245
 8008280:	08008245 	.word	0x08008245
 8008284:	08008245 	.word	0x08008245
 8008288:	080083d5 	.word	0x080083d5
 800828c:	080082f9 	.word	0x080082f9
 8008290:	080083b7 	.word	0x080083b7
 8008294:	08008245 	.word	0x08008245
 8008298:	08008245 	.word	0x08008245
 800829c:	080083f7 	.word	0x080083f7
 80082a0:	08008245 	.word	0x08008245
 80082a4:	080082f9 	.word	0x080082f9
 80082a8:	08008245 	.word	0x08008245
 80082ac:	08008245 	.word	0x08008245
 80082b0:	080083bf 	.word	0x080083bf
 80082b4:	680b      	ldr	r3, [r1, #0]
 80082b6:	1d1a      	adds	r2, r3, #4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	600a      	str	r2, [r1, #0]
 80082bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082c4:	2301      	movs	r3, #1
 80082c6:	e0a3      	b.n	8008410 <_printf_i+0x1f4>
 80082c8:	6825      	ldr	r5, [r4, #0]
 80082ca:	6808      	ldr	r0, [r1, #0]
 80082cc:	062e      	lsls	r6, r5, #24
 80082ce:	f100 0304 	add.w	r3, r0, #4
 80082d2:	d50a      	bpl.n	80082ea <_printf_i+0xce>
 80082d4:	6805      	ldr	r5, [r0, #0]
 80082d6:	600b      	str	r3, [r1, #0]
 80082d8:	2d00      	cmp	r5, #0
 80082da:	da03      	bge.n	80082e4 <_printf_i+0xc8>
 80082dc:	232d      	movs	r3, #45	; 0x2d
 80082de:	426d      	negs	r5, r5
 80082e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082e4:	485e      	ldr	r0, [pc, #376]	; (8008460 <_printf_i+0x244>)
 80082e6:	230a      	movs	r3, #10
 80082e8:	e019      	b.n	800831e <_printf_i+0x102>
 80082ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082ee:	6805      	ldr	r5, [r0, #0]
 80082f0:	600b      	str	r3, [r1, #0]
 80082f2:	bf18      	it	ne
 80082f4:	b22d      	sxthne	r5, r5
 80082f6:	e7ef      	b.n	80082d8 <_printf_i+0xbc>
 80082f8:	680b      	ldr	r3, [r1, #0]
 80082fa:	6825      	ldr	r5, [r4, #0]
 80082fc:	1d18      	adds	r0, r3, #4
 80082fe:	6008      	str	r0, [r1, #0]
 8008300:	0628      	lsls	r0, r5, #24
 8008302:	d501      	bpl.n	8008308 <_printf_i+0xec>
 8008304:	681d      	ldr	r5, [r3, #0]
 8008306:	e002      	b.n	800830e <_printf_i+0xf2>
 8008308:	0669      	lsls	r1, r5, #25
 800830a:	d5fb      	bpl.n	8008304 <_printf_i+0xe8>
 800830c:	881d      	ldrh	r5, [r3, #0]
 800830e:	4854      	ldr	r0, [pc, #336]	; (8008460 <_printf_i+0x244>)
 8008310:	2f6f      	cmp	r7, #111	; 0x6f
 8008312:	bf0c      	ite	eq
 8008314:	2308      	moveq	r3, #8
 8008316:	230a      	movne	r3, #10
 8008318:	2100      	movs	r1, #0
 800831a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800831e:	6866      	ldr	r6, [r4, #4]
 8008320:	60a6      	str	r6, [r4, #8]
 8008322:	2e00      	cmp	r6, #0
 8008324:	bfa2      	ittt	ge
 8008326:	6821      	ldrge	r1, [r4, #0]
 8008328:	f021 0104 	bicge.w	r1, r1, #4
 800832c:	6021      	strge	r1, [r4, #0]
 800832e:	b90d      	cbnz	r5, 8008334 <_printf_i+0x118>
 8008330:	2e00      	cmp	r6, #0
 8008332:	d04d      	beq.n	80083d0 <_printf_i+0x1b4>
 8008334:	4616      	mov	r6, r2
 8008336:	fbb5 f1f3 	udiv	r1, r5, r3
 800833a:	fb03 5711 	mls	r7, r3, r1, r5
 800833e:	5dc7      	ldrb	r7, [r0, r7]
 8008340:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008344:	462f      	mov	r7, r5
 8008346:	42bb      	cmp	r3, r7
 8008348:	460d      	mov	r5, r1
 800834a:	d9f4      	bls.n	8008336 <_printf_i+0x11a>
 800834c:	2b08      	cmp	r3, #8
 800834e:	d10b      	bne.n	8008368 <_printf_i+0x14c>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	07df      	lsls	r7, r3, #31
 8008354:	d508      	bpl.n	8008368 <_printf_i+0x14c>
 8008356:	6923      	ldr	r3, [r4, #16]
 8008358:	6861      	ldr	r1, [r4, #4]
 800835a:	4299      	cmp	r1, r3
 800835c:	bfde      	ittt	le
 800835e:	2330      	movle	r3, #48	; 0x30
 8008360:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008364:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008368:	1b92      	subs	r2, r2, r6
 800836a:	6122      	str	r2, [r4, #16]
 800836c:	f8cd a000 	str.w	sl, [sp]
 8008370:	464b      	mov	r3, r9
 8008372:	aa03      	add	r2, sp, #12
 8008374:	4621      	mov	r1, r4
 8008376:	4640      	mov	r0, r8
 8008378:	f7ff fee2 	bl	8008140 <_printf_common>
 800837c:	3001      	adds	r0, #1
 800837e:	d14c      	bne.n	800841a <_printf_i+0x1fe>
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	b004      	add	sp, #16
 8008386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800838a:	4835      	ldr	r0, [pc, #212]	; (8008460 <_printf_i+0x244>)
 800838c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	680e      	ldr	r6, [r1, #0]
 8008394:	061f      	lsls	r7, r3, #24
 8008396:	f856 5b04 	ldr.w	r5, [r6], #4
 800839a:	600e      	str	r6, [r1, #0]
 800839c:	d514      	bpl.n	80083c8 <_printf_i+0x1ac>
 800839e:	07d9      	lsls	r1, r3, #31
 80083a0:	bf44      	itt	mi
 80083a2:	f043 0320 	orrmi.w	r3, r3, #32
 80083a6:	6023      	strmi	r3, [r4, #0]
 80083a8:	b91d      	cbnz	r5, 80083b2 <_printf_i+0x196>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	f023 0320 	bic.w	r3, r3, #32
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	2310      	movs	r3, #16
 80083b4:	e7b0      	b.n	8008318 <_printf_i+0xfc>
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	f043 0320 	orr.w	r3, r3, #32
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	2378      	movs	r3, #120	; 0x78
 80083c0:	4828      	ldr	r0, [pc, #160]	; (8008464 <_printf_i+0x248>)
 80083c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083c6:	e7e3      	b.n	8008390 <_printf_i+0x174>
 80083c8:	065e      	lsls	r6, r3, #25
 80083ca:	bf48      	it	mi
 80083cc:	b2ad      	uxthmi	r5, r5
 80083ce:	e7e6      	b.n	800839e <_printf_i+0x182>
 80083d0:	4616      	mov	r6, r2
 80083d2:	e7bb      	b.n	800834c <_printf_i+0x130>
 80083d4:	680b      	ldr	r3, [r1, #0]
 80083d6:	6826      	ldr	r6, [r4, #0]
 80083d8:	6960      	ldr	r0, [r4, #20]
 80083da:	1d1d      	adds	r5, r3, #4
 80083dc:	600d      	str	r5, [r1, #0]
 80083de:	0635      	lsls	r5, r6, #24
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	d501      	bpl.n	80083e8 <_printf_i+0x1cc>
 80083e4:	6018      	str	r0, [r3, #0]
 80083e6:	e002      	b.n	80083ee <_printf_i+0x1d2>
 80083e8:	0671      	lsls	r1, r6, #25
 80083ea:	d5fb      	bpl.n	80083e4 <_printf_i+0x1c8>
 80083ec:	8018      	strh	r0, [r3, #0]
 80083ee:	2300      	movs	r3, #0
 80083f0:	6123      	str	r3, [r4, #16]
 80083f2:	4616      	mov	r6, r2
 80083f4:	e7ba      	b.n	800836c <_printf_i+0x150>
 80083f6:	680b      	ldr	r3, [r1, #0]
 80083f8:	1d1a      	adds	r2, r3, #4
 80083fa:	600a      	str	r2, [r1, #0]
 80083fc:	681e      	ldr	r6, [r3, #0]
 80083fe:	6862      	ldr	r2, [r4, #4]
 8008400:	2100      	movs	r1, #0
 8008402:	4630      	mov	r0, r6
 8008404:	f7f7 fefc 	bl	8000200 <memchr>
 8008408:	b108      	cbz	r0, 800840e <_printf_i+0x1f2>
 800840a:	1b80      	subs	r0, r0, r6
 800840c:	6060      	str	r0, [r4, #4]
 800840e:	6863      	ldr	r3, [r4, #4]
 8008410:	6123      	str	r3, [r4, #16]
 8008412:	2300      	movs	r3, #0
 8008414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008418:	e7a8      	b.n	800836c <_printf_i+0x150>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	4632      	mov	r2, r6
 800841e:	4649      	mov	r1, r9
 8008420:	4640      	mov	r0, r8
 8008422:	47d0      	blx	sl
 8008424:	3001      	adds	r0, #1
 8008426:	d0ab      	beq.n	8008380 <_printf_i+0x164>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	079b      	lsls	r3, r3, #30
 800842c:	d413      	bmi.n	8008456 <_printf_i+0x23a>
 800842e:	68e0      	ldr	r0, [r4, #12]
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	4298      	cmp	r0, r3
 8008434:	bfb8      	it	lt
 8008436:	4618      	movlt	r0, r3
 8008438:	e7a4      	b.n	8008384 <_printf_i+0x168>
 800843a:	2301      	movs	r3, #1
 800843c:	4632      	mov	r2, r6
 800843e:	4649      	mov	r1, r9
 8008440:	4640      	mov	r0, r8
 8008442:	47d0      	blx	sl
 8008444:	3001      	adds	r0, #1
 8008446:	d09b      	beq.n	8008380 <_printf_i+0x164>
 8008448:	3501      	adds	r5, #1
 800844a:	68e3      	ldr	r3, [r4, #12]
 800844c:	9903      	ldr	r1, [sp, #12]
 800844e:	1a5b      	subs	r3, r3, r1
 8008450:	42ab      	cmp	r3, r5
 8008452:	dcf2      	bgt.n	800843a <_printf_i+0x21e>
 8008454:	e7eb      	b.n	800842e <_printf_i+0x212>
 8008456:	2500      	movs	r5, #0
 8008458:	f104 0619 	add.w	r6, r4, #25
 800845c:	e7f5      	b.n	800844a <_printf_i+0x22e>
 800845e:	bf00      	nop
 8008460:	0800aea9 	.word	0x0800aea9
 8008464:	0800aeba 	.word	0x0800aeba

08008468 <_puts_r>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	460e      	mov	r6, r1
 800846c:	4605      	mov	r5, r0
 800846e:	b118      	cbz	r0, 8008478 <_puts_r+0x10>
 8008470:	6983      	ldr	r3, [r0, #24]
 8008472:	b90b      	cbnz	r3, 8008478 <_puts_r+0x10>
 8008474:	f000 fc70 	bl	8008d58 <__sinit>
 8008478:	69ab      	ldr	r3, [r5, #24]
 800847a:	68ac      	ldr	r4, [r5, #8]
 800847c:	b913      	cbnz	r3, 8008484 <_puts_r+0x1c>
 800847e:	4628      	mov	r0, r5
 8008480:	f000 fc6a 	bl	8008d58 <__sinit>
 8008484:	4b2c      	ldr	r3, [pc, #176]	; (8008538 <_puts_r+0xd0>)
 8008486:	429c      	cmp	r4, r3
 8008488:	d120      	bne.n	80084cc <_puts_r+0x64>
 800848a:	686c      	ldr	r4, [r5, #4]
 800848c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800848e:	07db      	lsls	r3, r3, #31
 8008490:	d405      	bmi.n	800849e <_puts_r+0x36>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	0598      	lsls	r0, r3, #22
 8008496:	d402      	bmi.n	800849e <_puts_r+0x36>
 8008498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800849a:	f7ff fc14 	bl	8007cc6 <__retarget_lock_acquire_recursive>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	0719      	lsls	r1, r3, #28
 80084a2:	d51d      	bpl.n	80084e0 <_puts_r+0x78>
 80084a4:	6923      	ldr	r3, [r4, #16]
 80084a6:	b1db      	cbz	r3, 80084e0 <_puts_r+0x78>
 80084a8:	3e01      	subs	r6, #1
 80084aa:	68a3      	ldr	r3, [r4, #8]
 80084ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084b0:	3b01      	subs	r3, #1
 80084b2:	60a3      	str	r3, [r4, #8]
 80084b4:	bb39      	cbnz	r1, 8008506 <_puts_r+0x9e>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	da38      	bge.n	800852c <_puts_r+0xc4>
 80084ba:	4622      	mov	r2, r4
 80084bc:	210a      	movs	r1, #10
 80084be:	4628      	mov	r0, r5
 80084c0:	f000 fa70 	bl	80089a4 <__swbuf_r>
 80084c4:	3001      	adds	r0, #1
 80084c6:	d011      	beq.n	80084ec <_puts_r+0x84>
 80084c8:	250a      	movs	r5, #10
 80084ca:	e011      	b.n	80084f0 <_puts_r+0x88>
 80084cc:	4b1b      	ldr	r3, [pc, #108]	; (800853c <_puts_r+0xd4>)
 80084ce:	429c      	cmp	r4, r3
 80084d0:	d101      	bne.n	80084d6 <_puts_r+0x6e>
 80084d2:	68ac      	ldr	r4, [r5, #8]
 80084d4:	e7da      	b.n	800848c <_puts_r+0x24>
 80084d6:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <_puts_r+0xd8>)
 80084d8:	429c      	cmp	r4, r3
 80084da:	bf08      	it	eq
 80084dc:	68ec      	ldreq	r4, [r5, #12]
 80084de:	e7d5      	b.n	800848c <_puts_r+0x24>
 80084e0:	4621      	mov	r1, r4
 80084e2:	4628      	mov	r0, r5
 80084e4:	f000 fab0 	bl	8008a48 <__swsetup_r>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	d0dd      	beq.n	80084a8 <_puts_r+0x40>
 80084ec:	f04f 35ff 	mov.w	r5, #4294967295
 80084f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084f2:	07da      	lsls	r2, r3, #31
 80084f4:	d405      	bmi.n	8008502 <_puts_r+0x9a>
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	059b      	lsls	r3, r3, #22
 80084fa:	d402      	bmi.n	8008502 <_puts_r+0x9a>
 80084fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084fe:	f7ff fbe3 	bl	8007cc8 <__retarget_lock_release_recursive>
 8008502:	4628      	mov	r0, r5
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	2b00      	cmp	r3, #0
 8008508:	da04      	bge.n	8008514 <_puts_r+0xac>
 800850a:	69a2      	ldr	r2, [r4, #24]
 800850c:	429a      	cmp	r2, r3
 800850e:	dc06      	bgt.n	800851e <_puts_r+0xb6>
 8008510:	290a      	cmp	r1, #10
 8008512:	d004      	beq.n	800851e <_puts_r+0xb6>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	6022      	str	r2, [r4, #0]
 800851a:	7019      	strb	r1, [r3, #0]
 800851c:	e7c5      	b.n	80084aa <_puts_r+0x42>
 800851e:	4622      	mov	r2, r4
 8008520:	4628      	mov	r0, r5
 8008522:	f000 fa3f 	bl	80089a4 <__swbuf_r>
 8008526:	3001      	adds	r0, #1
 8008528:	d1bf      	bne.n	80084aa <_puts_r+0x42>
 800852a:	e7df      	b.n	80084ec <_puts_r+0x84>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	250a      	movs	r5, #10
 8008530:	1c5a      	adds	r2, r3, #1
 8008532:	6022      	str	r2, [r4, #0]
 8008534:	701d      	strb	r5, [r3, #0]
 8008536:	e7db      	b.n	80084f0 <_puts_r+0x88>
 8008538:	0800b584 	.word	0x0800b584
 800853c:	0800b5a4 	.word	0x0800b5a4
 8008540:	0800b564 	.word	0x0800b564

08008544 <puts>:
 8008544:	4b02      	ldr	r3, [pc, #8]	; (8008550 <puts+0xc>)
 8008546:	4601      	mov	r1, r0
 8008548:	6818      	ldr	r0, [r3, #0]
 800854a:	f7ff bf8d 	b.w	8008468 <_puts_r>
 800854e:	bf00      	nop
 8008550:	20000014 	.word	0x20000014

08008554 <realloc>:
 8008554:	4b02      	ldr	r3, [pc, #8]	; (8008560 <realloc+0xc>)
 8008556:	460a      	mov	r2, r1
 8008558:	4601      	mov	r1, r0
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	f000 bd0a 	b.w	8008f74 <_realloc_r>
 8008560:	20000014 	.word	0x20000014

08008564 <_sbrk_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4d06      	ldr	r5, [pc, #24]	; (8008580 <_sbrk_r+0x1c>)
 8008568:	2300      	movs	r3, #0
 800856a:	4604      	mov	r4, r0
 800856c:	4608      	mov	r0, r1
 800856e:	602b      	str	r3, [r5, #0]
 8008570:	f7f8 ff8a 	bl	8001488 <_sbrk>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_sbrk_r+0x1a>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_sbrk_r+0x1a>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20012ef8 	.word	0x20012ef8

08008584 <strdup>:
 8008584:	4b02      	ldr	r3, [pc, #8]	; (8008590 <strdup+0xc>)
 8008586:	4601      	mov	r1, r0
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	f000 b803 	b.w	8008594 <_strdup_r>
 800858e:	bf00      	nop
 8008590:	20000014 	.word	0x20000014

08008594 <_strdup_r>:
 8008594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008596:	4604      	mov	r4, r0
 8008598:	4608      	mov	r0, r1
 800859a:	460d      	mov	r5, r1
 800859c:	f7f7 fe22 	bl	80001e4 <strlen>
 80085a0:	1c42      	adds	r2, r0, #1
 80085a2:	4611      	mov	r1, r2
 80085a4:	4620      	mov	r0, r4
 80085a6:	9201      	str	r2, [sp, #4]
 80085a8:	f7ff fc16 	bl	8007dd8 <_malloc_r>
 80085ac:	4604      	mov	r4, r0
 80085ae:	b118      	cbz	r0, 80085b8 <_strdup_r+0x24>
 80085b0:	9a01      	ldr	r2, [sp, #4]
 80085b2:	4629      	mov	r1, r5
 80085b4:	f7ff fb9a 	bl	8007cec <memcpy>
 80085b8:	4620      	mov	r0, r4
 80085ba:	b003      	add	sp, #12
 80085bc:	bd30      	pop	{r4, r5, pc}
	...

080085c0 <_strerror_r>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	4611      	mov	r1, r2
 80085c8:	288e      	cmp	r0, #142	; 0x8e
 80085ca:	f200 812f 	bhi.w	800882c <_strerror_r+0x26c>
 80085ce:	e8df f010 	tbh	[pc, r0, lsl #1]
 80085d2:	0138      	.short	0x0138
 80085d4:	0091008f 	.word	0x0091008f
 80085d8:	00950093 	.word	0x00950093
 80085dc:	00990097 	.word	0x00990097
 80085e0:	009d009b 	.word	0x009d009b
 80085e4:	00a300a1 	.word	0x00a300a1
 80085e8:	00a900a7 	.word	0x00a900a7
 80085ec:	00ad00ab 	.word	0x00ad00ab
 80085f0:	00af012d 	.word	0x00af012d
 80085f4:	00b300b1 	.word	0x00b300b1
 80085f8:	00b700b5 	.word	0x00b700b5
 80085fc:	00bf00bd 	.word	0x00bf00bd
 8008600:	00c700c5 	.word	0x00c700c5
 8008604:	00cb00c9 	.word	0x00cb00c9
 8008608:	00d100cd 	.word	0x00d100cd
 800860c:	00d700d5 	.word	0x00d700d5
 8008610:	00db00d9 	.word	0x00db00d9
 8008614:	00df00dd 	.word	0x00df00dd
 8008618:	00e300e1 	.word	0x00e300e1
 800861c:	012d012d 	.word	0x012d012d
 8008620:	012d012d 	.word	0x012d012d
 8008624:	012d012d 	.word	0x012d012d
 8008628:	012d012d 	.word	0x012d012d
 800862c:	00eb00e7 	.word	0x00eb00e7
 8008630:	012d012d 	.word	0x012d012d
 8008634:	012d012d 	.word	0x012d012d
 8008638:	012d012d 	.word	0x012d012d
 800863c:	012d012d 	.word	0x012d012d
 8008640:	012d012d 	.word	0x012d012d
 8008644:	012d012d 	.word	0x012d012d
 8008648:	00ed012d 	.word	0x00ed012d
 800864c:	00ef0107 	.word	0x00ef0107
 8008650:	012d00f1 	.word	0x012d00f1
 8008654:	012d012d 	.word	0x012d012d
 8008658:	012d00f3 	.word	0x012d00f3
 800865c:	012d012d 	.word	0x012d012d
 8008660:	012d00f5 	.word	0x012d00f5
 8008664:	00f9012d 	.word	0x00f9012d
 8008668:	012d012d 	.word	0x012d012d
 800866c:	012d00fb 	.word	0x012d00fb
 8008670:	012d012d 	.word	0x012d012d
 8008674:	012d012d 	.word	0x012d012d
 8008678:	012d012d 	.word	0x012d012d
 800867c:	012d012d 	.word	0x012d012d
 8008680:	00fd012d 	.word	0x00fd012d
 8008684:	00ff012d 	.word	0x00ff012d
 8008688:	01030101 	.word	0x01030101
 800868c:	012d012d 	.word	0x012d012d
 8008690:	012d0125 	.word	0x012d0125
 8008694:	012d012d 	.word	0x012d012d
 8008698:	012d012d 	.word	0x012d012d
 800869c:	012d012d 	.word	0x012d012d
 80086a0:	0113012d 	.word	0x0113012d
 80086a4:	01090105 	.word	0x01090105
 80086a8:	010d010b 	.word	0x010d010b
 80086ac:	012d010f 	.word	0x012d010f
 80086b0:	01150111 	.word	0x01150111
 80086b4:	00e90119 	.word	0x00e90119
 80086b8:	012b00c1 	.word	0x012b00c1
 80086bc:	00cf00b9 	.word	0x00cf00b9
 80086c0:	009f00bb 	.word	0x009f00bb
 80086c4:	012900a5 	.word	0x012900a5
 80086c8:	012d00f7 	.word	0x012d00f7
 80086cc:	00c30117 	.word	0x00c30117
 80086d0:	011b011d 	.word	0x011b011d
 80086d4:	012d012d 	.word	0x012d012d
 80086d8:	012d012d 	.word	0x012d012d
 80086dc:	00d3012d 	.word	0x00d3012d
 80086e0:	012d012d 	.word	0x012d012d
 80086e4:	00e5012d 	.word	0x00e5012d
 80086e8:	011f0127 	.word	0x011f0127
 80086ec:	01230121 	.word	0x01230121
 80086f0:	4855      	ldr	r0, [pc, #340]	; (8008848 <_strerror_r+0x288>)
 80086f2:	bd10      	pop	{r4, pc}
 80086f4:	4855      	ldr	r0, [pc, #340]	; (800884c <_strerror_r+0x28c>)
 80086f6:	e7fc      	b.n	80086f2 <_strerror_r+0x132>
 80086f8:	4855      	ldr	r0, [pc, #340]	; (8008850 <_strerror_r+0x290>)
 80086fa:	e7fa      	b.n	80086f2 <_strerror_r+0x132>
 80086fc:	4855      	ldr	r0, [pc, #340]	; (8008854 <_strerror_r+0x294>)
 80086fe:	e7f8      	b.n	80086f2 <_strerror_r+0x132>
 8008700:	4855      	ldr	r0, [pc, #340]	; (8008858 <_strerror_r+0x298>)
 8008702:	e7f6      	b.n	80086f2 <_strerror_r+0x132>
 8008704:	4855      	ldr	r0, [pc, #340]	; (800885c <_strerror_r+0x29c>)
 8008706:	e7f4      	b.n	80086f2 <_strerror_r+0x132>
 8008708:	4855      	ldr	r0, [pc, #340]	; (8008860 <_strerror_r+0x2a0>)
 800870a:	e7f2      	b.n	80086f2 <_strerror_r+0x132>
 800870c:	4855      	ldr	r0, [pc, #340]	; (8008864 <_strerror_r+0x2a4>)
 800870e:	e7f0      	b.n	80086f2 <_strerror_r+0x132>
 8008710:	4855      	ldr	r0, [pc, #340]	; (8008868 <_strerror_r+0x2a8>)
 8008712:	e7ee      	b.n	80086f2 <_strerror_r+0x132>
 8008714:	4855      	ldr	r0, [pc, #340]	; (800886c <_strerror_r+0x2ac>)
 8008716:	e7ec      	b.n	80086f2 <_strerror_r+0x132>
 8008718:	4855      	ldr	r0, [pc, #340]	; (8008870 <_strerror_r+0x2b0>)
 800871a:	e7ea      	b.n	80086f2 <_strerror_r+0x132>
 800871c:	4855      	ldr	r0, [pc, #340]	; (8008874 <_strerror_r+0x2b4>)
 800871e:	e7e8      	b.n	80086f2 <_strerror_r+0x132>
 8008720:	4855      	ldr	r0, [pc, #340]	; (8008878 <_strerror_r+0x2b8>)
 8008722:	e7e6      	b.n	80086f2 <_strerror_r+0x132>
 8008724:	4855      	ldr	r0, [pc, #340]	; (800887c <_strerror_r+0x2bc>)
 8008726:	e7e4      	b.n	80086f2 <_strerror_r+0x132>
 8008728:	4855      	ldr	r0, [pc, #340]	; (8008880 <_strerror_r+0x2c0>)
 800872a:	e7e2      	b.n	80086f2 <_strerror_r+0x132>
 800872c:	4855      	ldr	r0, [pc, #340]	; (8008884 <_strerror_r+0x2c4>)
 800872e:	e7e0      	b.n	80086f2 <_strerror_r+0x132>
 8008730:	4855      	ldr	r0, [pc, #340]	; (8008888 <_strerror_r+0x2c8>)
 8008732:	e7de      	b.n	80086f2 <_strerror_r+0x132>
 8008734:	4855      	ldr	r0, [pc, #340]	; (800888c <_strerror_r+0x2cc>)
 8008736:	e7dc      	b.n	80086f2 <_strerror_r+0x132>
 8008738:	4855      	ldr	r0, [pc, #340]	; (8008890 <_strerror_r+0x2d0>)
 800873a:	e7da      	b.n	80086f2 <_strerror_r+0x132>
 800873c:	4855      	ldr	r0, [pc, #340]	; (8008894 <_strerror_r+0x2d4>)
 800873e:	e7d8      	b.n	80086f2 <_strerror_r+0x132>
 8008740:	4855      	ldr	r0, [pc, #340]	; (8008898 <_strerror_r+0x2d8>)
 8008742:	e7d6      	b.n	80086f2 <_strerror_r+0x132>
 8008744:	4855      	ldr	r0, [pc, #340]	; (800889c <_strerror_r+0x2dc>)
 8008746:	e7d4      	b.n	80086f2 <_strerror_r+0x132>
 8008748:	4855      	ldr	r0, [pc, #340]	; (80088a0 <_strerror_r+0x2e0>)
 800874a:	e7d2      	b.n	80086f2 <_strerror_r+0x132>
 800874c:	4855      	ldr	r0, [pc, #340]	; (80088a4 <_strerror_r+0x2e4>)
 800874e:	e7d0      	b.n	80086f2 <_strerror_r+0x132>
 8008750:	4855      	ldr	r0, [pc, #340]	; (80088a8 <_strerror_r+0x2e8>)
 8008752:	e7ce      	b.n	80086f2 <_strerror_r+0x132>
 8008754:	4855      	ldr	r0, [pc, #340]	; (80088ac <_strerror_r+0x2ec>)
 8008756:	e7cc      	b.n	80086f2 <_strerror_r+0x132>
 8008758:	4855      	ldr	r0, [pc, #340]	; (80088b0 <_strerror_r+0x2f0>)
 800875a:	e7ca      	b.n	80086f2 <_strerror_r+0x132>
 800875c:	4855      	ldr	r0, [pc, #340]	; (80088b4 <_strerror_r+0x2f4>)
 800875e:	e7c8      	b.n	80086f2 <_strerror_r+0x132>
 8008760:	4855      	ldr	r0, [pc, #340]	; (80088b8 <_strerror_r+0x2f8>)
 8008762:	e7c6      	b.n	80086f2 <_strerror_r+0x132>
 8008764:	4855      	ldr	r0, [pc, #340]	; (80088bc <_strerror_r+0x2fc>)
 8008766:	e7c4      	b.n	80086f2 <_strerror_r+0x132>
 8008768:	4855      	ldr	r0, [pc, #340]	; (80088c0 <_strerror_r+0x300>)
 800876a:	e7c2      	b.n	80086f2 <_strerror_r+0x132>
 800876c:	4855      	ldr	r0, [pc, #340]	; (80088c4 <_strerror_r+0x304>)
 800876e:	e7c0      	b.n	80086f2 <_strerror_r+0x132>
 8008770:	4855      	ldr	r0, [pc, #340]	; (80088c8 <_strerror_r+0x308>)
 8008772:	e7be      	b.n	80086f2 <_strerror_r+0x132>
 8008774:	4855      	ldr	r0, [pc, #340]	; (80088cc <_strerror_r+0x30c>)
 8008776:	e7bc      	b.n	80086f2 <_strerror_r+0x132>
 8008778:	4855      	ldr	r0, [pc, #340]	; (80088d0 <_strerror_r+0x310>)
 800877a:	e7ba      	b.n	80086f2 <_strerror_r+0x132>
 800877c:	4855      	ldr	r0, [pc, #340]	; (80088d4 <_strerror_r+0x314>)
 800877e:	e7b8      	b.n	80086f2 <_strerror_r+0x132>
 8008780:	4855      	ldr	r0, [pc, #340]	; (80088d8 <_strerror_r+0x318>)
 8008782:	e7b6      	b.n	80086f2 <_strerror_r+0x132>
 8008784:	4855      	ldr	r0, [pc, #340]	; (80088dc <_strerror_r+0x31c>)
 8008786:	e7b4      	b.n	80086f2 <_strerror_r+0x132>
 8008788:	4855      	ldr	r0, [pc, #340]	; (80088e0 <_strerror_r+0x320>)
 800878a:	e7b2      	b.n	80086f2 <_strerror_r+0x132>
 800878c:	4855      	ldr	r0, [pc, #340]	; (80088e4 <_strerror_r+0x324>)
 800878e:	e7b0      	b.n	80086f2 <_strerror_r+0x132>
 8008790:	4855      	ldr	r0, [pc, #340]	; (80088e8 <_strerror_r+0x328>)
 8008792:	e7ae      	b.n	80086f2 <_strerror_r+0x132>
 8008794:	4855      	ldr	r0, [pc, #340]	; (80088ec <_strerror_r+0x32c>)
 8008796:	e7ac      	b.n	80086f2 <_strerror_r+0x132>
 8008798:	4855      	ldr	r0, [pc, #340]	; (80088f0 <_strerror_r+0x330>)
 800879a:	e7aa      	b.n	80086f2 <_strerror_r+0x132>
 800879c:	4855      	ldr	r0, [pc, #340]	; (80088f4 <_strerror_r+0x334>)
 800879e:	e7a8      	b.n	80086f2 <_strerror_r+0x132>
 80087a0:	4855      	ldr	r0, [pc, #340]	; (80088f8 <_strerror_r+0x338>)
 80087a2:	e7a6      	b.n	80086f2 <_strerror_r+0x132>
 80087a4:	4855      	ldr	r0, [pc, #340]	; (80088fc <_strerror_r+0x33c>)
 80087a6:	e7a4      	b.n	80086f2 <_strerror_r+0x132>
 80087a8:	4855      	ldr	r0, [pc, #340]	; (8008900 <_strerror_r+0x340>)
 80087aa:	e7a2      	b.n	80086f2 <_strerror_r+0x132>
 80087ac:	4855      	ldr	r0, [pc, #340]	; (8008904 <_strerror_r+0x344>)
 80087ae:	e7a0      	b.n	80086f2 <_strerror_r+0x132>
 80087b0:	4855      	ldr	r0, [pc, #340]	; (8008908 <_strerror_r+0x348>)
 80087b2:	e79e      	b.n	80086f2 <_strerror_r+0x132>
 80087b4:	4855      	ldr	r0, [pc, #340]	; (800890c <_strerror_r+0x34c>)
 80087b6:	e79c      	b.n	80086f2 <_strerror_r+0x132>
 80087b8:	4855      	ldr	r0, [pc, #340]	; (8008910 <_strerror_r+0x350>)
 80087ba:	e79a      	b.n	80086f2 <_strerror_r+0x132>
 80087bc:	4855      	ldr	r0, [pc, #340]	; (8008914 <_strerror_r+0x354>)
 80087be:	e798      	b.n	80086f2 <_strerror_r+0x132>
 80087c0:	4855      	ldr	r0, [pc, #340]	; (8008918 <_strerror_r+0x358>)
 80087c2:	e796      	b.n	80086f2 <_strerror_r+0x132>
 80087c4:	4855      	ldr	r0, [pc, #340]	; (800891c <_strerror_r+0x35c>)
 80087c6:	e794      	b.n	80086f2 <_strerror_r+0x132>
 80087c8:	4855      	ldr	r0, [pc, #340]	; (8008920 <_strerror_r+0x360>)
 80087ca:	e792      	b.n	80086f2 <_strerror_r+0x132>
 80087cc:	4855      	ldr	r0, [pc, #340]	; (8008924 <_strerror_r+0x364>)
 80087ce:	e790      	b.n	80086f2 <_strerror_r+0x132>
 80087d0:	4855      	ldr	r0, [pc, #340]	; (8008928 <_strerror_r+0x368>)
 80087d2:	e78e      	b.n	80086f2 <_strerror_r+0x132>
 80087d4:	4855      	ldr	r0, [pc, #340]	; (800892c <_strerror_r+0x36c>)
 80087d6:	e78c      	b.n	80086f2 <_strerror_r+0x132>
 80087d8:	4855      	ldr	r0, [pc, #340]	; (8008930 <_strerror_r+0x370>)
 80087da:	e78a      	b.n	80086f2 <_strerror_r+0x132>
 80087dc:	4855      	ldr	r0, [pc, #340]	; (8008934 <_strerror_r+0x374>)
 80087de:	e788      	b.n	80086f2 <_strerror_r+0x132>
 80087e0:	4855      	ldr	r0, [pc, #340]	; (8008938 <_strerror_r+0x378>)
 80087e2:	e786      	b.n	80086f2 <_strerror_r+0x132>
 80087e4:	4855      	ldr	r0, [pc, #340]	; (800893c <_strerror_r+0x37c>)
 80087e6:	e784      	b.n	80086f2 <_strerror_r+0x132>
 80087e8:	4855      	ldr	r0, [pc, #340]	; (8008940 <_strerror_r+0x380>)
 80087ea:	e782      	b.n	80086f2 <_strerror_r+0x132>
 80087ec:	4855      	ldr	r0, [pc, #340]	; (8008944 <_strerror_r+0x384>)
 80087ee:	e780      	b.n	80086f2 <_strerror_r+0x132>
 80087f0:	4855      	ldr	r0, [pc, #340]	; (8008948 <_strerror_r+0x388>)
 80087f2:	e77e      	b.n	80086f2 <_strerror_r+0x132>
 80087f4:	4855      	ldr	r0, [pc, #340]	; (800894c <_strerror_r+0x38c>)
 80087f6:	e77c      	b.n	80086f2 <_strerror_r+0x132>
 80087f8:	4855      	ldr	r0, [pc, #340]	; (8008950 <_strerror_r+0x390>)
 80087fa:	e77a      	b.n	80086f2 <_strerror_r+0x132>
 80087fc:	4855      	ldr	r0, [pc, #340]	; (8008954 <_strerror_r+0x394>)
 80087fe:	e778      	b.n	80086f2 <_strerror_r+0x132>
 8008800:	4855      	ldr	r0, [pc, #340]	; (8008958 <_strerror_r+0x398>)
 8008802:	e776      	b.n	80086f2 <_strerror_r+0x132>
 8008804:	4855      	ldr	r0, [pc, #340]	; (800895c <_strerror_r+0x39c>)
 8008806:	e774      	b.n	80086f2 <_strerror_r+0x132>
 8008808:	4855      	ldr	r0, [pc, #340]	; (8008960 <_strerror_r+0x3a0>)
 800880a:	e772      	b.n	80086f2 <_strerror_r+0x132>
 800880c:	4855      	ldr	r0, [pc, #340]	; (8008964 <_strerror_r+0x3a4>)
 800880e:	e770      	b.n	80086f2 <_strerror_r+0x132>
 8008810:	4855      	ldr	r0, [pc, #340]	; (8008968 <_strerror_r+0x3a8>)
 8008812:	e76e      	b.n	80086f2 <_strerror_r+0x132>
 8008814:	4855      	ldr	r0, [pc, #340]	; (800896c <_strerror_r+0x3ac>)
 8008816:	e76c      	b.n	80086f2 <_strerror_r+0x132>
 8008818:	4855      	ldr	r0, [pc, #340]	; (8008970 <_strerror_r+0x3b0>)
 800881a:	e76a      	b.n	80086f2 <_strerror_r+0x132>
 800881c:	4855      	ldr	r0, [pc, #340]	; (8008974 <_strerror_r+0x3b4>)
 800881e:	e768      	b.n	80086f2 <_strerror_r+0x132>
 8008820:	4855      	ldr	r0, [pc, #340]	; (8008978 <_strerror_r+0x3b8>)
 8008822:	e766      	b.n	80086f2 <_strerror_r+0x132>
 8008824:	4855      	ldr	r0, [pc, #340]	; (800897c <_strerror_r+0x3bc>)
 8008826:	e764      	b.n	80086f2 <_strerror_r+0x132>
 8008828:	4855      	ldr	r0, [pc, #340]	; (8008980 <_strerror_r+0x3c0>)
 800882a:	e762      	b.n	80086f2 <_strerror_r+0x132>
 800882c:	2b00      	cmp	r3, #0
 800882e:	bf14      	ite	ne
 8008830:	461a      	movne	r2, r3
 8008832:	4622      	moveq	r2, r4
 8008834:	f000 f8b4 	bl	80089a0 <_user_strerror>
 8008838:	4b52      	ldr	r3, [pc, #328]	; (8008984 <_strerror_r+0x3c4>)
 800883a:	2800      	cmp	r0, #0
 800883c:	bf08      	it	eq
 800883e:	4618      	moveq	r0, r3
 8008840:	e757      	b.n	80086f2 <_strerror_r+0x132>
 8008842:	4851      	ldr	r0, [pc, #324]	; (8008988 <_strerror_r+0x3c8>)
 8008844:	e755      	b.n	80086f2 <_strerror_r+0x132>
 8008846:	bf00      	nop
 8008848:	0800aecb 	.word	0x0800aecb
 800884c:	0800aed5 	.word	0x0800aed5
 8008850:	0800aeef 	.word	0x0800aeef
 8008854:	0800aeff 	.word	0x0800aeff
 8008858:	0800af17 	.word	0x0800af17
 800885c:	0800af21 	.word	0x0800af21
 8008860:	0800af3b 	.word	0x0800af3b
 8008864:	0800af4d 	.word	0x0800af4d
 8008868:	0800af5f 	.word	0x0800af5f
 800886c:	0800af78 	.word	0x0800af78
 8008870:	0800af88 	.word	0x0800af88
 8008874:	0800af94 	.word	0x0800af94
 8008878:	0800afb1 	.word	0x0800afb1
 800887c:	0800afc3 	.word	0x0800afc3
 8008880:	0800afd4 	.word	0x0800afd4
 8008884:	0800afe6 	.word	0x0800afe6
 8008888:	0800aff2 	.word	0x0800aff2
 800888c:	0800b00a 	.word	0x0800b00a
 8008890:	0800b016 	.word	0x0800b016
 8008894:	0800b028 	.word	0x0800b028
 8008898:	0800b037 	.word	0x0800b037
 800889c:	0800b047 	.word	0x0800b047
 80088a0:	0800b054 	.word	0x0800b054
 80088a4:	0800b073 	.word	0x0800b073
 80088a8:	0800b082 	.word	0x0800b082
 80088ac:	0800b093 	.word	0x0800b093
 80088b0:	0800b0b7 	.word	0x0800b0b7
 80088b4:	0800b0d5 	.word	0x0800b0d5
 80088b8:	0800b0f3 	.word	0x0800b0f3
 80088bc:	0800b113 	.word	0x0800b113
 80088c0:	0800b12a 	.word	0x0800b12a
 80088c4:	0800b139 	.word	0x0800b139
 80088c8:	0800b148 	.word	0x0800b148
 80088cc:	0800b15c 	.word	0x0800b15c
 80088d0:	0800b174 	.word	0x0800b174
 80088d4:	0800b182 	.word	0x0800b182
 80088d8:	0800b18f 	.word	0x0800b18f
 80088dc:	0800b1a5 	.word	0x0800b1a5
 80088e0:	0800b1b4 	.word	0x0800b1b4
 80088e4:	0800b1c0 	.word	0x0800b1c0
 80088e8:	0800b1ef 	.word	0x0800b1ef
 80088ec:	0800b200 	.word	0x0800b200
 80088f0:	0800b21b 	.word	0x0800b21b
 80088f4:	0800b22e 	.word	0x0800b22e
 80088f8:	0800b244 	.word	0x0800b244
 80088fc:	0800b24d 	.word	0x0800b24d
 8008900:	0800b264 	.word	0x0800b264
 8008904:	0800b26c 	.word	0x0800b26c
 8008908:	0800b279 	.word	0x0800b279
 800890c:	0800b28e 	.word	0x0800b28e
 8008910:	0800b2a2 	.word	0x0800b2a2
 8008914:	0800b2ba 	.word	0x0800b2ba
 8008918:	0800b2c9 	.word	0x0800b2c9
 800891c:	0800b2da 	.word	0x0800b2da
 8008920:	0800b2ed 	.word	0x0800b2ed
 8008924:	0800b2f9 	.word	0x0800b2f9
 8008928:	0800b312 	.word	0x0800b312
 800892c:	0800b326 	.word	0x0800b326
 8008930:	0800b341 	.word	0x0800b341
 8008934:	0800b359 	.word	0x0800b359
 8008938:	0800b373 	.word	0x0800b373
 800893c:	0800b37b 	.word	0x0800b37b
 8008940:	0800b3ab 	.word	0x0800b3ab
 8008944:	0800b3ca 	.word	0x0800b3ca
 8008948:	0800b3e9 	.word	0x0800b3e9
 800894c:	0800b400 	.word	0x0800b400
 8008950:	0800b413 	.word	0x0800b413
 8008954:	0800b42c 	.word	0x0800b42c
 8008958:	0800b443 	.word	0x0800b443
 800895c:	0800b459 	.word	0x0800b459
 8008960:	0800b47a 	.word	0x0800b47a
 8008964:	0800b492 	.word	0x0800b492
 8008968:	0800b4ae 	.word	0x0800b4ae
 800896c:	0800b4c1 	.word	0x0800b4c1
 8008970:	0800b4d7 	.word	0x0800b4d7
 8008974:	0800b4eb 	.word	0x0800b4eb
 8008978:	0800b50d 	.word	0x0800b50d
 800897c:	0800b533 	.word	0x0800b533
 8008980:	0800b544 	.word	0x0800b544
 8008984:	0800ae9d 	.word	0x0800ae9d
 8008988:	0800b559 	.word	0x0800b559

0800898c <strerror>:
 800898c:	4601      	mov	r1, r0
 800898e:	4803      	ldr	r0, [pc, #12]	; (800899c <strerror+0x10>)
 8008990:	2300      	movs	r3, #0
 8008992:	6800      	ldr	r0, [r0, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	f7ff be13 	b.w	80085c0 <_strerror_r>
 800899a:	bf00      	nop
 800899c:	20000014 	.word	0x20000014

080089a0 <_user_strerror>:
 80089a0:	2000      	movs	r0, #0
 80089a2:	4770      	bx	lr

080089a4 <__swbuf_r>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	460e      	mov	r6, r1
 80089a8:	4614      	mov	r4, r2
 80089aa:	4605      	mov	r5, r0
 80089ac:	b118      	cbz	r0, 80089b6 <__swbuf_r+0x12>
 80089ae:	6983      	ldr	r3, [r0, #24]
 80089b0:	b90b      	cbnz	r3, 80089b6 <__swbuf_r+0x12>
 80089b2:	f000 f9d1 	bl	8008d58 <__sinit>
 80089b6:	4b21      	ldr	r3, [pc, #132]	; (8008a3c <__swbuf_r+0x98>)
 80089b8:	429c      	cmp	r4, r3
 80089ba:	d12b      	bne.n	8008a14 <__swbuf_r+0x70>
 80089bc:	686c      	ldr	r4, [r5, #4]
 80089be:	69a3      	ldr	r3, [r4, #24]
 80089c0:	60a3      	str	r3, [r4, #8]
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	071a      	lsls	r2, r3, #28
 80089c6:	d52f      	bpl.n	8008a28 <__swbuf_r+0x84>
 80089c8:	6923      	ldr	r3, [r4, #16]
 80089ca:	b36b      	cbz	r3, 8008a28 <__swbuf_r+0x84>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	6820      	ldr	r0, [r4, #0]
 80089d0:	1ac0      	subs	r0, r0, r3
 80089d2:	6963      	ldr	r3, [r4, #20]
 80089d4:	b2f6      	uxtb	r6, r6
 80089d6:	4283      	cmp	r3, r0
 80089d8:	4637      	mov	r7, r6
 80089da:	dc04      	bgt.n	80089e6 <__swbuf_r+0x42>
 80089dc:	4621      	mov	r1, r4
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 f926 	bl	8008c30 <_fflush_r>
 80089e4:	bb30      	cbnz	r0, 8008a34 <__swbuf_r+0x90>
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	3b01      	subs	r3, #1
 80089ea:	60a3      	str	r3, [r4, #8]
 80089ec:	6823      	ldr	r3, [r4, #0]
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	6022      	str	r2, [r4, #0]
 80089f2:	701e      	strb	r6, [r3, #0]
 80089f4:	6963      	ldr	r3, [r4, #20]
 80089f6:	3001      	adds	r0, #1
 80089f8:	4283      	cmp	r3, r0
 80089fa:	d004      	beq.n	8008a06 <__swbuf_r+0x62>
 80089fc:	89a3      	ldrh	r3, [r4, #12]
 80089fe:	07db      	lsls	r3, r3, #31
 8008a00:	d506      	bpl.n	8008a10 <__swbuf_r+0x6c>
 8008a02:	2e0a      	cmp	r6, #10
 8008a04:	d104      	bne.n	8008a10 <__swbuf_r+0x6c>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f911 	bl	8008c30 <_fflush_r>
 8008a0e:	b988      	cbnz	r0, 8008a34 <__swbuf_r+0x90>
 8008a10:	4638      	mov	r0, r7
 8008a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a14:	4b0a      	ldr	r3, [pc, #40]	; (8008a40 <__swbuf_r+0x9c>)
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d101      	bne.n	8008a1e <__swbuf_r+0x7a>
 8008a1a:	68ac      	ldr	r4, [r5, #8]
 8008a1c:	e7cf      	b.n	80089be <__swbuf_r+0x1a>
 8008a1e:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <__swbuf_r+0xa0>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	bf08      	it	eq
 8008a24:	68ec      	ldreq	r4, [r5, #12]
 8008a26:	e7ca      	b.n	80089be <__swbuf_r+0x1a>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 f80c 	bl	8008a48 <__swsetup_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0cb      	beq.n	80089cc <__swbuf_r+0x28>
 8008a34:	f04f 37ff 	mov.w	r7, #4294967295
 8008a38:	e7ea      	b.n	8008a10 <__swbuf_r+0x6c>
 8008a3a:	bf00      	nop
 8008a3c:	0800b584 	.word	0x0800b584
 8008a40:	0800b5a4 	.word	0x0800b5a4
 8008a44:	0800b564 	.word	0x0800b564

08008a48 <__swsetup_r>:
 8008a48:	4b32      	ldr	r3, [pc, #200]	; (8008b14 <__swsetup_r+0xcc>)
 8008a4a:	b570      	push	{r4, r5, r6, lr}
 8008a4c:	681d      	ldr	r5, [r3, #0]
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	b125      	cbz	r5, 8008a5e <__swsetup_r+0x16>
 8008a54:	69ab      	ldr	r3, [r5, #24]
 8008a56:	b913      	cbnz	r3, 8008a5e <__swsetup_r+0x16>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f97d 	bl	8008d58 <__sinit>
 8008a5e:	4b2e      	ldr	r3, [pc, #184]	; (8008b18 <__swsetup_r+0xd0>)
 8008a60:	429c      	cmp	r4, r3
 8008a62:	d10f      	bne.n	8008a84 <__swsetup_r+0x3c>
 8008a64:	686c      	ldr	r4, [r5, #4]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a6c:	0719      	lsls	r1, r3, #28
 8008a6e:	d42c      	bmi.n	8008aca <__swsetup_r+0x82>
 8008a70:	06dd      	lsls	r5, r3, #27
 8008a72:	d411      	bmi.n	8008a98 <__swsetup_r+0x50>
 8008a74:	2309      	movs	r3, #9
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a7c:	81a3      	strh	r3, [r4, #12]
 8008a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a82:	e03e      	b.n	8008b02 <__swsetup_r+0xba>
 8008a84:	4b25      	ldr	r3, [pc, #148]	; (8008b1c <__swsetup_r+0xd4>)
 8008a86:	429c      	cmp	r4, r3
 8008a88:	d101      	bne.n	8008a8e <__swsetup_r+0x46>
 8008a8a:	68ac      	ldr	r4, [r5, #8]
 8008a8c:	e7eb      	b.n	8008a66 <__swsetup_r+0x1e>
 8008a8e:	4b24      	ldr	r3, [pc, #144]	; (8008b20 <__swsetup_r+0xd8>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	bf08      	it	eq
 8008a94:	68ec      	ldreq	r4, [r5, #12]
 8008a96:	e7e6      	b.n	8008a66 <__swsetup_r+0x1e>
 8008a98:	0758      	lsls	r0, r3, #29
 8008a9a:	d512      	bpl.n	8008ac2 <__swsetup_r+0x7a>
 8008a9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9e:	b141      	cbz	r1, 8008ab2 <__swsetup_r+0x6a>
 8008aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d002      	beq.n	8008aae <__swsetup_r+0x66>
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff f945 	bl	8007d38 <_free_r>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ab2:	89a3      	ldrh	r3, [r4, #12]
 8008ab4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ab8:	81a3      	strh	r3, [r4, #12]
 8008aba:	2300      	movs	r3, #0
 8008abc:	6063      	str	r3, [r4, #4]
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	6023      	str	r3, [r4, #0]
 8008ac2:	89a3      	ldrh	r3, [r4, #12]
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	b94b      	cbnz	r3, 8008ae2 <__swsetup_r+0x9a>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad8:	d003      	beq.n	8008ae2 <__swsetup_r+0x9a>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4630      	mov	r0, r6
 8008ade:	f000 f9fd 	bl	8008edc <__smakebuf_r>
 8008ae2:	89a0      	ldrh	r0, [r4, #12]
 8008ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae8:	f010 0301 	ands.w	r3, r0, #1
 8008aec:	d00a      	beq.n	8008b04 <__swsetup_r+0xbc>
 8008aee:	2300      	movs	r3, #0
 8008af0:	60a3      	str	r3, [r4, #8]
 8008af2:	6963      	ldr	r3, [r4, #20]
 8008af4:	425b      	negs	r3, r3
 8008af6:	61a3      	str	r3, [r4, #24]
 8008af8:	6923      	ldr	r3, [r4, #16]
 8008afa:	b943      	cbnz	r3, 8008b0e <__swsetup_r+0xc6>
 8008afc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b00:	d1ba      	bne.n	8008a78 <__swsetup_r+0x30>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	0781      	lsls	r1, r0, #30
 8008b06:	bf58      	it	pl
 8008b08:	6963      	ldrpl	r3, [r4, #20]
 8008b0a:	60a3      	str	r3, [r4, #8]
 8008b0c:	e7f4      	b.n	8008af8 <__swsetup_r+0xb0>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e7f7      	b.n	8008b02 <__swsetup_r+0xba>
 8008b12:	bf00      	nop
 8008b14:	20000014 	.word	0x20000014
 8008b18:	0800b584 	.word	0x0800b584
 8008b1c:	0800b5a4 	.word	0x0800b5a4
 8008b20:	0800b564 	.word	0x0800b564

08008b24 <__sflush_r>:
 8008b24:	898a      	ldrh	r2, [r1, #12]
 8008b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2a:	4605      	mov	r5, r0
 8008b2c:	0710      	lsls	r0, r2, #28
 8008b2e:	460c      	mov	r4, r1
 8008b30:	d458      	bmi.n	8008be4 <__sflush_r+0xc0>
 8008b32:	684b      	ldr	r3, [r1, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	dc05      	bgt.n	8008b44 <__sflush_r+0x20>
 8008b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dc02      	bgt.n	8008b44 <__sflush_r+0x20>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	d0f9      	beq.n	8008b3e <__sflush_r+0x1a>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b50:	682f      	ldr	r7, [r5, #0]
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	d032      	beq.n	8008bbc <__sflush_r+0x98>
 8008b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	075a      	lsls	r2, r3, #29
 8008b5c:	d505      	bpl.n	8008b6a <__sflush_r+0x46>
 8008b5e:	6863      	ldr	r3, [r4, #4]
 8008b60:	1ac0      	subs	r0, r0, r3
 8008b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b64:	b10b      	cbz	r3, 8008b6a <__sflush_r+0x46>
 8008b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b68:	1ac0      	subs	r0, r0, r3
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b70:	6a21      	ldr	r1, [r4, #32]
 8008b72:	4628      	mov	r0, r5
 8008b74:	47b0      	blx	r6
 8008b76:	1c43      	adds	r3, r0, #1
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	d106      	bne.n	8008b8a <__sflush_r+0x66>
 8008b7c:	6829      	ldr	r1, [r5, #0]
 8008b7e:	291d      	cmp	r1, #29
 8008b80:	d82c      	bhi.n	8008bdc <__sflush_r+0xb8>
 8008b82:	4a2a      	ldr	r2, [pc, #168]	; (8008c2c <__sflush_r+0x108>)
 8008b84:	40ca      	lsrs	r2, r1
 8008b86:	07d6      	lsls	r6, r2, #31
 8008b88:	d528      	bpl.n	8008bdc <__sflush_r+0xb8>
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	6062      	str	r2, [r4, #4]
 8008b8e:	04d9      	lsls	r1, r3, #19
 8008b90:	6922      	ldr	r2, [r4, #16]
 8008b92:	6022      	str	r2, [r4, #0]
 8008b94:	d504      	bpl.n	8008ba0 <__sflush_r+0x7c>
 8008b96:	1c42      	adds	r2, r0, #1
 8008b98:	d101      	bne.n	8008b9e <__sflush_r+0x7a>
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	b903      	cbnz	r3, 8008ba0 <__sflush_r+0x7c>
 8008b9e:	6560      	str	r0, [r4, #84]	; 0x54
 8008ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ba2:	602f      	str	r7, [r5, #0]
 8008ba4:	2900      	cmp	r1, #0
 8008ba6:	d0ca      	beq.n	8008b3e <__sflush_r+0x1a>
 8008ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bac:	4299      	cmp	r1, r3
 8008bae:	d002      	beq.n	8008bb6 <__sflush_r+0x92>
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7ff f8c1 	bl	8007d38 <_free_r>
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8008bba:	e7c1      	b.n	8008b40 <__sflush_r+0x1c>
 8008bbc:	6a21      	ldr	r1, [r4, #32]
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b0      	blx	r6
 8008bc4:	1c41      	adds	r1, r0, #1
 8008bc6:	d1c7      	bne.n	8008b58 <__sflush_r+0x34>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d0c4      	beq.n	8008b58 <__sflush_r+0x34>
 8008bce:	2b1d      	cmp	r3, #29
 8008bd0:	d001      	beq.n	8008bd6 <__sflush_r+0xb2>
 8008bd2:	2b16      	cmp	r3, #22
 8008bd4:	d101      	bne.n	8008bda <__sflush_r+0xb6>
 8008bd6:	602f      	str	r7, [r5, #0]
 8008bd8:	e7b1      	b.n	8008b3e <__sflush_r+0x1a>
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	e7ad      	b.n	8008b40 <__sflush_r+0x1c>
 8008be4:	690f      	ldr	r7, [r1, #16]
 8008be6:	2f00      	cmp	r7, #0
 8008be8:	d0a9      	beq.n	8008b3e <__sflush_r+0x1a>
 8008bea:	0793      	lsls	r3, r2, #30
 8008bec:	680e      	ldr	r6, [r1, #0]
 8008bee:	bf08      	it	eq
 8008bf0:	694b      	ldreq	r3, [r1, #20]
 8008bf2:	600f      	str	r7, [r1, #0]
 8008bf4:	bf18      	it	ne
 8008bf6:	2300      	movne	r3, #0
 8008bf8:	eba6 0807 	sub.w	r8, r6, r7
 8008bfc:	608b      	str	r3, [r1, #8]
 8008bfe:	f1b8 0f00 	cmp.w	r8, #0
 8008c02:	dd9c      	ble.n	8008b3e <__sflush_r+0x1a>
 8008c04:	6a21      	ldr	r1, [r4, #32]
 8008c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c08:	4643      	mov	r3, r8
 8008c0a:	463a      	mov	r2, r7
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	47b0      	blx	r6
 8008c10:	2800      	cmp	r0, #0
 8008c12:	dc06      	bgt.n	8008c22 <__sflush_r+0xfe>
 8008c14:	89a3      	ldrh	r3, [r4, #12]
 8008c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1a:	81a3      	strh	r3, [r4, #12]
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	e78e      	b.n	8008b40 <__sflush_r+0x1c>
 8008c22:	4407      	add	r7, r0
 8008c24:	eba8 0800 	sub.w	r8, r8, r0
 8008c28:	e7e9      	b.n	8008bfe <__sflush_r+0xda>
 8008c2a:	bf00      	nop
 8008c2c:	20400001 	.word	0x20400001

08008c30 <_fflush_r>:
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	690b      	ldr	r3, [r1, #16]
 8008c34:	4605      	mov	r5, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	b913      	cbnz	r3, 8008c40 <_fflush_r+0x10>
 8008c3a:	2500      	movs	r5, #0
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	b118      	cbz	r0, 8008c4a <_fflush_r+0x1a>
 8008c42:	6983      	ldr	r3, [r0, #24]
 8008c44:	b90b      	cbnz	r3, 8008c4a <_fflush_r+0x1a>
 8008c46:	f000 f887 	bl	8008d58 <__sinit>
 8008c4a:	4b14      	ldr	r3, [pc, #80]	; (8008c9c <_fflush_r+0x6c>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	d11b      	bne.n	8008c88 <_fflush_r+0x58>
 8008c50:	686c      	ldr	r4, [r5, #4]
 8008c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d0ef      	beq.n	8008c3a <_fflush_r+0xa>
 8008c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c5c:	07d0      	lsls	r0, r2, #31
 8008c5e:	d404      	bmi.n	8008c6a <_fflush_r+0x3a>
 8008c60:	0599      	lsls	r1, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_fflush_r+0x3a>
 8008c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c66:	f7ff f82e 	bl	8007cc6 <__retarget_lock_acquire_recursive>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f7ff ff59 	bl	8008b24 <__sflush_r>
 8008c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c74:	07da      	lsls	r2, r3, #31
 8008c76:	4605      	mov	r5, r0
 8008c78:	d4e0      	bmi.n	8008c3c <_fflush_r+0xc>
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	059b      	lsls	r3, r3, #22
 8008c7e:	d4dd      	bmi.n	8008c3c <_fflush_r+0xc>
 8008c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c82:	f7ff f821 	bl	8007cc8 <__retarget_lock_release_recursive>
 8008c86:	e7d9      	b.n	8008c3c <_fflush_r+0xc>
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <_fflush_r+0x70>)
 8008c8a:	429c      	cmp	r4, r3
 8008c8c:	d101      	bne.n	8008c92 <_fflush_r+0x62>
 8008c8e:	68ac      	ldr	r4, [r5, #8]
 8008c90:	e7df      	b.n	8008c52 <_fflush_r+0x22>
 8008c92:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <_fflush_r+0x74>)
 8008c94:	429c      	cmp	r4, r3
 8008c96:	bf08      	it	eq
 8008c98:	68ec      	ldreq	r4, [r5, #12]
 8008c9a:	e7da      	b.n	8008c52 <_fflush_r+0x22>
 8008c9c:	0800b584 	.word	0x0800b584
 8008ca0:	0800b5a4 	.word	0x0800b5a4
 8008ca4:	0800b564 	.word	0x0800b564

08008ca8 <std>:
 8008ca8:	2300      	movs	r3, #0
 8008caa:	b510      	push	{r4, lr}
 8008cac:	4604      	mov	r4, r0
 8008cae:	e9c0 3300 	strd	r3, r3, [r0]
 8008cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cb6:	6083      	str	r3, [r0, #8]
 8008cb8:	8181      	strh	r1, [r0, #12]
 8008cba:	6643      	str	r3, [r0, #100]	; 0x64
 8008cbc:	81c2      	strh	r2, [r0, #14]
 8008cbe:	6183      	str	r3, [r0, #24]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	2208      	movs	r2, #8
 8008cc4:	305c      	adds	r0, #92	; 0x5c
 8008cc6:	f7ff f81f 	bl	8007d08 <memset>
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <std+0x38>)
 8008ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <std+0x3c>)
 8008cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <std+0x40>)
 8008cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <std+0x44>)
 8008cd8:	6224      	str	r4, [r4, #32]
 8008cda:	6323      	str	r3, [r4, #48]	; 0x30
 8008cdc:	bd10      	pop	{r4, pc}
 8008cde:	bf00      	nop
 8008ce0:	08008fc1 	.word	0x08008fc1
 8008ce4:	08008fe3 	.word	0x08008fe3
 8008ce8:	0800901b 	.word	0x0800901b
 8008cec:	0800903f 	.word	0x0800903f

08008cf0 <_cleanup_r>:
 8008cf0:	4901      	ldr	r1, [pc, #4]	; (8008cf8 <_cleanup_r+0x8>)
 8008cf2:	f000 b8af 	b.w	8008e54 <_fwalk_reent>
 8008cf6:	bf00      	nop
 8008cf8:	08008c31 	.word	0x08008c31

08008cfc <__sfmoreglue>:
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	1e4a      	subs	r2, r1, #1
 8008d00:	2568      	movs	r5, #104	; 0x68
 8008d02:	4355      	muls	r5, r2
 8008d04:	460e      	mov	r6, r1
 8008d06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d0a:	f7ff f865 	bl	8007dd8 <_malloc_r>
 8008d0e:	4604      	mov	r4, r0
 8008d10:	b140      	cbz	r0, 8008d24 <__sfmoreglue+0x28>
 8008d12:	2100      	movs	r1, #0
 8008d14:	e9c0 1600 	strd	r1, r6, [r0]
 8008d18:	300c      	adds	r0, #12
 8008d1a:	60a0      	str	r0, [r4, #8]
 8008d1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d20:	f7fe fff2 	bl	8007d08 <memset>
 8008d24:	4620      	mov	r0, r4
 8008d26:	bd70      	pop	{r4, r5, r6, pc}

08008d28 <__sfp_lock_acquire>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__sfp_lock_acquire+0x8>)
 8008d2a:	f7fe bfcc 	b.w	8007cc6 <__retarget_lock_acquire_recursive>
 8008d2e:	bf00      	nop
 8008d30:	20012ef4 	.word	0x20012ef4

08008d34 <__sfp_lock_release>:
 8008d34:	4801      	ldr	r0, [pc, #4]	; (8008d3c <__sfp_lock_release+0x8>)
 8008d36:	f7fe bfc7 	b.w	8007cc8 <__retarget_lock_release_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	20012ef4 	.word	0x20012ef4

08008d40 <__sinit_lock_acquire>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__sinit_lock_acquire+0x8>)
 8008d42:	f7fe bfc0 	b.w	8007cc6 <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	20012eef 	.word	0x20012eef

08008d4c <__sinit_lock_release>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__sinit_lock_release+0x8>)
 8008d4e:	f7fe bfbb 	b.w	8007cc8 <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	20012eef 	.word	0x20012eef

08008d58 <__sinit>:
 8008d58:	b510      	push	{r4, lr}
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	f7ff fff0 	bl	8008d40 <__sinit_lock_acquire>
 8008d60:	69a3      	ldr	r3, [r4, #24]
 8008d62:	b11b      	cbz	r3, 8008d6c <__sinit+0x14>
 8008d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d68:	f7ff bff0 	b.w	8008d4c <__sinit_lock_release>
 8008d6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d70:	6523      	str	r3, [r4, #80]	; 0x50
 8008d72:	4b13      	ldr	r3, [pc, #76]	; (8008dc0 <__sinit+0x68>)
 8008d74:	4a13      	ldr	r2, [pc, #76]	; (8008dc4 <__sinit+0x6c>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d7a:	42a3      	cmp	r3, r4
 8008d7c:	bf04      	itt	eq
 8008d7e:	2301      	moveq	r3, #1
 8008d80:	61a3      	streq	r3, [r4, #24]
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 f820 	bl	8008dc8 <__sfp>
 8008d88:	6060      	str	r0, [r4, #4]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 f81c 	bl	8008dc8 <__sfp>
 8008d90:	60a0      	str	r0, [r4, #8]
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 f818 	bl	8008dc8 <__sfp>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	60e0      	str	r0, [r4, #12]
 8008d9c:	2104      	movs	r1, #4
 8008d9e:	6860      	ldr	r0, [r4, #4]
 8008da0:	f7ff ff82 	bl	8008ca8 <std>
 8008da4:	68a0      	ldr	r0, [r4, #8]
 8008da6:	2201      	movs	r2, #1
 8008da8:	2109      	movs	r1, #9
 8008daa:	f7ff ff7d 	bl	8008ca8 <std>
 8008dae:	68e0      	ldr	r0, [r4, #12]
 8008db0:	2202      	movs	r2, #2
 8008db2:	2112      	movs	r1, #18
 8008db4:	f7ff ff78 	bl	8008ca8 <std>
 8008db8:	2301      	movs	r3, #1
 8008dba:	61a3      	str	r3, [r4, #24]
 8008dbc:	e7d2      	b.n	8008d64 <__sinit+0xc>
 8008dbe:	bf00      	nop
 8008dc0:	0800ae94 	.word	0x0800ae94
 8008dc4:	08008cf1 	.word	0x08008cf1

08008dc8 <__sfp>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	4607      	mov	r7, r0
 8008dcc:	f7ff ffac 	bl	8008d28 <__sfp_lock_acquire>
 8008dd0:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <__sfp+0x84>)
 8008dd2:	681e      	ldr	r6, [r3, #0]
 8008dd4:	69b3      	ldr	r3, [r6, #24]
 8008dd6:	b913      	cbnz	r3, 8008dde <__sfp+0x16>
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff ffbd 	bl	8008d58 <__sinit>
 8008dde:	3648      	adds	r6, #72	; 0x48
 8008de0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	d503      	bpl.n	8008df0 <__sfp+0x28>
 8008de8:	6833      	ldr	r3, [r6, #0]
 8008dea:	b30b      	cbz	r3, 8008e30 <__sfp+0x68>
 8008dec:	6836      	ldr	r6, [r6, #0]
 8008dee:	e7f7      	b.n	8008de0 <__sfp+0x18>
 8008df0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008df4:	b9d5      	cbnz	r5, 8008e2c <__sfp+0x64>
 8008df6:	4b16      	ldr	r3, [pc, #88]	; (8008e50 <__sfp+0x88>)
 8008df8:	60e3      	str	r3, [r4, #12]
 8008dfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008dfe:	6665      	str	r5, [r4, #100]	; 0x64
 8008e00:	f7fe ff60 	bl	8007cc4 <__retarget_lock_init_recursive>
 8008e04:	f7ff ff96 	bl	8008d34 <__sfp_lock_release>
 8008e08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e10:	6025      	str	r5, [r4, #0]
 8008e12:	61a5      	str	r5, [r4, #24]
 8008e14:	2208      	movs	r2, #8
 8008e16:	4629      	mov	r1, r5
 8008e18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e1c:	f7fe ff74 	bl	8007d08 <memset>
 8008e20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e28:	4620      	mov	r0, r4
 8008e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e2c:	3468      	adds	r4, #104	; 0x68
 8008e2e:	e7d9      	b.n	8008de4 <__sfp+0x1c>
 8008e30:	2104      	movs	r1, #4
 8008e32:	4638      	mov	r0, r7
 8008e34:	f7ff ff62 	bl	8008cfc <__sfmoreglue>
 8008e38:	4604      	mov	r4, r0
 8008e3a:	6030      	str	r0, [r6, #0]
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d1d5      	bne.n	8008dec <__sfp+0x24>
 8008e40:	f7ff ff78 	bl	8008d34 <__sfp_lock_release>
 8008e44:	230c      	movs	r3, #12
 8008e46:	603b      	str	r3, [r7, #0]
 8008e48:	e7ee      	b.n	8008e28 <__sfp+0x60>
 8008e4a:	bf00      	nop
 8008e4c:	0800ae94 	.word	0x0800ae94
 8008e50:	ffff0001 	.word	0xffff0001

08008e54 <_fwalk_reent>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	4606      	mov	r6, r0
 8008e5a:	4688      	mov	r8, r1
 8008e5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e60:	2700      	movs	r7, #0
 8008e62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e66:	f1b9 0901 	subs.w	r9, r9, #1
 8008e6a:	d505      	bpl.n	8008e78 <_fwalk_reent+0x24>
 8008e6c:	6824      	ldr	r4, [r4, #0]
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	d1f7      	bne.n	8008e62 <_fwalk_reent+0xe>
 8008e72:	4638      	mov	r0, r7
 8008e74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e78:	89ab      	ldrh	r3, [r5, #12]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d907      	bls.n	8008e8e <_fwalk_reent+0x3a>
 8008e7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e82:	3301      	adds	r3, #1
 8008e84:	d003      	beq.n	8008e8e <_fwalk_reent+0x3a>
 8008e86:	4629      	mov	r1, r5
 8008e88:	4630      	mov	r0, r6
 8008e8a:	47c0      	blx	r8
 8008e8c:	4307      	orrs	r7, r0
 8008e8e:	3568      	adds	r5, #104	; 0x68
 8008e90:	e7e9      	b.n	8008e66 <_fwalk_reent+0x12>

08008e92 <__swhatbuf_r>:
 8008e92:	b570      	push	{r4, r5, r6, lr}
 8008e94:	460e      	mov	r6, r1
 8008e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	b096      	sub	sp, #88	; 0x58
 8008e9e:	4614      	mov	r4, r2
 8008ea0:	461d      	mov	r5, r3
 8008ea2:	da07      	bge.n	8008eb4 <__swhatbuf_r+0x22>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	602b      	str	r3, [r5, #0]
 8008ea8:	89b3      	ldrh	r3, [r6, #12]
 8008eaa:	061a      	lsls	r2, r3, #24
 8008eac:	d410      	bmi.n	8008ed0 <__swhatbuf_r+0x3e>
 8008eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb2:	e00e      	b.n	8008ed2 <__swhatbuf_r+0x40>
 8008eb4:	466a      	mov	r2, sp
 8008eb6:	f000 f8e9 	bl	800908c <_fstat_r>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	dbf2      	blt.n	8008ea4 <__swhatbuf_r+0x12>
 8008ebe:	9a01      	ldr	r2, [sp, #4]
 8008ec0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ec4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008ec8:	425a      	negs	r2, r3
 8008eca:	415a      	adcs	r2, r3
 8008ecc:	602a      	str	r2, [r5, #0]
 8008ece:	e7ee      	b.n	8008eae <__swhatbuf_r+0x1c>
 8008ed0:	2340      	movs	r3, #64	; 0x40
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	6023      	str	r3, [r4, #0]
 8008ed6:	b016      	add	sp, #88	; 0x58
 8008ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08008edc <__smakebuf_r>:
 8008edc:	898b      	ldrh	r3, [r1, #12]
 8008ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ee0:	079d      	lsls	r5, r3, #30
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	d507      	bpl.n	8008ef8 <__smakebuf_r+0x1c>
 8008ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008eec:	6023      	str	r3, [r4, #0]
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	6163      	str	r3, [r4, #20]
 8008ef4:	b002      	add	sp, #8
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}
 8008ef8:	ab01      	add	r3, sp, #4
 8008efa:	466a      	mov	r2, sp
 8008efc:	f7ff ffc9 	bl	8008e92 <__swhatbuf_r>
 8008f00:	9900      	ldr	r1, [sp, #0]
 8008f02:	4605      	mov	r5, r0
 8008f04:	4630      	mov	r0, r6
 8008f06:	f7fe ff67 	bl	8007dd8 <_malloc_r>
 8008f0a:	b948      	cbnz	r0, 8008f20 <__smakebuf_r+0x44>
 8008f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f10:	059a      	lsls	r2, r3, #22
 8008f12:	d4ef      	bmi.n	8008ef4 <__smakebuf_r+0x18>
 8008f14:	f023 0303 	bic.w	r3, r3, #3
 8008f18:	f043 0302 	orr.w	r3, r3, #2
 8008f1c:	81a3      	strh	r3, [r4, #12]
 8008f1e:	e7e3      	b.n	8008ee8 <__smakebuf_r+0xc>
 8008f20:	4b0d      	ldr	r3, [pc, #52]	; (8008f58 <__smakebuf_r+0x7c>)
 8008f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	6020      	str	r0, [r4, #0]
 8008f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f2c:	81a3      	strh	r3, [r4, #12]
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	6163      	str	r3, [r4, #20]
 8008f32:	9b01      	ldr	r3, [sp, #4]
 8008f34:	6120      	str	r0, [r4, #16]
 8008f36:	b15b      	cbz	r3, 8008f50 <__smakebuf_r+0x74>
 8008f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f000 f8b7 	bl	80090b0 <_isatty_r>
 8008f42:	b128      	cbz	r0, 8008f50 <__smakebuf_r+0x74>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	f043 0301 	orr.w	r3, r3, #1
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	89a0      	ldrh	r0, [r4, #12]
 8008f52:	4305      	orrs	r5, r0
 8008f54:	81a5      	strh	r5, [r4, #12]
 8008f56:	e7cd      	b.n	8008ef4 <__smakebuf_r+0x18>
 8008f58:	08008cf1 	.word	0x08008cf1

08008f5c <__malloc_lock>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	; (8008f64 <__malloc_lock+0x8>)
 8008f5e:	f7fe beb2 	b.w	8007cc6 <__retarget_lock_acquire_recursive>
 8008f62:	bf00      	nop
 8008f64:	20012ef0 	.word	0x20012ef0

08008f68 <__malloc_unlock>:
 8008f68:	4801      	ldr	r0, [pc, #4]	; (8008f70 <__malloc_unlock+0x8>)
 8008f6a:	f7fe bead 	b.w	8007cc8 <__retarget_lock_release_recursive>
 8008f6e:	bf00      	nop
 8008f70:	20012ef0 	.word	0x20012ef0

08008f74 <_realloc_r>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	4607      	mov	r7, r0
 8008f78:	4614      	mov	r4, r2
 8008f7a:	460e      	mov	r6, r1
 8008f7c:	b921      	cbnz	r1, 8008f88 <_realloc_r+0x14>
 8008f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008f82:	4611      	mov	r1, r2
 8008f84:	f7fe bf28 	b.w	8007dd8 <_malloc_r>
 8008f88:	b922      	cbnz	r2, 8008f94 <_realloc_r+0x20>
 8008f8a:	f7fe fed5 	bl	8007d38 <_free_r>
 8008f8e:	4625      	mov	r5, r4
 8008f90:	4628      	mov	r0, r5
 8008f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f94:	f000 f8ae 	bl	80090f4 <_malloc_usable_size_r>
 8008f98:	42a0      	cmp	r0, r4
 8008f9a:	d20f      	bcs.n	8008fbc <_realloc_r+0x48>
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	f7fe ff1a 	bl	8007dd8 <_malloc_r>
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d0f2      	beq.n	8008f90 <_realloc_r+0x1c>
 8008faa:	4631      	mov	r1, r6
 8008fac:	4622      	mov	r2, r4
 8008fae:	f7fe fe9d 	bl	8007cec <memcpy>
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f7fe febf 	bl	8007d38 <_free_r>
 8008fba:	e7e9      	b.n	8008f90 <_realloc_r+0x1c>
 8008fbc:	4635      	mov	r5, r6
 8008fbe:	e7e7      	b.n	8008f90 <_realloc_r+0x1c>

08008fc0 <__sread>:
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc8:	f000 f89c 	bl	8009104 <_read_r>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	bfab      	itete	ge
 8008fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fd4:	181b      	addge	r3, r3, r0
 8008fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fda:	bfac      	ite	ge
 8008fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fde:	81a3      	strhlt	r3, [r4, #12]
 8008fe0:	bd10      	pop	{r4, pc}

08008fe2 <__swrite>:
 8008fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe6:	461f      	mov	r7, r3
 8008fe8:	898b      	ldrh	r3, [r1, #12]
 8008fea:	05db      	lsls	r3, r3, #23
 8008fec:	4605      	mov	r5, r0
 8008fee:	460c      	mov	r4, r1
 8008ff0:	4616      	mov	r6, r2
 8008ff2:	d505      	bpl.n	8009000 <__swrite+0x1e>
 8008ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f000 f868 	bl	80090d0 <_lseek_r>
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	4632      	mov	r2, r6
 800900e:	463b      	mov	r3, r7
 8009010:	4628      	mov	r0, r5
 8009012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009016:	f000 b817 	b.w	8009048 <_write_r>

0800901a <__sseek>:
 800901a:	b510      	push	{r4, lr}
 800901c:	460c      	mov	r4, r1
 800901e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009022:	f000 f855 	bl	80090d0 <_lseek_r>
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	89a3      	ldrh	r3, [r4, #12]
 800902a:	bf15      	itete	ne
 800902c:	6560      	strne	r0, [r4, #84]	; 0x54
 800902e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009036:	81a3      	strheq	r3, [r4, #12]
 8009038:	bf18      	it	ne
 800903a:	81a3      	strhne	r3, [r4, #12]
 800903c:	bd10      	pop	{r4, pc}

0800903e <__sclose>:
 800903e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009042:	f000 b813 	b.w	800906c <_close_r>
	...

08009048 <_write_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d07      	ldr	r5, [pc, #28]	; (8009068 <_write_r+0x20>)
 800904c:	4604      	mov	r4, r0
 800904e:	4608      	mov	r0, r1
 8009050:	4611      	mov	r1, r2
 8009052:	2200      	movs	r2, #0
 8009054:	602a      	str	r2, [r5, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f7f8 f9c5 	bl	80013e6 <_write>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_write_r+0x1e>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_write_r+0x1e>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20012ef8 	.word	0x20012ef8

0800906c <_close_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d06      	ldr	r5, [pc, #24]	; (8009088 <_close_r+0x1c>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	f7f8 f9d1 	bl	800141e <_close>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_close_r+0x1a>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_close_r+0x1a>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	20012ef8 	.word	0x20012ef8

0800908c <_fstat_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	; (80090ac <_fstat_r+0x20>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	f7f8 f9cc 	bl	8001436 <_fstat>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_fstat_r+0x1c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_fstat_r+0x1c>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	20012ef8 	.word	0x20012ef8

080090b0 <_isatty_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d06      	ldr	r5, [pc, #24]	; (80090cc <_isatty_r+0x1c>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	602b      	str	r3, [r5, #0]
 80090bc:	f7f8 f9cb 	bl	8001456 <_isatty>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_isatty_r+0x1a>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_isatty_r+0x1a>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20012ef8 	.word	0x20012ef8

080090d0 <_lseek_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4d07      	ldr	r5, [pc, #28]	; (80090f0 <_lseek_r+0x20>)
 80090d4:	4604      	mov	r4, r0
 80090d6:	4608      	mov	r0, r1
 80090d8:	4611      	mov	r1, r2
 80090da:	2200      	movs	r2, #0
 80090dc:	602a      	str	r2, [r5, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	f7f8 f9c4 	bl	800146c <_lseek>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_lseek_r+0x1e>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_lseek_r+0x1e>
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	20012ef8 	.word	0x20012ef8

080090f4 <_malloc_usable_size_r>:
 80090f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090f8:	1f18      	subs	r0, r3, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfbc      	itt	lt
 80090fe:	580b      	ldrlt	r3, [r1, r0]
 8009100:	18c0      	addlt	r0, r0, r3
 8009102:	4770      	bx	lr

08009104 <_read_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d07      	ldr	r5, [pc, #28]	; (8009124 <_read_r+0x20>)
 8009108:	4604      	mov	r4, r0
 800910a:	4608      	mov	r0, r1
 800910c:	4611      	mov	r1, r2
 800910e:	2200      	movs	r2, #0
 8009110:	602a      	str	r2, [r5, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	f7f8 f94a 	bl	80013ac <_read>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_read_r+0x1e>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_read_r+0x1e>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	20012ef8 	.word	0x20012ef8

08009128 <_init>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	bf00      	nop
 800912c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912e:	bc08      	pop	{r3}
 8009130:	469e      	mov	lr, r3
 8009132:	4770      	bx	lr

08009134 <_fini>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	bf00      	nop
 8009138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913a:	bc08      	pop	{r3}
 800913c:	469e      	mov	lr, r3
 800913e:	4770      	bx	lr
